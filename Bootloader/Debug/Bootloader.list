
Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004814  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  080049a4  080049a4  000149a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b8c  08004b8c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004b8c  08004b8c  00014b8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b94  08004b94  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b94  08004b94  00014b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b98  08004b98  00014b98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004b9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000730  20000070  20000070  00020070  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200007a0  200007a0  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b53a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f94  00000000  00000000  0002b5da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009c8  00000000  00000000  0002d570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000900  00000000  00000000  0002df38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020f17  00000000  00000000  0002e838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b2a9  00000000  00000000  0004f74f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c6d8a  00000000  00000000  0005a9f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00121782  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002f44  00000000  00000000  001217d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800498c 	.word	0x0800498c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800498c 	.word	0x0800498c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800057c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000580:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000584:	f003 0301 	and.w	r3, r3, #1
 8000588:	2b00      	cmp	r3, #0
 800058a:	d013      	beq.n	80005b4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800058c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000590:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000594:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000598:	2b00      	cmp	r3, #0
 800059a:	d00b      	beq.n	80005b4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800059c:	e000      	b.n	80005a0 <ITM_SendChar+0x2c>
    {
      __NOP();
 800059e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005a0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d0f9      	beq.n	800059e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005aa:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005ae:	687a      	ldr	r2, [r7, #4]
 80005b0:	b2d2      	uxtb	r2, r2
 80005b2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005b4:	687b      	ldr	r3, [r7, #4]
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	370c      	adds	r7, #12
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr

080005c2 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
int __io_putchar(int ch)
{
 80005c2:	b580      	push	{r7, lr}
 80005c4:	b082      	sub	sp, #8
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	6078      	str	r0, [r7, #4]
 // Write character to ITM ch.0
 ITM_SendChar(ch);
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	4618      	mov	r0, r3
 80005ce:	f7ff ffd1 	bl	8000574 <ITM_SendChar>
 return(ch);
 80005d2:	687b      	ldr	r3, [r7, #4]
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	3708      	adds	r7, #8
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}

080005dc <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80005dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80005e0:	b08c      	sub	sp, #48	; 0x30
 80005e2:	af00      	add	r7, sp, #0
 80005e4:	60f8      	str	r0, [r7, #12]
  if (hcan == &hcan1) {
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	4a70      	ldr	r2, [pc, #448]	; (80007ac <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 80005ea:	4293      	cmp	r3, r2
 80005ec:	f040 80d9 	bne.w	80007a2 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c6>
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 80005f0:	4b6f      	ldr	r3, [pc, #444]	; (80007b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>)
 80005f2:	4a70      	ldr	r2, [pc, #448]	; (80007b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d8>)
 80005f4:	2100      	movs	r1, #0
 80005f6:	68f8      	ldr	r0, [r7, #12]
 80005f8:	f001 f93d 	bl	8001876 <HAL_CAN_GetRxMessage>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a>
    {
	Error_Handler();
 8000602:	f000 fa85 	bl	8000b10 <Error_Handler>
//	printf("%02X ", RxData[i]);
//    }
//    printf("\n");

    // if id == 0x123, we are receiving firmware
    if (RxHeader.StdId == 0x123) {
 8000606:	4b6b      	ldr	r3, [pc, #428]	; (80007b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d8>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	f240 1223 	movw	r2, #291	; 0x123
 800060e:	4293      	cmp	r3, r2
 8000610:	f040 80c7 	bne.w	80007a2 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c6>

	// first reception, tells length of file
	if (status == NOT_STARTED) {
 8000614:	4b68      	ldr	r3, [pc, #416]	; (80007b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d14d      	bne.n	80006b8 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>
	    status = IN_PROGRESS;
 800061c:	4b66      	ldr	r3, [pc, #408]	; (80007b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>)
 800061e:	2201      	movs	r2, #1
 8000620:	701a      	strb	r2, [r3, #0]
	    indexCheck = 0;
 8000622:	4b66      	ldr	r3, [pc, #408]	; (80007bc <HAL_CAN_RxFifo0MsgPendingCallback+0x1e0>)
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
	    fileLength = 0;
 8000628:	4965      	ldr	r1, [pc, #404]	; (80007c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 800062a:	f04f 0200 	mov.w	r2, #0
 800062e:	f04f 0300 	mov.w	r3, #0
 8000632:	e9c1 2300 	strd	r2, r3, [r1]
	    for (int i = 0; i < 8; i++) {
 8000636:	2300      	movs	r3, #0
 8000638:	62fb      	str	r3, [r7, #44]	; 0x2c
 800063a:	e026      	b.n	800068a <HAL_CAN_RxFifo0MsgPendingCallback+0xae>
		fileLength <<= 8;
 800063c:	4b60      	ldr	r3, [pc, #384]	; (80007c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 800063e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000642:	f04f 0200 	mov.w	r2, #0
 8000646:	f04f 0300 	mov.w	r3, #0
 800064a:	020b      	lsls	r3, r1, #8
 800064c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8000650:	0202      	lsls	r2, r0, #8
 8000652:	495b      	ldr	r1, [pc, #364]	; (80007c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 8000654:	e9c1 2300 	strd	r2, r3, [r1]
		fileLength += RxData[i];
 8000658:	4a55      	ldr	r2, [pc, #340]	; (80007b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>)
 800065a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800065c:	4413      	add	r3, r2
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	b2db      	uxtb	r3, r3
 8000662:	2200      	movs	r2, #0
 8000664:	4698      	mov	r8, r3
 8000666:	4691      	mov	r9, r2
 8000668:	4b55      	ldr	r3, [pc, #340]	; (80007c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 800066a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800066e:	eb18 0102 	adds.w	r1, r8, r2
 8000672:	6039      	str	r1, [r7, #0]
 8000674:	eb49 0303 	adc.w	r3, r9, r3
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	4b51      	ldr	r3, [pc, #324]	; (80007c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 800067c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8000680:	e9c3 1200 	strd	r1, r2, [r3]
	    for (int i = 0; i < 8; i++) {
 8000684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000686:	3301      	adds	r3, #1
 8000688:	62fb      	str	r3, [r7, #44]	; 0x2c
 800068a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800068c:	2b07      	cmp	r3, #7
 800068e:	ddd5      	ble.n	800063c <HAL_CAN_RxFifo0MsgPendingCallback+0x60>
	    }
	    printf("Receiving file with length %lu\n", fileLength);
 8000690:	4b4b      	ldr	r3, [pc, #300]	; (80007c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 8000692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000696:	484b      	ldr	r0, [pc, #300]	; (80007c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 8000698:	f003 f974 	bl	8003984 <iprintf>

	    // wipe flash mem before writing
	    TxHeader.DLC = 1;
 800069c:	4b4a      	ldr	r3, [pc, #296]	; (80007c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 800069e:	2201      	movs	r2, #1
 80006a0:	611a      	str	r2, [r3, #16]
	    TxData[0] = status;
 80006a2:	4b45      	ldr	r3, [pc, #276]	; (80007b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>)
 80006a4:	781a      	ldrb	r2, [r3, #0]
 80006a6:	4b49      	ldr	r3, [pc, #292]	; (80007cc <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 80006a8:	701a      	strb	r2, [r3, #0]
	    HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 80006aa:	4b49      	ldr	r3, [pc, #292]	; (80007d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>)
 80006ac:	4a47      	ldr	r2, [pc, #284]	; (80007cc <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 80006ae:	4946      	ldr	r1, [pc, #280]	; (80007c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 80006b0:	483e      	ldr	r0, [pc, #248]	; (80007ac <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 80006b2:	f001 f805 	bl	80016c0 <HAL_CAN_AddTxMessage>
	    return;
 80006b6:	e074      	b.n	80007a2 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c6>
	}

	uint32_t index = 0;
 80006b8:	2300      	movs	r3, #0
 80006ba:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t *data = RxData + CAN_IDX_BYTES;
 80006bc:	4b45      	ldr	r3, [pc, #276]	; (80007d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 80006be:	623b      	str	r3, [r7, #32]
	for (int i = 0; i < CAN_IDX_BYTES; i++) {
 80006c0:	2300      	movs	r3, #0
 80006c2:	627b      	str	r3, [r7, #36]	; 0x24
 80006c4:	e00d      	b.n	80006e2 <HAL_CAN_RxFifo0MsgPendingCallback+0x106>
	    index <<= 8;
 80006c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006c8:	021b      	lsls	r3, r3, #8
 80006ca:	62bb      	str	r3, [r7, #40]	; 0x28
	    index += RxData[i];
 80006cc:	4a38      	ldr	r2, [pc, #224]	; (80007b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>)
 80006ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006d0:	4413      	add	r3, r2
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	461a      	mov	r2, r3
 80006d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006d8:	4413      	add	r3, r2
 80006da:	62bb      	str	r3, [r7, #40]	; 0x28
	for (int i = 0; i < CAN_IDX_BYTES; i++) {
 80006dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006de:	3301      	adds	r3, #1
 80006e0:	627b      	str	r3, [r7, #36]	; 0x24
 80006e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006e4:	2b01      	cmp	r3, #1
 80006e6:	ddee      	ble.n	80006c6 <HAL_CAN_RxFifo0MsgPendingCallback+0xea>
	}

//	printf("index diff: %d\n", index - indexCheck);
	if (index - indexCheck != 1) {
 80006e8:	4b34      	ldr	r3, [pc, #208]	; (80007bc <HAL_CAN_RxFifo0MsgPendingCallback+0x1e0>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	461a      	mov	r2, r3
 80006ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006f0:	1a9b      	subs	r3, r3, r2
 80006f2:	2b01      	cmp	r3, #1
 80006f4:	d002      	beq.n	80006fc <HAL_CAN_RxFifo0MsgPendingCallback+0x120>
	    printf("lost packet?\n");
 80006f6:	4838      	ldr	r0, [pc, #224]	; (80007d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 80006f8:	f003 f9ca 	bl	8003a90 <puts>
	}
	indexCheck = index;
 80006fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006fe:	4a2f      	ldr	r2, [pc, #188]	; (80007bc <HAL_CAN_RxFifo0MsgPendingCallback+0x1e0>)
 8000700:	6013      	str	r3, [r2, #0]


	uint8_t bytesToWrite = fileLength < CAN_DATA_BYTES ? fileLength : CAN_DATA_BYTES;
 8000702:	4b2f      	ldr	r3, [pc, #188]	; (80007c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 8000704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000708:	2a07      	cmp	r2, #7
 800070a:	f173 0100 	sbcs.w	r1, r3, #0
 800070e:	d303      	bcc.n	8000718 <HAL_CAN_RxFifo0MsgPendingCallback+0x13c>
 8000710:	f04f 0206 	mov.w	r2, #6
 8000714:	f04f 0300 	mov.w	r3, #0
 8000718:	4613      	mov	r3, r2
 800071a:	77fb      	strb	r3, [r7, #31]
//	uint8_t bytesToWrite = 6;

	uint32_t writeIdx = CAN_DATA_BYTES * (index % FLASH_BUF_MULT);
 800071c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800071e:	b2da      	uxtb	r2, r3
 8000720:	4613      	mov	r3, r2
 8000722:	005b      	lsls	r3, r3, #1
 8000724:	4413      	add	r3, r2
 8000726:	005b      	lsls	r3, r3, #1
 8000728:	61bb      	str	r3, [r7, #24]

	// add data to flash buffer
	memcpy(&flashBuf[writeIdx], data, bytesToWrite);
 800072a:	69bb      	ldr	r3, [r7, #24]
 800072c:	4a2b      	ldr	r2, [pc, #172]	; (80007dc <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 800072e:	4413      	add	r3, r2
 8000730:	7ffa      	ldrb	r2, [r7, #31]
 8000732:	6a39      	ldr	r1, [r7, #32]
 8000734:	4618      	mov	r0, r3
 8000736:	f003 f90f 	bl	8003958 <memcpy>

	// if next index
	if (index > 0 && (index % FLASH_BUF_MULT == FLASH_BUF_MULT - 1 ||
 800073a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800073c:	2b00      	cmp	r3, #0
 800073e:	d017      	beq.n	8000770 <HAL_CAN_RxFifo0MsgPendingCallback+0x194>
 8000740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000742:	b2db      	uxtb	r3, r3
 8000744:	2bff      	cmp	r3, #255	; 0xff
 8000746:	d002      	beq.n	800074e <HAL_CAN_RxFifo0MsgPendingCallback+0x172>
 8000748:	7ffb      	ldrb	r3, [r7, #31]
 800074a:	2b05      	cmp	r3, #5
 800074c:	d810      	bhi.n	8000770 <HAL_CAN_RxFifo0MsgPendingCallback+0x194>
	    bytesToWrite < CAN_DATA_BYTES)) {
	    printf("writing to flash at index %lu\n", index);
 800074e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000750:	4823      	ldr	r0, [pc, #140]	; (80007e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x204>)
 8000752:	f003 f917 	bl	8003984 <iprintf>
	    // we need to write flash buffer to flash memory
	    uint32_t numWords = (FLASH_BUF_SIZE / 4) + ((FLASH_BUF_SIZE % 4) != 0);
 8000756:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800075a:	617b      	str	r3, [r7, #20]
	    uint32_t offset = index - (FLASH_BUF_MULT - 1);
 800075c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800075e:	3bff      	subs	r3, #255	; 0xff
 8000760:	613b      	str	r3, [r7, #16]
	    flashWriteApp(offset, (uint32_t*)flashBuf, numWords);
 8000762:	697b      	ldr	r3, [r7, #20]
 8000764:	b29b      	uxth	r3, r3
 8000766:	461a      	mov	r2, r3
 8000768:	491c      	ldr	r1, [pc, #112]	; (80007dc <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 800076a:	6938      	ldr	r0, [r7, #16]
 800076c:	f000 fa8e 	bl	8000c8c <flashWriteApp>
	}


	fileLength -= bytesToWrite;
 8000770:	4b13      	ldr	r3, [pc, #76]	; (80007c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 8000772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000776:	7ff9      	ldrb	r1, [r7, #31]
 8000778:	2000      	movs	r0, #0
 800077a:	460c      	mov	r4, r1
 800077c:	4605      	mov	r5, r0
 800077e:	ebb2 0a04 	subs.w	sl, r2, r4
 8000782:	eb63 0b05 	sbc.w	fp, r3, r5
 8000786:	4b0e      	ldr	r3, [pc, #56]	; (80007c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 8000788:	e9c3 ab00 	strd	sl, fp, [r3]

	if (fileLength <= 0) {
 800078c:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 800078e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000792:	4313      	orrs	r3, r2
 8000794:	d105      	bne.n	80007a2 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c6>
	    printf("Flashing Finished.\n");
 8000796:	4813      	ldr	r0, [pc, #76]	; (80007e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>)
 8000798:	f003 f97a 	bl	8003a90 <puts>
	    status = FINISHED;
 800079c:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>)
 800079e:	2202      	movs	r2, #2
 80007a0:	701a      	strb	r2, [r3, #0]
	}
    }
  }
}
 80007a2:	3730      	adds	r7, #48	; 0x30
 80007a4:	46bd      	mov	sp, r7
 80007a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80007aa:	bf00      	nop
 80007ac:	2000008c 	.word	0x2000008c
 80007b0:	20000138 	.word	0x20000138
 80007b4:	2000011c 	.word	0x2000011c
 80007b8:	20000140 	.word	0x20000140
 80007bc:	20000750 	.word	0x20000750
 80007c0:	20000748 	.word	0x20000748
 80007c4:	080049a4 	.word	0x080049a4
 80007c8:	200000f8 	.word	0x200000f8
 80007cc:	20000110 	.word	0x20000110
 80007d0:	20000118 	.word	0x20000118
 80007d4:	2000013a 	.word	0x2000013a
 80007d8:	080049c4 	.word	0x080049c4
 80007dc:	20000144 	.word	0x20000144
 80007e0:	080049d4 	.word	0x080049d4
 80007e4:	080049f4 	.word	0x080049f4

080007e8 <goToApp>:

void goToApp(void) {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0
  uint32_t JumpAddress;
  pFunction Jump_to_Application;
  printf("Jumping to Application \n");
 80007ee:	4813      	ldr	r0, [pc, #76]	; (800083c <goToApp+0x54>)
 80007f0:	f003 f94e 	bl	8003a90 <puts>

  if (((*(uint32_t *) FLASH_APP_ADDR) & 0x2FFC0000) == 0x20000000)
 80007f4:	4b12      	ldr	r3, [pc, #72]	; (8000840 <goToApp+0x58>)
 80007f6:	681a      	ldr	r2, [r3, #0]
 80007f8:	4b12      	ldr	r3, [pc, #72]	; (8000844 <goToApp+0x5c>)
 80007fa:	4013      	ands	r3, r2
 80007fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000800:	d114      	bne.n	800082c <goToApp+0x44>
  {
    HAL_Delay(100);
 8000802:	2064      	movs	r0, #100	; 0x64
 8000804:	f000 fd18 	bl	8001238 <HAL_Delay>
    printf("Valid Stack Pointer...\n");
 8000808:	480f      	ldr	r0, [pc, #60]	; (8000848 <goToApp+0x60>)
 800080a:	f003 f941 	bl	8003a90 <puts>

    JumpAddress = *(uint32_t *) (FLASH_APP_ADDR + 4);
 800080e:	4b0f      	ldr	r3, [pc, #60]	; (800084c <goToApp+0x64>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	60fb      	str	r3, [r7, #12]
    Jump_to_Application = (pFunction) JumpAddress;
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	60bb      	str	r3, [r7, #8]

    __set_MSP(*(uint32_t *) FLASH_APP_ADDR);
 8000818:	4b09      	ldr	r3, [pc, #36]	; (8000840 <goToApp+0x58>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	f383 8808 	msr	MSP, r3
}
 8000824:	bf00      	nop
    Jump_to_Application();
 8000826:	68bb      	ldr	r3, [r7, #8]
 8000828:	4798      	blx	r3
  } else {
    printf("Failed to Start Application\n");
  }
}
 800082a:	e002      	b.n	8000832 <goToApp+0x4a>
    printf("Failed to Start Application\n");
 800082c:	4808      	ldr	r0, [pc, #32]	; (8000850 <goToApp+0x68>)
 800082e:	f003 f92f 	bl	8003a90 <puts>
}
 8000832:	bf00      	nop
 8000834:	3710      	adds	r7, #16
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	08004a08 	.word	0x08004a08
 8000840:	08008000 	.word	0x08008000
 8000844:	2ffc0000 	.word	0x2ffc0000
 8000848:	08004a20 	.word	0x08004a20
 800084c:	08008004 	.word	0x08008004
 8000850:	08004a38 	.word	0x08004a38

08000854 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b08a      	sub	sp, #40	; 0x28
 8000858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  TxHeader.IDE = CAN_ID_STD;
 800085a:	4b25      	ldr	r3, [pc, #148]	; (80008f0 <main+0x9c>)
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
  TxHeader.StdId = 0x111;
 8000860:	4b23      	ldr	r3, [pc, #140]	; (80008f0 <main+0x9c>)
 8000862:	f240 1211 	movw	r2, #273	; 0x111
 8000866:	601a      	str	r2, [r3, #0]
  TxHeader.RTR = CAN_RTR_DATA;
 8000868:	4b21      	ldr	r3, [pc, #132]	; (80008f0 <main+0x9c>)
 800086a:	2200      	movs	r2, #0
 800086c:	60da      	str	r2, [r3, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800086e:	f000 fc71 	bl	8001154 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000872:	f000 f843 	bl	80008fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000876:	f000 f909 	bl	8000a8c <MX_GPIO_Init>
  MX_CAN1_Init();
 800087a:	f000 f8a7 	bl	80009cc <MX_CAN1_Init>
  MX_USART1_UART_Init();
 800087e:	f000 f8db 	bl	8000a38 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  CAN_FilterTypeDef sFilterConfig;

  sFilterConfig.FilterFIFOAssignment=CAN_RX_FIFO0; //set fifo assignment
 8000882:	2300      	movs	r3, #0
 8000884:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterIdHigh = 0;
 8000886:	2300      	movs	r3, #0
 8000888:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0;
 800088a:	2300      	movs	r3, #0
 800088c:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0;
 800088e:	2300      	movs	r3, #0
 8000890:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0;
 8000892:	2300      	movs	r3, #0
 8000894:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterScale=CAN_FILTERSCALE_32BIT; //set filter scale
 8000896:	2301      	movs	r3, #1
 8000898:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterActivation=ENABLE;
 800089a:	2301      	movs	r3, #1
 800089c:	623b      	str	r3, [r7, #32]
  sFilterConfig.FilterBank = 5;
 800089e:	2305      	movs	r3, #5
 80008a0:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80008a2:	2300      	movs	r3, #0
 80008a4:	61bb      	str	r3, [r7, #24]
  sFilterConfig.SlaveStartFilterBank = 7;
 80008a6:	2307      	movs	r3, #7
 80008a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 80008aa:	463b      	mov	r3, r7
 80008ac:	4619      	mov	r1, r3
 80008ae:	4811      	ldr	r0, [pc, #68]	; (80008f4 <main+0xa0>)
 80008b0:	f000 fde2 	bl	8001478 <HAL_CAN_ConfigFilter>

  if (HAL_CAN_Start(&hcan1) != HAL_OK)
 80008b4:	480f      	ldr	r0, [pc, #60]	; (80008f4 <main+0xa0>)
 80008b6:	f000 febf 	bl	8001638 <HAL_CAN_Start>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <main+0x70>
  {
     Error_Handler ();
 80008c0:	f000 f926 	bl	8000b10 <Error_Handler>
  }

  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80008c4:	2102      	movs	r1, #2
 80008c6:	480b      	ldr	r0, [pc, #44]	; (80008f4 <main+0xa0>)
 80008c8:	f001 f8e7 	bl	8001a9a <HAL_CAN_ActivateNotification>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <main+0x82>
  {
      Error_Handler();
 80008d2:	f000 f91d 	bl	8000b10 <Error_Handler>
//
//  flashReadData(FLASH_APP_ADDR, rxData, numofwords);
//  Convert_To_Str(rxData, string);
//
//  printf("Flash string: %s\n", string);
  flashEraseAppSectors();
 80008d6:	f000 fa21 	bl	8000d1c <flashEraseAppSectors>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    if (status == FINISHED) {
 80008da:	4b07      	ldr	r3, [pc, #28]	; (80008f8 <main+0xa4>)
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	2b02      	cmp	r3, #2
 80008e0:	d1fb      	bne.n	80008da <main+0x86>
	status = NOT_STARTED;
 80008e2:	4b05      	ldr	r3, [pc, #20]	; (80008f8 <main+0xa4>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	701a      	strb	r2, [r3, #0]
	goToApp();
 80008e8:	f7ff ff7e 	bl	80007e8 <goToApp>
    if (status == FINISHED) {
 80008ec:	e7f5      	b.n	80008da <main+0x86>
 80008ee:	bf00      	nop
 80008f0:	200000f8 	.word	0x200000f8
 80008f4:	2000008c 	.word	0x2000008c
 80008f8:	20000140 	.word	0x20000140

080008fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b094      	sub	sp, #80	; 0x50
 8000900:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000902:	f107 0320 	add.w	r3, r7, #32
 8000906:	2230      	movs	r2, #48	; 0x30
 8000908:	2100      	movs	r1, #0
 800090a:	4618      	mov	r0, r3
 800090c:	f003 f832 	bl	8003974 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000910:	f107 030c 	add.w	r3, r7, #12
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	605a      	str	r2, [r3, #4]
 800091a:	609a      	str	r2, [r3, #8]
 800091c:	60da      	str	r2, [r3, #12]
 800091e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000920:	2300      	movs	r3, #0
 8000922:	60bb      	str	r3, [r7, #8]
 8000924:	4b27      	ldr	r3, [pc, #156]	; (80009c4 <SystemClock_Config+0xc8>)
 8000926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000928:	4a26      	ldr	r2, [pc, #152]	; (80009c4 <SystemClock_Config+0xc8>)
 800092a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800092e:	6413      	str	r3, [r2, #64]	; 0x40
 8000930:	4b24      	ldr	r3, [pc, #144]	; (80009c4 <SystemClock_Config+0xc8>)
 8000932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000934:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000938:	60bb      	str	r3, [r7, #8]
 800093a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800093c:	2300      	movs	r3, #0
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	4b21      	ldr	r3, [pc, #132]	; (80009c8 <SystemClock_Config+0xcc>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a20      	ldr	r2, [pc, #128]	; (80009c8 <SystemClock_Config+0xcc>)
 8000946:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800094a:	6013      	str	r3, [r2, #0]
 800094c:	4b1e      	ldr	r3, [pc, #120]	; (80009c8 <SystemClock_Config+0xcc>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000954:	607b      	str	r3, [r7, #4]
 8000956:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000958:	2302      	movs	r3, #2
 800095a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800095c:	2301      	movs	r3, #1
 800095e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000960:	2310      	movs	r3, #16
 8000962:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000964:	2302      	movs	r3, #2
 8000966:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000968:	2300      	movs	r3, #0
 800096a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800096c:	2308      	movs	r3, #8
 800096e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000970:	2354      	movs	r3, #84	; 0x54
 8000972:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000974:	2302      	movs	r3, #2
 8000976:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000978:	2304      	movs	r3, #4
 800097a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800097c:	f107 0320 	add.w	r3, r7, #32
 8000980:	4618      	mov	r0, r3
 8000982:	f002 f8a5 	bl	8002ad0 <HAL_RCC_OscConfig>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800098c:	f000 f8c0 	bl	8000b10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000990:	230f      	movs	r3, #15
 8000992:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000994:	2302      	movs	r3, #2
 8000996:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000998:	2300      	movs	r3, #0
 800099a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800099c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009a2:	2300      	movs	r3, #0
 80009a4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009a6:	f107 030c 	add.w	r3, r7, #12
 80009aa:	2102      	movs	r1, #2
 80009ac:	4618      	mov	r0, r3
 80009ae:	f002 fb07 	bl	8002fc0 <HAL_RCC_ClockConfig>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80009b8:	f000 f8aa 	bl	8000b10 <Error_Handler>
  }
}
 80009bc:	bf00      	nop
 80009be:	3750      	adds	r7, #80	; 0x50
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	40023800 	.word	0x40023800
 80009c8:	40007000 	.word	0x40007000

080009cc <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80009d0:	4b17      	ldr	r3, [pc, #92]	; (8000a30 <MX_CAN1_Init+0x64>)
 80009d2:	4a18      	ldr	r2, [pc, #96]	; (8000a34 <MX_CAN1_Init+0x68>)
 80009d4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 80009d6:	4b16      	ldr	r3, [pc, #88]	; (8000a30 <MX_CAN1_Init+0x64>)
 80009d8:	2203      	movs	r2, #3
 80009da:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80009dc:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <MX_CAN1_Init+0x64>)
 80009de:	2200      	movs	r2, #0
 80009e0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80009e2:	4b13      	ldr	r3, [pc, #76]	; (8000a30 <MX_CAN1_Init+0x64>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 80009e8:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <MX_CAN1_Init+0x64>)
 80009ea:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 80009ee:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80009f0:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <MX_CAN1_Init+0x64>)
 80009f2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80009f6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80009f8:	4b0d      	ldr	r3, [pc, #52]	; (8000a30 <MX_CAN1_Init+0x64>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80009fe:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <MX_CAN1_Init+0x64>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000a04:	4b0a      	ldr	r3, [pc, #40]	; (8000a30 <MX_CAN1_Init+0x64>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000a0a:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <MX_CAN1_Init+0x64>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000a10:	4b07      	ldr	r3, [pc, #28]	; (8000a30 <MX_CAN1_Init+0x64>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000a16:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <MX_CAN1_Init+0x64>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000a1c:	4804      	ldr	r0, [pc, #16]	; (8000a30 <MX_CAN1_Init+0x64>)
 8000a1e:	f000 fc2f 	bl	8001280 <HAL_CAN_Init>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000a28:	f000 f872 	bl	8000b10 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000a2c:	bf00      	nop
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	2000008c 	.word	0x2000008c
 8000a34:	40006400 	.word	0x40006400

08000a38 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a3c:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <MX_USART1_UART_Init+0x4c>)
 8000a3e:	4a12      	ldr	r2, [pc, #72]	; (8000a88 <MX_USART1_UART_Init+0x50>)
 8000a40:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a42:	4b10      	ldr	r3, [pc, #64]	; (8000a84 <MX_USART1_UART_Init+0x4c>)
 8000a44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a48:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a4a:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <MX_USART1_UART_Init+0x4c>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a50:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <MX_USART1_UART_Init+0x4c>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a56:	4b0b      	ldr	r3, [pc, #44]	; (8000a84 <MX_USART1_UART_Init+0x4c>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a5c:	4b09      	ldr	r3, [pc, #36]	; (8000a84 <MX_USART1_UART_Init+0x4c>)
 8000a5e:	220c      	movs	r2, #12
 8000a60:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a62:	4b08      	ldr	r3, [pc, #32]	; (8000a84 <MX_USART1_UART_Init+0x4c>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a68:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <MX_USART1_UART_Init+0x4c>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a6e:	4805      	ldr	r0, [pc, #20]	; (8000a84 <MX_USART1_UART_Init+0x4c>)
 8000a70:	f002 fc86 	bl	8003380 <HAL_UART_Init>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a7a:	f000 f849 	bl	8000b10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	200000b4 	.word	0x200000b4
 8000a88:	40011000 	.word	0x40011000

08000a8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b088      	sub	sp, #32
 8000a90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a92:	f107 030c 	add.w	r3, r7, #12
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	605a      	str	r2, [r3, #4]
 8000a9c:	609a      	str	r2, [r3, #8]
 8000a9e:	60da      	str	r2, [r3, #12]
 8000aa0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60bb      	str	r3, [r7, #8]
 8000aa6:	4b18      	ldr	r3, [pc, #96]	; (8000b08 <MX_GPIO_Init+0x7c>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	4a17      	ldr	r2, [pc, #92]	; (8000b08 <MX_GPIO_Init+0x7c>)
 8000aac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab2:	4b15      	ldr	r3, [pc, #84]	; (8000b08 <MX_GPIO_Init+0x7c>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aba:	60bb      	str	r3, [r7, #8]
 8000abc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	607b      	str	r3, [r7, #4]
 8000ac2:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <MX_GPIO_Init+0x7c>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	4a10      	ldr	r2, [pc, #64]	; (8000b08 <MX_GPIO_Init+0x7c>)
 8000ac8:	f043 0301 	orr.w	r3, r3, #1
 8000acc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ace:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <MX_GPIO_Init+0x7c>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	f003 0301 	and.w	r3, r3, #1
 8000ad6:	607b      	str	r3, [r7, #4]
 8000ad8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000ada:	2200      	movs	r2, #0
 8000adc:	21c0      	movs	r1, #192	; 0xc0
 8000ade:	480b      	ldr	r0, [pc, #44]	; (8000b0c <MX_GPIO_Init+0x80>)
 8000ae0:	f001 ffc2 	bl	8002a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED_Pin|LED2_Pin;
 8000ae4:	23c0      	movs	r3, #192	; 0xc0
 8000ae6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af0:	2300      	movs	r3, #0
 8000af2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af4:	f107 030c 	add.w	r3, r7, #12
 8000af8:	4619      	mov	r1, r3
 8000afa:	4804      	ldr	r0, [pc, #16]	; (8000b0c <MX_GPIO_Init+0x80>)
 8000afc:	f001 fe18 	bl	8002730 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b00:	bf00      	nop
 8000b02:	3720      	adds	r7, #32
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	40023800 	.word	0x40023800
 8000b0c:	40020000 	.word	0x40020000

08000b10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000b14:	b672      	cpsid	i
}
 8000b16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
      HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000b18:	2180      	movs	r1, #128	; 0x80
 8000b1a:	4803      	ldr	r0, [pc, #12]	; (8000b28 <Error_Handler+0x18>)
 8000b1c:	f001 ffbd 	bl	8002a9a <HAL_GPIO_TogglePin>
      HAL_Delay(100);
 8000b20:	2064      	movs	r0, #100	; 0x64
 8000b22:	f000 fb89 	bl	8001238 <HAL_Delay>
      HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000b26:	e7f7      	b.n	8000b18 <Error_Handler+0x8>
 8000b28:	40020000 	.word	0x40020000

08000b2c <GetSector>:
 *  Sector 4 as 64KB
 *  Sector 5 to Sector 11 each 128KB
 */

static uint32_t GetSector(uint32_t Address)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b085      	sub	sp, #20
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 8000b34:	2300      	movs	r3, #0
 8000b36:	60fb      	str	r3, [r7, #12]

  if((Address < 0x08003FFF) && (Address >= 0x08000000))
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	4a44      	ldr	r2, [pc, #272]	; (8000c4c <GetSector+0x120>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d806      	bhi.n	8000b4e <GetSector+0x22>
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000b46:	d302      	bcc.n	8000b4e <GetSector+0x22>
  {
    sector = FLASH_SECTOR_0;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	e077      	b.n	8000c3e <GetSector+0x112>
  }
  else if((Address < 0x08007FFF) && (Address >= 0x08004000))
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	4a3f      	ldr	r2, [pc, #252]	; (8000c50 <GetSector+0x124>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d806      	bhi.n	8000b64 <GetSector+0x38>
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4a3e      	ldr	r2, [pc, #248]	; (8000c54 <GetSector+0x128>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d302      	bcc.n	8000b64 <GetSector+0x38>
  {
    sector = FLASH_SECTOR_1;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	60fb      	str	r3, [r7, #12]
 8000b62:	e06c      	b.n	8000c3e <GetSector+0x112>
  }
  else if((Address < 0x0800BFFF) && (Address >= 0x08008000))
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	4a3c      	ldr	r2, [pc, #240]	; (8000c58 <GetSector+0x12c>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d806      	bhi.n	8000b7a <GetSector+0x4e>
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	4a3b      	ldr	r2, [pc, #236]	; (8000c5c <GetSector+0x130>)
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d302      	bcc.n	8000b7a <GetSector+0x4e>
  {
    sector = FLASH_SECTOR_2;
 8000b74:	2302      	movs	r3, #2
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	e061      	b.n	8000c3e <GetSector+0x112>
  }
  else if((Address < 0x0800FFFF) && (Address >= 0x0800C000))
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	4a38      	ldr	r2, [pc, #224]	; (8000c60 <GetSector+0x134>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d206      	bcs.n	8000b90 <GetSector+0x64>
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4a37      	ldr	r2, [pc, #220]	; (8000c64 <GetSector+0x138>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d302      	bcc.n	8000b90 <GetSector+0x64>
  {
    sector = FLASH_SECTOR_3;
 8000b8a:	2303      	movs	r3, #3
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	e056      	b.n	8000c3e <GetSector+0x112>
  }
  else if((Address < 0x0801FFFF) && (Address >= 0x08010000))
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	4a35      	ldr	r2, [pc, #212]	; (8000c68 <GetSector+0x13c>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d206      	bcs.n	8000ba6 <GetSector+0x7a>
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	4a31      	ldr	r2, [pc, #196]	; (8000c60 <GetSector+0x134>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d902      	bls.n	8000ba6 <GetSector+0x7a>
  {
    sector = FLASH_SECTOR_4;
 8000ba0:	2304      	movs	r3, #4
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	e04b      	b.n	8000c3e <GetSector+0x112>
  }
  else if((Address < 0x0803FFFF) && (Address >= 0x08020000))
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	4a30      	ldr	r2, [pc, #192]	; (8000c6c <GetSector+0x140>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d206      	bcs.n	8000bbc <GetSector+0x90>
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	4a2d      	ldr	r2, [pc, #180]	; (8000c68 <GetSector+0x13c>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d902      	bls.n	8000bbc <GetSector+0x90>
  {
    sector = FLASH_SECTOR_5;
 8000bb6:	2305      	movs	r3, #5
 8000bb8:	60fb      	str	r3, [r7, #12]
 8000bba:	e040      	b.n	8000c3e <GetSector+0x112>
  }
  else if((Address < 0x0805FFFF) && (Address >= 0x08040000))
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	4a2c      	ldr	r2, [pc, #176]	; (8000c70 <GetSector+0x144>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d206      	bcs.n	8000bd2 <GetSector+0xa6>
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	4a29      	ldr	r2, [pc, #164]	; (8000c6c <GetSector+0x140>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d902      	bls.n	8000bd2 <GetSector+0xa6>
  {
    sector = FLASH_SECTOR_6;
 8000bcc:	2306      	movs	r3, #6
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	e035      	b.n	8000c3e <GetSector+0x112>
  }
  else if((Address < 0x0807FFFF) && (Address >= 0x08060000))
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4a27      	ldr	r2, [pc, #156]	; (8000c74 <GetSector+0x148>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d206      	bcs.n	8000be8 <GetSector+0xbc>
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4a24      	ldr	r2, [pc, #144]	; (8000c70 <GetSector+0x144>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d902      	bls.n	8000be8 <GetSector+0xbc>
  {
    sector = FLASH_SECTOR_7;
 8000be2:	2307      	movs	r3, #7
 8000be4:	60fb      	str	r3, [r7, #12]
 8000be6:	e02a      	b.n	8000c3e <GetSector+0x112>
  }
  else if((Address < 0x0809FFFF) && (Address >= 0x08080000))
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	4a23      	ldr	r2, [pc, #140]	; (8000c78 <GetSector+0x14c>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d206      	bcs.n	8000bfe <GetSector+0xd2>
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	4a20      	ldr	r2, [pc, #128]	; (8000c74 <GetSector+0x148>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d902      	bls.n	8000bfe <GetSector+0xd2>
  {
    sector = FLASH_SECTOR_8;
 8000bf8:	2308      	movs	r3, #8
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	e01f      	b.n	8000c3e <GetSector+0x112>
  }
  else if((Address < 0x080BFFFF) && (Address >= 0x080A0000))
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	4a1e      	ldr	r2, [pc, #120]	; (8000c7c <GetSector+0x150>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d206      	bcs.n	8000c14 <GetSector+0xe8>
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4a1b      	ldr	r2, [pc, #108]	; (8000c78 <GetSector+0x14c>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d902      	bls.n	8000c14 <GetSector+0xe8>
  {
    sector = FLASH_SECTOR_9;
 8000c0e:	2309      	movs	r3, #9
 8000c10:	60fb      	str	r3, [r7, #12]
 8000c12:	e014      	b.n	8000c3e <GetSector+0x112>
  }
  else if((Address < 0x080DFFFF) && (Address >= 0x080C0000))
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	4a1a      	ldr	r2, [pc, #104]	; (8000c80 <GetSector+0x154>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d806      	bhi.n	8000c2a <GetSector+0xfe>
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	4a17      	ldr	r2, [pc, #92]	; (8000c7c <GetSector+0x150>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d902      	bls.n	8000c2a <GetSector+0xfe>
  {
    sector = FLASH_SECTOR_10;
 8000c24:	230a      	movs	r3, #10
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	e009      	b.n	8000c3e <GetSector+0x112>
  }
  else if((Address < 0x080FFFFF) && (Address >= 0x080E0000))
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	4a15      	ldr	r2, [pc, #84]	; (8000c84 <GetSector+0x158>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d805      	bhi.n	8000c3e <GetSector+0x112>
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4a14      	ldr	r2, [pc, #80]	; (8000c88 <GetSector+0x15c>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d901      	bls.n	8000c3e <GetSector+0x112>
  {
    sector = FLASH_SECTOR_11;
 8000c3a:	230b      	movs	r3, #11
 8000c3c:	60fb      	str	r3, [r7, #12]
  }
  return sector;
 8000c3e:	68fb      	ldr	r3, [r7, #12]
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3714      	adds	r7, #20
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	08003ffe 	.word	0x08003ffe
 8000c50:	08007ffe 	.word	0x08007ffe
 8000c54:	08004000 	.word	0x08004000
 8000c58:	0800bffe 	.word	0x0800bffe
 8000c5c:	08008000 	.word	0x08008000
 8000c60:	0800ffff 	.word	0x0800ffff
 8000c64:	0800c000 	.word	0x0800c000
 8000c68:	0801ffff 	.word	0x0801ffff
 8000c6c:	0803ffff 	.word	0x0803ffff
 8000c70:	0805ffff 	.word	0x0805ffff
 8000c74:	0807ffff 	.word	0x0807ffff
 8000c78:	0809ffff 	.word	0x0809ffff
 8000c7c:	080bffff 	.word	0x080bffff
 8000c80:	080dfffe 	.word	0x080dfffe
 8000c84:	080ffffe 	.word	0x080ffffe
 8000c88:	080dffff 	.word	0x080dffff

08000c8c <flashWriteApp>:
 * @param offset   - index offset based on CAN bus data
 * @param data	   - data array
 * @param numWords - amount of words in the array
 * @ret	  0 on success, otherwise failure.
 */
uint32_t flashWriteApp (uint32_t offset, uint32_t *data, uint16_t numWords) {
 8000c8c:	b5b0      	push	{r4, r5, r7, lr}
 8000c8e:	b086      	sub	sp, #24
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	60f8      	str	r0, [r7, #12]
 8000c94:	60b9      	str	r1, [r7, #8]
 8000c96:	4613      	mov	r3, r2
 8000c98:	80fb      	strh	r3, [r7, #6]
  /* Convert offset -> address */
  uint32_t startAddr = FLASH_APP_ADDR + offset * CAN_DATA_BYTES;
 8000c9a:	68fa      	ldr	r2, [r7, #12]
 8000c9c:	4613      	mov	r3, r2
 8000c9e:	005b      	lsls	r3, r3, #1
 8000ca0:	4413      	add	r3, r2
 8000ca2:	005b      	lsls	r3, r3, #1
 8000ca4:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8000ca8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8000cac:	617b      	str	r3, [r7, #20]
  int soFar = 0;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	613b      	str	r3, [r7, #16]

  HAL_FLASH_Unlock();
 8000cb2:	f001 faad 	bl	8002210 <HAL_FLASH_Unlock>

  while (soFar < numWords) {
 8000cb6:	e01e      	b.n	8000cf6 <flashWriteApp+0x6a>
      if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, startAddr, data[soFar]) == HAL_OK) {
 8000cb8:	693b      	ldr	r3, [r7, #16]
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	68ba      	ldr	r2, [r7, #8]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	461c      	mov	r4, r3
 8000cc6:	4615      	mov	r5, r2
 8000cc8:	4622      	mov	r2, r4
 8000cca:	462b      	mov	r3, r5
 8000ccc:	6979      	ldr	r1, [r7, #20]
 8000cce:	2002      	movs	r0, #2
 8000cd0:	f001 fa4a 	bl	8002168 <HAL_FLASH_Program>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d106      	bne.n	8000ce8 <flashWriteApp+0x5c>
	  startAddr += 4;
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	3304      	adds	r3, #4
 8000cde:	617b      	str	r3, [r7, #20]
	  soFar++;
 8000ce0:	693b      	ldr	r3, [r7, #16]
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	613b      	str	r3, [r7, #16]
 8000ce6:	e006      	b.n	8000cf6 <flashWriteApp+0x6a>
      } else {
	  printf("Error while writing flash memory...\n");
 8000ce8:	480a      	ldr	r0, [pc, #40]	; (8000d14 <flashWriteApp+0x88>)
 8000cea:	f002 fed1 	bl	8003a90 <puts>
	  return HAL_FLASH_GetError();
 8000cee:	f001 fac1 	bl	8002274 <HAL_FLASH_GetError>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	e00a      	b.n	8000d0c <flashWriteApp+0x80>
  while (soFar < numWords) {
 8000cf6:	88fb      	ldrh	r3, [r7, #6]
 8000cf8:	693a      	ldr	r2, [r7, #16]
 8000cfa:	429a      	cmp	r2, r3
 8000cfc:	dbdc      	blt.n	8000cb8 <flashWriteApp+0x2c>
      }
  }

  HAL_FLASH_Lock();
 8000cfe:	f001 faa9 	bl	8002254 <HAL_FLASH_Lock>

  printf("Wrote %d words successfully!\n", soFar);
 8000d02:	6939      	ldr	r1, [r7, #16]
 8000d04:	4804      	ldr	r0, [pc, #16]	; (8000d18 <flashWriteApp+0x8c>)
 8000d06:	f002 fe3d 	bl	8003984 <iprintf>

  return 0;
 8000d0a:	2300      	movs	r3, #0
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3718      	adds	r7, #24
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bdb0      	pop	{r4, r5, r7, pc}
 8000d14:	08004a54 	.word	0x08004a54
 8000d18:	08004a78 	.word	0x08004a78

08000d1c <flashEraseAppSectors>:
}

/*
 * Erases all application sectors from FLASH_APP_ADDR to end of flash.
 */
uint32_t flashEraseAppSectors() {
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
  static FLASH_EraseInitTypeDef EraseInitStruct;
  uint32_t sectorErr;

  HAL_FLASH_Unlock();
 8000d22:	f001 fa75 	bl	8002210 <HAL_FLASH_Unlock>

  uint32_t sectorNum = GetSector(FLASH_APP_ADDR);
 8000d26:	4814      	ldr	r0, [pc, #80]	; (8000d78 <flashEraseAppSectors+0x5c>)
 8000d28:	f7ff ff00 	bl	8000b2c <GetSector>
 8000d2c:	6078      	str	r0, [r7, #4]

  /* Fill EraseInit structure*/
  EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8000d2e:	4b13      	ldr	r3, [pc, #76]	; (8000d7c <flashEraseAppSectors+0x60>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
  EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8000d34:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <flashEraseAppSectors+0x60>)
 8000d36:	2202      	movs	r2, #2
 8000d38:	611a      	str	r2, [r3, #16]
  EraseInitStruct.Sector        = sectorNum;
 8000d3a:	4a10      	ldr	r2, [pc, #64]	; (8000d7c <flashEraseAppSectors+0x60>)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	6093      	str	r3, [r2, #8]
  EraseInitStruct.NbSectors 	= FLASH_SECTOR_11 - FLASH_SECTOR_2;
 8000d40:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <flashEraseAppSectors+0x60>)
 8000d42:	2209      	movs	r2, #9
 8000d44:	60da      	str	r2, [r3, #12]

  /* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
     you have to make sure that these data are rewritten before they are accessed during code
     execution. If this cannot be done safely, it is recommended to flush the caches by setting the
     DCRST and ICRST bits in the FLASH_CR register. */
  if (HAL_FLASHEx_Erase(&EraseInitStruct, &sectorErr) != HAL_OK)
 8000d46:	463b      	mov	r3, r7
 8000d48:	4619      	mov	r1, r3
 8000d4a:	480c      	ldr	r0, [pc, #48]	; (8000d7c <flashEraseAppSectors+0x60>)
 8000d4c:	f001 fbce 	bl	80024ec <HAL_FLASHEx_Erase>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d006      	beq.n	8000d64 <flashEraseAppSectors+0x48>
  {
    printf("Failed Erasing App Sectors...\n");
 8000d56:	480a      	ldr	r0, [pc, #40]	; (8000d80 <flashEraseAppSectors+0x64>)
 8000d58:	f002 fe9a 	bl	8003a90 <puts>
    return HAL_FLASH_GetError ();
 8000d5c:	f001 fa8a 	bl	8002274 <HAL_FLASH_GetError>
 8000d60:	4603      	mov	r3, r0
 8000d62:	e005      	b.n	8000d70 <flashEraseAppSectors+0x54>
  }

  HAL_FLASH_Lock();
 8000d64:	f001 fa76 	bl	8002254 <HAL_FLASH_Lock>

  printf("Erased App Sectors Successfully.\n");
 8000d68:	4806      	ldr	r0, [pc, #24]	; (8000d84 <flashEraseAppSectors+0x68>)
 8000d6a:	f002 fe91 	bl	8003a90 <puts>

  return 0;
 8000d6e:	2300      	movs	r3, #0
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3708      	adds	r7, #8
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	08008000 	.word	0x08008000
 8000d7c:	20000754 	.word	0x20000754
 8000d80:	08004a98 	.word	0x08004a98
 8000d84:	08004ab8 	.word	0x08004ab8

08000d88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	607b      	str	r3, [r7, #4]
 8000d92:	4b10      	ldr	r3, [pc, #64]	; (8000dd4 <HAL_MspInit+0x4c>)
 8000d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d96:	4a0f      	ldr	r2, [pc, #60]	; (8000dd4 <HAL_MspInit+0x4c>)
 8000d98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d9e:	4b0d      	ldr	r3, [pc, #52]	; (8000dd4 <HAL_MspInit+0x4c>)
 8000da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000da6:	607b      	str	r3, [r7, #4]
 8000da8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	603b      	str	r3, [r7, #0]
 8000dae:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <HAL_MspInit+0x4c>)
 8000db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db2:	4a08      	ldr	r2, [pc, #32]	; (8000dd4 <HAL_MspInit+0x4c>)
 8000db4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000db8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dba:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <HAL_MspInit+0x4c>)
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dc2:	603b      	str	r3, [r7, #0]
 8000dc4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	40023800 	.word	0x40023800

08000dd8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b08a      	sub	sp, #40	; 0x28
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de0:	f107 0314 	add.w	r3, r7, #20
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	60da      	str	r2, [r3, #12]
 8000dee:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a21      	ldr	r2, [pc, #132]	; (8000e7c <HAL_CAN_MspInit+0xa4>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d13c      	bne.n	8000e74 <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	613b      	str	r3, [r7, #16]
 8000dfe:	4b20      	ldr	r3, [pc, #128]	; (8000e80 <HAL_CAN_MspInit+0xa8>)
 8000e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e02:	4a1f      	ldr	r2, [pc, #124]	; (8000e80 <HAL_CAN_MspInit+0xa8>)
 8000e04:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e08:	6413      	str	r3, [r2, #64]	; 0x40
 8000e0a:	4b1d      	ldr	r3, [pc, #116]	; (8000e80 <HAL_CAN_MspInit+0xa8>)
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e12:	613b      	str	r3, [r7, #16]
 8000e14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	60fb      	str	r3, [r7, #12]
 8000e1a:	4b19      	ldr	r3, [pc, #100]	; (8000e80 <HAL_CAN_MspInit+0xa8>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	4a18      	ldr	r2, [pc, #96]	; (8000e80 <HAL_CAN_MspInit+0xa8>)
 8000e20:	f043 0301 	orr.w	r3, r3, #1
 8000e24:	6313      	str	r3, [r2, #48]	; 0x30
 8000e26:	4b16      	ldr	r3, [pc, #88]	; (8000e80 <HAL_CAN_MspInit+0xa8>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e32:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e40:	2303      	movs	r3, #3
 8000e42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000e44:	2309      	movs	r3, #9
 8000e46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e48:	f107 0314 	add.w	r3, r7, #20
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	480d      	ldr	r0, [pc, #52]	; (8000e84 <HAL_CAN_MspInit+0xac>)
 8000e50:	f001 fc6e 	bl	8002730 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000e54:	2200      	movs	r2, #0
 8000e56:	2100      	movs	r1, #0
 8000e58:	2014      	movs	r0, #20
 8000e5a:	f001 f94e 	bl	80020fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000e5e:	2014      	movs	r0, #20
 8000e60:	f001 f967 	bl	8002132 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000e64:	2200      	movs	r2, #0
 8000e66:	2100      	movs	r1, #0
 8000e68:	2015      	movs	r0, #21
 8000e6a:	f001 f946 	bl	80020fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000e6e:	2015      	movs	r0, #21
 8000e70:	f001 f95f 	bl	8002132 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000e74:	bf00      	nop
 8000e76:	3728      	adds	r7, #40	; 0x28
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	40006400 	.word	0x40006400
 8000e80:	40023800 	.word	0x40023800
 8000e84:	40020000 	.word	0x40020000

08000e88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08a      	sub	sp, #40	; 0x28
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e90:	f107 0314 	add.w	r3, r7, #20
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
 8000e9e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a19      	ldr	r2, [pc, #100]	; (8000f0c <HAL_UART_MspInit+0x84>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d12c      	bne.n	8000f04 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	613b      	str	r3, [r7, #16]
 8000eae:	4b18      	ldr	r3, [pc, #96]	; (8000f10 <HAL_UART_MspInit+0x88>)
 8000eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb2:	4a17      	ldr	r2, [pc, #92]	; (8000f10 <HAL_UART_MspInit+0x88>)
 8000eb4:	f043 0310 	orr.w	r3, r3, #16
 8000eb8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eba:	4b15      	ldr	r3, [pc, #84]	; (8000f10 <HAL_UART_MspInit+0x88>)
 8000ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ebe:	f003 0310 	and.w	r3, r3, #16
 8000ec2:	613b      	str	r3, [r7, #16]
 8000ec4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	60fb      	str	r3, [r7, #12]
 8000eca:	4b11      	ldr	r3, [pc, #68]	; (8000f10 <HAL_UART_MspInit+0x88>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	4a10      	ldr	r2, [pc, #64]	; (8000f10 <HAL_UART_MspInit+0x88>)
 8000ed0:	f043 0301 	orr.w	r3, r3, #1
 8000ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed6:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <HAL_UART_MspInit+0x88>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ee2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000ee6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef0:	2303      	movs	r3, #3
 8000ef2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ef4:	2307      	movs	r3, #7
 8000ef6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef8:	f107 0314 	add.w	r3, r7, #20
 8000efc:	4619      	mov	r1, r3
 8000efe:	4805      	ldr	r0, [pc, #20]	; (8000f14 <HAL_UART_MspInit+0x8c>)
 8000f00:	f001 fc16 	bl	8002730 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000f04:	bf00      	nop
 8000f06:	3728      	adds	r7, #40	; 0x28
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	40011000 	.word	0x40011000
 8000f10:	40023800 	.word	0x40023800
 8000f14:	40020000 	.word	0x40020000

08000f18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f1c:	e7fe      	b.n	8000f1c <NMI_Handler+0x4>

08000f1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f22:	e7fe      	b.n	8000f22 <HardFault_Handler+0x4>

08000f24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f28:	e7fe      	b.n	8000f28 <MemManage_Handler+0x4>

08000f2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f2e:	e7fe      	b.n	8000f2e <BusFault_Handler+0x4>

08000f30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f34:	e7fe      	b.n	8000f34 <UsageFault_Handler+0x4>

08000f36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f36:	b480      	push	{r7}
 8000f38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f48:	bf00      	nop
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr

08000f52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f52:	b480      	push	{r7}
 8000f54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f56:	bf00      	nop
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f64:	f000 f948 	bl	80011f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f68:	bf00      	nop
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */
  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000f70:	4802      	ldr	r0, [pc, #8]	; (8000f7c <CAN1_RX0_IRQHandler+0x10>)
 8000f72:	f000 fdb8 	bl	8001ae6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	2000008c 	.word	0x2000008c

08000f80 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000f84:	4802      	ldr	r0, [pc, #8]	; (8000f90 <CAN1_RX1_IRQHandler+0x10>)
 8000f86:	f000 fdae 	bl	8001ae6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	2000008c 	.word	0x2000008c

08000f94 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	60b9      	str	r1, [r7, #8]
 8000f9e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	617b      	str	r3, [r7, #20]
 8000fa4:	e00a      	b.n	8000fbc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000fa6:	f3af 8000 	nop.w
 8000faa:	4601      	mov	r1, r0
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	1c5a      	adds	r2, r3, #1
 8000fb0:	60ba      	str	r2, [r7, #8]
 8000fb2:	b2ca      	uxtb	r2, r1
 8000fb4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	3301      	adds	r3, #1
 8000fba:	617b      	str	r3, [r7, #20]
 8000fbc:	697a      	ldr	r2, [r7, #20]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	dbf0      	blt.n	8000fa6 <_read+0x12>
  }

  return len;
 8000fc4:	687b      	ldr	r3, [r7, #4]
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3718      	adds	r7, #24
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b086      	sub	sp, #24
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	60f8      	str	r0, [r7, #12]
 8000fd6:	60b9      	str	r1, [r7, #8]
 8000fd8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fda:	2300      	movs	r3, #0
 8000fdc:	617b      	str	r3, [r7, #20]
 8000fde:	e009      	b.n	8000ff4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	1c5a      	adds	r2, r3, #1
 8000fe4:	60ba      	str	r2, [r7, #8]
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff faea 	bl	80005c2 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	617b      	str	r3, [r7, #20]
 8000ff4:	697a      	ldr	r2, [r7, #20]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	dbf1      	blt.n	8000fe0 <_write+0x12>
  }
  return len;
 8000ffc:	687b      	ldr	r3, [r7, #4]
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3718      	adds	r7, #24
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <_close>:

int _close(int file)
{
 8001006:	b480      	push	{r7}
 8001008:	b083      	sub	sp, #12
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800100e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001012:	4618      	mov	r0, r3
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr

0800101e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800101e:	b480      	push	{r7}
 8001020:	b083      	sub	sp, #12
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
 8001026:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800102e:	605a      	str	r2, [r3, #4]
  return 0;
 8001030:	2300      	movs	r3, #0
}
 8001032:	4618      	mov	r0, r3
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr

0800103e <_isatty>:

int _isatty(int file)
{
 800103e:	b480      	push	{r7}
 8001040:	b083      	sub	sp, #12
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001046:	2301      	movs	r3, #1
}
 8001048:	4618      	mov	r0, r3
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001054:	b480      	push	{r7}
 8001056:	b085      	sub	sp, #20
 8001058:	af00      	add	r7, sp, #0
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001060:	2300      	movs	r3, #0
}
 8001062:	4618      	mov	r0, r3
 8001064:	3714      	adds	r7, #20
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
	...

08001070 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001078:	4a14      	ldr	r2, [pc, #80]	; (80010cc <_sbrk+0x5c>)
 800107a:	4b15      	ldr	r3, [pc, #84]	; (80010d0 <_sbrk+0x60>)
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001084:	4b13      	ldr	r3, [pc, #76]	; (80010d4 <_sbrk+0x64>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d102      	bne.n	8001092 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800108c:	4b11      	ldr	r3, [pc, #68]	; (80010d4 <_sbrk+0x64>)
 800108e:	4a12      	ldr	r2, [pc, #72]	; (80010d8 <_sbrk+0x68>)
 8001090:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001092:	4b10      	ldr	r3, [pc, #64]	; (80010d4 <_sbrk+0x64>)
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4413      	add	r3, r2
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	429a      	cmp	r2, r3
 800109e:	d207      	bcs.n	80010b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010a0:	f002 fc30 	bl	8003904 <__errno>
 80010a4:	4603      	mov	r3, r0
 80010a6:	220c      	movs	r2, #12
 80010a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010ae:	e009      	b.n	80010c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010b0:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <_sbrk+0x64>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010b6:	4b07      	ldr	r3, [pc, #28]	; (80010d4 <_sbrk+0x64>)
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4413      	add	r3, r2
 80010be:	4a05      	ldr	r2, [pc, #20]	; (80010d4 <_sbrk+0x64>)
 80010c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010c2:	68fb      	ldr	r3, [r7, #12]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3718      	adds	r7, #24
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20020000 	.word	0x20020000
 80010d0:	00000400 	.word	0x00000400
 80010d4:	20000768 	.word	0x20000768
 80010d8:	200007a0 	.word	0x200007a0

080010dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010e0:	4b06      	ldr	r3, [pc, #24]	; (80010fc <SystemInit+0x20>)
 80010e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010e6:	4a05      	ldr	r2, [pc, #20]	; (80010fc <SystemInit+0x20>)
 80010e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010f0:	bf00      	nop
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <Reset_Handler>:
 8001100:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001138 <LoopFillZerobss+0x12>
 8001104:	480d      	ldr	r0, [pc, #52]	; (800113c <LoopFillZerobss+0x16>)
 8001106:	490e      	ldr	r1, [pc, #56]	; (8001140 <LoopFillZerobss+0x1a>)
 8001108:	4a0e      	ldr	r2, [pc, #56]	; (8001144 <LoopFillZerobss+0x1e>)
 800110a:	2300      	movs	r3, #0
 800110c:	e002      	b.n	8001114 <LoopCopyDataInit>

0800110e <CopyDataInit>:
 800110e:	58d4      	ldr	r4, [r2, r3]
 8001110:	50c4      	str	r4, [r0, r3]
 8001112:	3304      	adds	r3, #4

08001114 <LoopCopyDataInit>:
 8001114:	18c4      	adds	r4, r0, r3
 8001116:	428c      	cmp	r4, r1
 8001118:	d3f9      	bcc.n	800110e <CopyDataInit>
 800111a:	4a0b      	ldr	r2, [pc, #44]	; (8001148 <LoopFillZerobss+0x22>)
 800111c:	4c0b      	ldr	r4, [pc, #44]	; (800114c <LoopFillZerobss+0x26>)
 800111e:	2300      	movs	r3, #0
 8001120:	e001      	b.n	8001126 <LoopFillZerobss>

08001122 <FillZerobss>:
 8001122:	6013      	str	r3, [r2, #0]
 8001124:	3204      	adds	r2, #4

08001126 <LoopFillZerobss>:
 8001126:	42a2      	cmp	r2, r4
 8001128:	d3fb      	bcc.n	8001122 <FillZerobss>
 800112a:	f7ff ffd7 	bl	80010dc <SystemInit>
 800112e:	f002 fbef 	bl	8003910 <__libc_init_array>
 8001132:	f7ff fb8f 	bl	8000854 <main>
 8001136:	4770      	bx	lr
 8001138:	20020000 	.word	0x20020000
 800113c:	20000000 	.word	0x20000000
 8001140:	20000070 	.word	0x20000070
 8001144:	08004b9c 	.word	0x08004b9c
 8001148:	20000070 	.word	0x20000070
 800114c:	200007a0 	.word	0x200007a0

08001150 <ADC_IRQHandler>:
 8001150:	e7fe      	b.n	8001150 <ADC_IRQHandler>
	...

08001154 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001158:	4b0e      	ldr	r3, [pc, #56]	; (8001194 <HAL_Init+0x40>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a0d      	ldr	r2, [pc, #52]	; (8001194 <HAL_Init+0x40>)
 800115e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001162:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001164:	4b0b      	ldr	r3, [pc, #44]	; (8001194 <HAL_Init+0x40>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a0a      	ldr	r2, [pc, #40]	; (8001194 <HAL_Init+0x40>)
 800116a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800116e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001170:	4b08      	ldr	r3, [pc, #32]	; (8001194 <HAL_Init+0x40>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a07      	ldr	r2, [pc, #28]	; (8001194 <HAL_Init+0x40>)
 8001176:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800117a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800117c:	2003      	movs	r0, #3
 800117e:	f000 ffb1 	bl	80020e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001182:	200f      	movs	r0, #15
 8001184:	f000 f808 	bl	8001198 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001188:	f7ff fdfe 	bl	8000d88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800118c:	2300      	movs	r3, #0
}
 800118e:	4618      	mov	r0, r3
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40023c00 	.word	0x40023c00

08001198 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011a0:	4b12      	ldr	r3, [pc, #72]	; (80011ec <HAL_InitTick+0x54>)
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	4b12      	ldr	r3, [pc, #72]	; (80011f0 <HAL_InitTick+0x58>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	4619      	mov	r1, r3
 80011aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80011b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011b6:	4618      	mov	r0, r3
 80011b8:	f000 ffc9 	bl	800214e <HAL_SYSTICK_Config>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e00e      	b.n	80011e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2b0f      	cmp	r3, #15
 80011ca:	d80a      	bhi.n	80011e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011cc:	2200      	movs	r2, #0
 80011ce:	6879      	ldr	r1, [r7, #4]
 80011d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011d4:	f000 ff91 	bl	80020fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011d8:	4a06      	ldr	r2, [pc, #24]	; (80011f4 <HAL_InitTick+0x5c>)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011de:	2300      	movs	r3, #0
 80011e0:	e000      	b.n	80011e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20000000 	.word	0x20000000
 80011f0:	20000008 	.word	0x20000008
 80011f4:	20000004 	.word	0x20000004

080011f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011fc:	4b06      	ldr	r3, [pc, #24]	; (8001218 <HAL_IncTick+0x20>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	461a      	mov	r2, r3
 8001202:	4b06      	ldr	r3, [pc, #24]	; (800121c <HAL_IncTick+0x24>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4413      	add	r3, r2
 8001208:	4a04      	ldr	r2, [pc, #16]	; (800121c <HAL_IncTick+0x24>)
 800120a:	6013      	str	r3, [r2, #0]
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	20000008 	.word	0x20000008
 800121c:	2000076c 	.word	0x2000076c

08001220 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  return uwTick;
 8001224:	4b03      	ldr	r3, [pc, #12]	; (8001234 <HAL_GetTick+0x14>)
 8001226:	681b      	ldr	r3, [r3, #0]
}
 8001228:	4618      	mov	r0, r3
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	2000076c 	.word	0x2000076c

08001238 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001240:	f7ff ffee 	bl	8001220 <HAL_GetTick>
 8001244:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001250:	d005      	beq.n	800125e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001252:	4b0a      	ldr	r3, [pc, #40]	; (800127c <HAL_Delay+0x44>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	461a      	mov	r2, r3
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	4413      	add	r3, r2
 800125c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800125e:	bf00      	nop
 8001260:	f7ff ffde 	bl	8001220 <HAL_GetTick>
 8001264:	4602      	mov	r2, r0
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	68fa      	ldr	r2, [r7, #12]
 800126c:	429a      	cmp	r2, r3
 800126e:	d8f7      	bhi.n	8001260 <HAL_Delay+0x28>
  {
  }
}
 8001270:	bf00      	nop
 8001272:	bf00      	nop
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000008 	.word	0x20000008

08001280 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d101      	bne.n	8001292 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e0ed      	b.n	800146e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001298:	b2db      	uxtb	r3, r3
 800129a:	2b00      	cmp	r3, #0
 800129c:	d102      	bne.n	80012a4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f7ff fd9a 	bl	8000dd8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f042 0201 	orr.w	r2, r2, #1
 80012b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012b4:	f7ff ffb4 	bl	8001220 <HAL_GetTick>
 80012b8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80012ba:	e012      	b.n	80012e2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80012bc:	f7ff ffb0 	bl	8001220 <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	2b0a      	cmp	r3, #10
 80012c8:	d90b      	bls.n	80012e2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2205      	movs	r2, #5
 80012da:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e0c5      	b.n	800146e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f003 0301 	and.w	r3, r3, #1
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d0e5      	beq.n	80012bc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f022 0202 	bic.w	r2, r2, #2
 80012fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001300:	f7ff ff8e 	bl	8001220 <HAL_GetTick>
 8001304:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001306:	e012      	b.n	800132e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001308:	f7ff ff8a 	bl	8001220 <HAL_GetTick>
 800130c:	4602      	mov	r2, r0
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	2b0a      	cmp	r3, #10
 8001314:	d90b      	bls.n	800132e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800131a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2205      	movs	r2, #5
 8001326:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e09f      	b.n	800146e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f003 0302 	and.w	r3, r3, #2
 8001338:	2b00      	cmp	r3, #0
 800133a:	d1e5      	bne.n	8001308 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	7e1b      	ldrb	r3, [r3, #24]
 8001340:	2b01      	cmp	r3, #1
 8001342:	d108      	bne.n	8001356 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	e007      	b.n	8001366 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001364:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	7e5b      	ldrb	r3, [r3, #25]
 800136a:	2b01      	cmp	r3, #1
 800136c:	d108      	bne.n	8001380 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	e007      	b.n	8001390 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800138e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	7e9b      	ldrb	r3, [r3, #26]
 8001394:	2b01      	cmp	r3, #1
 8001396:	d108      	bne.n	80013aa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f042 0220 	orr.w	r2, r2, #32
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	e007      	b.n	80013ba <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f022 0220 	bic.w	r2, r2, #32
 80013b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	7edb      	ldrb	r3, [r3, #27]
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d108      	bne.n	80013d4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f022 0210 	bic.w	r2, r2, #16
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	e007      	b.n	80013e4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f042 0210 	orr.w	r2, r2, #16
 80013e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	7f1b      	ldrb	r3, [r3, #28]
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d108      	bne.n	80013fe <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f042 0208 	orr.w	r2, r2, #8
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	e007      	b.n	800140e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f022 0208 	bic.w	r2, r2, #8
 800140c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	7f5b      	ldrb	r3, [r3, #29]
 8001412:	2b01      	cmp	r3, #1
 8001414:	d108      	bne.n	8001428 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f042 0204 	orr.w	r2, r2, #4
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	e007      	b.n	8001438 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f022 0204 	bic.w	r2, r2, #4
 8001436:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	689a      	ldr	r2, [r3, #8]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	431a      	orrs	r2, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	691b      	ldr	r3, [r3, #16]
 8001446:	431a      	orrs	r2, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	695b      	ldr	r3, [r3, #20]
 800144c:	ea42 0103 	orr.w	r1, r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	1e5a      	subs	r2, r3, #1
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	430a      	orrs	r2, r1
 800145c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2200      	movs	r2, #0
 8001462:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2201      	movs	r2, #1
 8001468:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800146c:	2300      	movs	r3, #0
}
 800146e:	4618      	mov	r0, r3
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
	...

08001478 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001478:	b480      	push	{r7}
 800147a:	b087      	sub	sp, #28
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800148e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001490:	7cfb      	ldrb	r3, [r7, #19]
 8001492:	2b01      	cmp	r3, #1
 8001494:	d003      	beq.n	800149e <HAL_CAN_ConfigFilter+0x26>
 8001496:	7cfb      	ldrb	r3, [r7, #19]
 8001498:	2b02      	cmp	r3, #2
 800149a:	f040 80be 	bne.w	800161a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800149e:	4b65      	ldr	r3, [pc, #404]	; (8001634 <HAL_CAN_ConfigFilter+0x1bc>)
 80014a0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80014a8:	f043 0201 	orr.w	r2, r3, #1
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80014b8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014cc:	021b      	lsls	r3, r3, #8
 80014ce:	431a      	orrs	r2, r3
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	695b      	ldr	r3, [r3, #20]
 80014da:	f003 031f 	and.w	r3, r3, #31
 80014de:	2201      	movs	r2, #1
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	43db      	mvns	r3, r3
 80014f0:	401a      	ands	r2, r3
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	69db      	ldr	r3, [r3, #28]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d123      	bne.n	8001548 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	43db      	mvns	r3, r3
 800150a:	401a      	ands	r2, r3
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	68db      	ldr	r3, [r3, #12]
 8001516:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800151e:	683a      	ldr	r2, [r7, #0]
 8001520:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001522:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	3248      	adds	r2, #72	; 0x48
 8001528:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800153c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800153e:	6979      	ldr	r1, [r7, #20]
 8001540:	3348      	adds	r3, #72	; 0x48
 8001542:	00db      	lsls	r3, r3, #3
 8001544:	440b      	add	r3, r1
 8001546:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	69db      	ldr	r3, [r3, #28]
 800154c:	2b01      	cmp	r3, #1
 800154e:	d122      	bne.n	8001596 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	431a      	orrs	r2, r3
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800156c:	683a      	ldr	r2, [r7, #0]
 800156e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001570:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	3248      	adds	r2, #72	; 0x48
 8001576:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800158a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800158c:	6979      	ldr	r1, [r7, #20]
 800158e:	3348      	adds	r3, #72	; 0x48
 8001590:	00db      	lsls	r3, r3, #3
 8001592:	440b      	add	r3, r1
 8001594:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	699b      	ldr	r3, [r3, #24]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d109      	bne.n	80015b2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	43db      	mvns	r3, r3
 80015a8:	401a      	ands	r2, r3
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80015b0:	e007      	b.n	80015c2 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	431a      	orrs	r2, r3
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	691b      	ldr	r3, [r3, #16]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d109      	bne.n	80015de <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	43db      	mvns	r3, r3
 80015d4:	401a      	ands	r2, r3
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80015dc:	e007      	b.n	80015ee <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	431a      	orrs	r2, r3
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	6a1b      	ldr	r3, [r3, #32]
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d107      	bne.n	8001606 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	431a      	orrs	r2, r3
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800160c:	f023 0201 	bic.w	r2, r3, #1
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001616:	2300      	movs	r3, #0
 8001618:	e006      	b.n	8001628 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
  }
}
 8001628:	4618      	mov	r0, r3
 800162a:	371c      	adds	r7, #28
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr
 8001634:	40006400 	.word	0x40006400

08001638 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001646:	b2db      	uxtb	r3, r3
 8001648:	2b01      	cmp	r3, #1
 800164a:	d12e      	bne.n	80016aa <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2202      	movs	r2, #2
 8001650:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f022 0201 	bic.w	r2, r2, #1
 8001662:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001664:	f7ff fddc 	bl	8001220 <HAL_GetTick>
 8001668:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800166a:	e012      	b.n	8001692 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800166c:	f7ff fdd8 	bl	8001220 <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	2b0a      	cmp	r3, #10
 8001678:	d90b      	bls.n	8001692 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2205      	movs	r2, #5
 800168a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e012      	b.n	80016b8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f003 0301 	and.w	r3, r3, #1
 800169c:	2b00      	cmp	r3, #0
 800169e:	d1e5      	bne.n	800166c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2200      	movs	r2, #0
 80016a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80016a6:	2300      	movs	r3, #0
 80016a8:	e006      	b.n	80016b8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ae:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
  }
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3710      	adds	r7, #16
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}

080016c0 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b089      	sub	sp, #36	; 0x24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	607a      	str	r2, [r7, #4]
 80016cc:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016d4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80016de:	7ffb      	ldrb	r3, [r7, #31]
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d003      	beq.n	80016ec <HAL_CAN_AddTxMessage+0x2c>
 80016e4:	7ffb      	ldrb	r3, [r7, #31]
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	f040 80b8 	bne.w	800185c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d10a      	bne.n	800170c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d105      	bne.n	800170c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001706:	2b00      	cmp	r3, #0
 8001708:	f000 80a0 	beq.w	800184c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	0e1b      	lsrs	r3, r3, #24
 8001710:	f003 0303 	and.w	r3, r3, #3
 8001714:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	2b02      	cmp	r3, #2
 800171a:	d907      	bls.n	800172c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001720:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e09e      	b.n	800186a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800172c:	2201      	movs	r2, #1
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	409a      	lsls	r2, r3
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d10d      	bne.n	800175a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001748:	68f9      	ldr	r1, [r7, #12]
 800174a:	6809      	ldr	r1, [r1, #0]
 800174c:	431a      	orrs	r2, r3
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	3318      	adds	r3, #24
 8001752:	011b      	lsls	r3, r3, #4
 8001754:	440b      	add	r3, r1
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	e00f      	b.n	800177a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001764:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800176a:	68f9      	ldr	r1, [r7, #12]
 800176c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800176e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	3318      	adds	r3, #24
 8001774:	011b      	lsls	r3, r3, #4
 8001776:	440b      	add	r3, r1
 8001778:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	6819      	ldr	r1, [r3, #0]
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	691a      	ldr	r2, [r3, #16]
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	3318      	adds	r3, #24
 8001786:	011b      	lsls	r3, r3, #4
 8001788:	440b      	add	r3, r1
 800178a:	3304      	adds	r3, #4
 800178c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	7d1b      	ldrb	r3, [r3, #20]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d111      	bne.n	80017ba <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	3318      	adds	r3, #24
 800179e:	011b      	lsls	r3, r3, #4
 80017a0:	4413      	add	r3, r2
 80017a2:	3304      	adds	r3, #4
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	68fa      	ldr	r2, [r7, #12]
 80017a8:	6811      	ldr	r1, [r2, #0]
 80017aa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	3318      	adds	r3, #24
 80017b2:	011b      	lsls	r3, r3, #4
 80017b4:	440b      	add	r3, r1
 80017b6:	3304      	adds	r3, #4
 80017b8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	3307      	adds	r3, #7
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	061a      	lsls	r2, r3, #24
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	3306      	adds	r3, #6
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	041b      	lsls	r3, r3, #16
 80017ca:	431a      	orrs	r2, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	3305      	adds	r3, #5
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	021b      	lsls	r3, r3, #8
 80017d4:	4313      	orrs	r3, r2
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	3204      	adds	r2, #4
 80017da:	7812      	ldrb	r2, [r2, #0]
 80017dc:	4610      	mov	r0, r2
 80017de:	68fa      	ldr	r2, [r7, #12]
 80017e0:	6811      	ldr	r1, [r2, #0]
 80017e2:	ea43 0200 	orr.w	r2, r3, r0
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	011b      	lsls	r3, r3, #4
 80017ea:	440b      	add	r3, r1
 80017ec:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80017f0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	3303      	adds	r3, #3
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	061a      	lsls	r2, r3, #24
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	3302      	adds	r3, #2
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	041b      	lsls	r3, r3, #16
 8001802:	431a      	orrs	r2, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	3301      	adds	r3, #1
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	021b      	lsls	r3, r3, #8
 800180c:	4313      	orrs	r3, r2
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	7812      	ldrb	r2, [r2, #0]
 8001812:	4610      	mov	r0, r2
 8001814:	68fa      	ldr	r2, [r7, #12]
 8001816:	6811      	ldr	r1, [r2, #0]
 8001818:	ea43 0200 	orr.w	r2, r3, r0
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	011b      	lsls	r3, r3, #4
 8001820:	440b      	add	r3, r1
 8001822:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001826:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	3318      	adds	r3, #24
 8001830:	011b      	lsls	r3, r3, #4
 8001832:	4413      	add	r3, r2
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	68fa      	ldr	r2, [r7, #12]
 8001838:	6811      	ldr	r1, [r2, #0]
 800183a:	f043 0201 	orr.w	r2, r3, #1
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	3318      	adds	r3, #24
 8001842:	011b      	lsls	r3, r3, #4
 8001844:	440b      	add	r3, r1
 8001846:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001848:	2300      	movs	r3, #0
 800184a:	e00e      	b.n	800186a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001850:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e006      	b.n	800186a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001860:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
  }
}
 800186a:	4618      	mov	r0, r3
 800186c:	3724      	adds	r7, #36	; 0x24
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr

08001876 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001876:	b480      	push	{r7}
 8001878:	b087      	sub	sp, #28
 800187a:	af00      	add	r7, sp, #0
 800187c:	60f8      	str	r0, [r7, #12]
 800187e:	60b9      	str	r1, [r7, #8]
 8001880:	607a      	str	r2, [r7, #4]
 8001882:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	f893 3020 	ldrb.w	r3, [r3, #32]
 800188a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800188c:	7dfb      	ldrb	r3, [r7, #23]
 800188e:	2b01      	cmp	r3, #1
 8001890:	d003      	beq.n	800189a <HAL_CAN_GetRxMessage+0x24>
 8001892:	7dfb      	ldrb	r3, [r7, #23]
 8001894:	2b02      	cmp	r3, #2
 8001896:	f040 80f3 	bne.w	8001a80 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d10e      	bne.n	80018be <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	68db      	ldr	r3, [r3, #12]
 80018a6:	f003 0303 	and.w	r3, r3, #3
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d116      	bne.n	80018dc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e0e7      	b.n	8001a8e <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	691b      	ldr	r3, [r3, #16]
 80018c4:	f003 0303 	and.w	r3, r3, #3
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d107      	bne.n	80018dc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e0d8      	b.n	8001a8e <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	331b      	adds	r3, #27
 80018e4:	011b      	lsls	r3, r3, #4
 80018e6:	4413      	add	r3, r2
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0204 	and.w	r2, r3, #4
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d10c      	bne.n	8001914 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	331b      	adds	r3, #27
 8001902:	011b      	lsls	r3, r3, #4
 8001904:	4413      	add	r3, r2
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	0d5b      	lsrs	r3, r3, #21
 800190a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	601a      	str	r2, [r3, #0]
 8001912:	e00b      	b.n	800192c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	331b      	adds	r3, #27
 800191c:	011b      	lsls	r3, r3, #4
 800191e:	4413      	add	r3, r2
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	08db      	lsrs	r3, r3, #3
 8001924:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	331b      	adds	r3, #27
 8001934:	011b      	lsls	r3, r3, #4
 8001936:	4413      	add	r3, r2
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0202 	and.w	r2, r3, #2
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	331b      	adds	r3, #27
 800194a:	011b      	lsls	r3, r3, #4
 800194c:	4413      	add	r3, r2
 800194e:	3304      	adds	r3, #4
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 020f 	and.w	r2, r3, #15
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	331b      	adds	r3, #27
 8001962:	011b      	lsls	r3, r3, #4
 8001964:	4413      	add	r3, r2
 8001966:	3304      	adds	r3, #4
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	0a1b      	lsrs	r3, r3, #8
 800196c:	b2da      	uxtb	r2, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	331b      	adds	r3, #27
 800197a:	011b      	lsls	r3, r3, #4
 800197c:	4413      	add	r3, r2
 800197e:	3304      	adds	r3, #4
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	0c1b      	lsrs	r3, r3, #16
 8001984:	b29a      	uxth	r2, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	011b      	lsls	r3, r3, #4
 8001992:	4413      	add	r3, r2
 8001994:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	b2da      	uxtb	r2, r3
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	011b      	lsls	r3, r3, #4
 80019a8:	4413      	add	r3, r2
 80019aa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	0a1a      	lsrs	r2, r3, #8
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	3301      	adds	r3, #1
 80019b6:	b2d2      	uxtb	r2, r2
 80019b8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	011b      	lsls	r3, r3, #4
 80019c2:	4413      	add	r3, r2
 80019c4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	0c1a      	lsrs	r2, r3, #16
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	3302      	adds	r3, #2
 80019d0:	b2d2      	uxtb	r2, r2
 80019d2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	011b      	lsls	r3, r3, #4
 80019dc:	4413      	add	r3, r2
 80019de:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	0e1a      	lsrs	r2, r3, #24
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	3303      	adds	r3, #3
 80019ea:	b2d2      	uxtb	r2, r2
 80019ec:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	011b      	lsls	r3, r3, #4
 80019f6:	4413      	add	r3, r2
 80019f8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	3304      	adds	r3, #4
 8001a02:	b2d2      	uxtb	r2, r2
 8001a04:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	011b      	lsls	r3, r3, #4
 8001a0e:	4413      	add	r3, r2
 8001a10:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	0a1a      	lsrs	r2, r3, #8
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	3305      	adds	r3, #5
 8001a1c:	b2d2      	uxtb	r2, r2
 8001a1e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	011b      	lsls	r3, r3, #4
 8001a28:	4413      	add	r3, r2
 8001a2a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	0c1a      	lsrs	r2, r3, #16
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	3306      	adds	r3, #6
 8001a36:	b2d2      	uxtb	r2, r2
 8001a38:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	011b      	lsls	r3, r3, #4
 8001a42:	4413      	add	r3, r2
 8001a44:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	0e1a      	lsrs	r2, r3, #24
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	3307      	adds	r3, #7
 8001a50:	b2d2      	uxtb	r2, r2
 8001a52:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d108      	bne.n	8001a6c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	68da      	ldr	r2, [r3, #12]
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f042 0220 	orr.w	r2, r2, #32
 8001a68:	60da      	str	r2, [r3, #12]
 8001a6a:	e007      	b.n	8001a7c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	691a      	ldr	r2, [r3, #16]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f042 0220 	orr.w	r2, r2, #32
 8001a7a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	e006      	b.n	8001a8e <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a84:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
  }
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	371c      	adds	r7, #28
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr

08001a9a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	b085      	sub	sp, #20
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
 8001aa2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001aaa:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001aac:	7bfb      	ldrb	r3, [r7, #15]
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d002      	beq.n	8001ab8 <HAL_CAN_ActivateNotification+0x1e>
 8001ab2:	7bfb      	ldrb	r3, [r7, #15]
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d109      	bne.n	8001acc <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	6959      	ldr	r1, [r3, #20]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	683a      	ldr	r2, [r7, #0]
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	e006      	b.n	8001ada <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
  }
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3714      	adds	r7, #20
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr

08001ae6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b08a      	sub	sp, #40	; 0x28
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001aee:	2300      	movs	r3, #0
 8001af0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	695b      	ldr	r3, [r3, #20]
 8001af8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	691b      	ldr	r3, [r3, #16]
 8001b18:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001b22:	6a3b      	ldr	r3, [r7, #32]
 8001b24:	f003 0301 	and.w	r3, r3, #1
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d07c      	beq.n	8001c26 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d023      	beq.n	8001b7e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	f003 0302 	and.w	r3, r3, #2
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d003      	beq.n	8001b50 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f000 f983 	bl	8001e54 <HAL_CAN_TxMailbox0CompleteCallback>
 8001b4e:	e016      	b.n	8001b7e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	f003 0304 	and.w	r3, r3, #4
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d004      	beq.n	8001b64 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b60:	627b      	str	r3, [r7, #36]	; 0x24
 8001b62:	e00c      	b.n	8001b7e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	f003 0308 	and.w	r3, r3, #8
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d004      	beq.n	8001b78 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b70:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b74:	627b      	str	r3, [r7, #36]	; 0x24
 8001b76:	e002      	b.n	8001b7e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f000 f989 	bl	8001e90 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d024      	beq.n	8001bd2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b90:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d003      	beq.n	8001ba4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f000 f963 	bl	8001e68 <HAL_CAN_TxMailbox1CompleteCallback>
 8001ba2:	e016      	b.n	8001bd2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d004      	beq.n	8001bb8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001bb4:	627b      	str	r3, [r7, #36]	; 0x24
 8001bb6:	e00c      	b.n	8001bd2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d004      	beq.n	8001bcc <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bc8:	627b      	str	r3, [r7, #36]	; 0x24
 8001bca:	e002      	b.n	8001bd2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f000 f969 	bl	8001ea4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d024      	beq.n	8001c26 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001be4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d003      	beq.n	8001bf8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f000 f943 	bl	8001e7c <HAL_CAN_TxMailbox2CompleteCallback>
 8001bf6:	e016      	b.n	8001c26 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d004      	beq.n	8001c0c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c08:	627b      	str	r3, [r7, #36]	; 0x24
 8001c0a:	e00c      	b.n	8001c26 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d004      	beq.n	8001c20 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c1c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c1e:	e002      	b.n	8001c26 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f000 f949 	bl	8001eb8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001c26:	6a3b      	ldr	r3, [r7, #32]
 8001c28:	f003 0308 	and.w	r3, r3, #8
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d00c      	beq.n	8001c4a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	f003 0310 	and.w	r3, r3, #16
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d007      	beq.n	8001c4a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c40:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2210      	movs	r2, #16
 8001c48:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001c4a:	6a3b      	ldr	r3, [r7, #32]
 8001c4c:	f003 0304 	and.w	r3, r3, #4
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d00b      	beq.n	8001c6c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	f003 0308 	and.w	r3, r3, #8
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d006      	beq.n	8001c6c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2208      	movs	r2, #8
 8001c64:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f000 f930 	bl	8001ecc <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001c6c:	6a3b      	ldr	r3, [r7, #32]
 8001c6e:	f003 0302 	and.w	r3, r3, #2
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d009      	beq.n	8001c8a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	f003 0303 	and.w	r3, r3, #3
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d002      	beq.n	8001c8a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f7fe fca9 	bl	80005dc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001c8a:	6a3b      	ldr	r3, [r7, #32]
 8001c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d00c      	beq.n	8001cae <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	f003 0310 	and.w	r3, r3, #16
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d007      	beq.n	8001cae <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ca4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2210      	movs	r2, #16
 8001cac:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001cae:	6a3b      	ldr	r3, [r7, #32]
 8001cb0:	f003 0320 	and.w	r3, r3, #32
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d00b      	beq.n	8001cd0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	f003 0308 	and.w	r3, r3, #8
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d006      	beq.n	8001cd0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2208      	movs	r2, #8
 8001cc8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f000 f912 	bl	8001ef4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001cd0:	6a3b      	ldr	r3, [r7, #32]
 8001cd2:	f003 0310 	and.w	r3, r3, #16
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d009      	beq.n	8001cee <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	691b      	ldr	r3, [r3, #16]
 8001ce0:	f003 0303 	and.w	r3, r3, #3
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d002      	beq.n	8001cee <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f000 f8f9 	bl	8001ee0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001cee:	6a3b      	ldr	r3, [r7, #32]
 8001cf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d00b      	beq.n	8001d10 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	f003 0310 	and.w	r3, r3, #16
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d006      	beq.n	8001d10 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	2210      	movs	r2, #16
 8001d08:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f000 f8fc 	bl	8001f08 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001d10:	6a3b      	ldr	r3, [r7, #32]
 8001d12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d00b      	beq.n	8001d32 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	f003 0308 	and.w	r3, r3, #8
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d006      	beq.n	8001d32 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2208      	movs	r2, #8
 8001d2a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f000 f8f5 	bl	8001f1c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001d32:	6a3b      	ldr	r3, [r7, #32]
 8001d34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d07b      	beq.n	8001e34 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	f003 0304 	and.w	r3, r3, #4
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d072      	beq.n	8001e2c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001d46:	6a3b      	ldr	r3, [r7, #32]
 8001d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d008      	beq.n	8001d62 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d003      	beq.n	8001d62 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5c:	f043 0301 	orr.w	r3, r3, #1
 8001d60:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001d62:	6a3b      	ldr	r3, [r7, #32]
 8001d64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d008      	beq.n	8001d7e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d003      	beq.n	8001d7e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d78:	f043 0302 	orr.w	r3, r3, #2
 8001d7c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001d7e:	6a3b      	ldr	r3, [r7, #32]
 8001d80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d008      	beq.n	8001d9a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d003      	beq.n	8001d9a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d94:	f043 0304 	orr.w	r3, r3, #4
 8001d98:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001d9a:	6a3b      	ldr	r3, [r7, #32]
 8001d9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d043      	beq.n	8001e2c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d03e      	beq.n	8001e2c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001db4:	2b60      	cmp	r3, #96	; 0x60
 8001db6:	d02b      	beq.n	8001e10 <HAL_CAN_IRQHandler+0x32a>
 8001db8:	2b60      	cmp	r3, #96	; 0x60
 8001dba:	d82e      	bhi.n	8001e1a <HAL_CAN_IRQHandler+0x334>
 8001dbc:	2b50      	cmp	r3, #80	; 0x50
 8001dbe:	d022      	beq.n	8001e06 <HAL_CAN_IRQHandler+0x320>
 8001dc0:	2b50      	cmp	r3, #80	; 0x50
 8001dc2:	d82a      	bhi.n	8001e1a <HAL_CAN_IRQHandler+0x334>
 8001dc4:	2b40      	cmp	r3, #64	; 0x40
 8001dc6:	d019      	beq.n	8001dfc <HAL_CAN_IRQHandler+0x316>
 8001dc8:	2b40      	cmp	r3, #64	; 0x40
 8001dca:	d826      	bhi.n	8001e1a <HAL_CAN_IRQHandler+0x334>
 8001dcc:	2b30      	cmp	r3, #48	; 0x30
 8001dce:	d010      	beq.n	8001df2 <HAL_CAN_IRQHandler+0x30c>
 8001dd0:	2b30      	cmp	r3, #48	; 0x30
 8001dd2:	d822      	bhi.n	8001e1a <HAL_CAN_IRQHandler+0x334>
 8001dd4:	2b10      	cmp	r3, #16
 8001dd6:	d002      	beq.n	8001dde <HAL_CAN_IRQHandler+0x2f8>
 8001dd8:	2b20      	cmp	r3, #32
 8001dda:	d005      	beq.n	8001de8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001ddc:	e01d      	b.n	8001e1a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de0:	f043 0308 	orr.w	r3, r3, #8
 8001de4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001de6:	e019      	b.n	8001e1c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dea:	f043 0310 	orr.w	r3, r3, #16
 8001dee:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001df0:	e014      	b.n	8001e1c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df4:	f043 0320 	orr.w	r3, r3, #32
 8001df8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001dfa:	e00f      	b.n	8001e1c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e02:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e04:	e00a      	b.n	8001e1c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e0c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e0e:	e005      	b.n	8001e1c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e16:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e18:	e000      	b.n	8001e1c <HAL_CAN_IRQHandler+0x336>
            break;
 8001e1a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	699a      	ldr	r2, [r3, #24]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001e2a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2204      	movs	r2, #4
 8001e32:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d008      	beq.n	8001e4c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e40:	431a      	orrs	r2, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f000 f872 	bl	8001f30 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001e4c:	bf00      	nop
 8001e4e:	3728      	adds	r7, #40	; 0x28
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001e70:	bf00      	nop
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001e84:	bf00      	nop
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001eac:	bf00      	nop
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001ec0:	bf00      	nop
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001ed4:	bf00      	nop
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001ee8:	bf00      	nop
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001efc:	bf00      	nop
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001f24:	bf00      	nop
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001f38:	bf00      	nop
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <__NVIC_SetPriorityGrouping>:
{
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f003 0307 	and.w	r3, r3, #7
 8001f52:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f54:	4b0c      	ldr	r3, [pc, #48]	; (8001f88 <__NVIC_SetPriorityGrouping+0x44>)
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f5a:	68ba      	ldr	r2, [r7, #8]
 8001f5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f60:	4013      	ands	r3, r2
 8001f62:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f76:	4a04      	ldr	r2, [pc, #16]	; (8001f88 <__NVIC_SetPriorityGrouping+0x44>)
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	60d3      	str	r3, [r2, #12]
}
 8001f7c:	bf00      	nop
 8001f7e:	3714      	adds	r7, #20
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr
 8001f88:	e000ed00 	.word	0xe000ed00

08001f8c <__NVIC_GetPriorityGrouping>:
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f90:	4b04      	ldr	r3, [pc, #16]	; (8001fa4 <__NVIC_GetPriorityGrouping+0x18>)
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	0a1b      	lsrs	r3, r3, #8
 8001f96:	f003 0307 	and.w	r3, r3, #7
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr
 8001fa4:	e000ed00 	.word	0xe000ed00

08001fa8 <__NVIC_EnableIRQ>:
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	4603      	mov	r3, r0
 8001fb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	db0b      	blt.n	8001fd2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fba:	79fb      	ldrb	r3, [r7, #7]
 8001fbc:	f003 021f 	and.w	r2, r3, #31
 8001fc0:	4907      	ldr	r1, [pc, #28]	; (8001fe0 <__NVIC_EnableIRQ+0x38>)
 8001fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc6:	095b      	lsrs	r3, r3, #5
 8001fc8:	2001      	movs	r0, #1
 8001fca:	fa00 f202 	lsl.w	r2, r0, r2
 8001fce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001fd2:	bf00      	nop
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	e000e100 	.word	0xe000e100

08001fe4 <__NVIC_SetPriority>:
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	4603      	mov	r3, r0
 8001fec:	6039      	str	r1, [r7, #0]
 8001fee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	db0a      	blt.n	800200e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	b2da      	uxtb	r2, r3
 8001ffc:	490c      	ldr	r1, [pc, #48]	; (8002030 <__NVIC_SetPriority+0x4c>)
 8001ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002002:	0112      	lsls	r2, r2, #4
 8002004:	b2d2      	uxtb	r2, r2
 8002006:	440b      	add	r3, r1
 8002008:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800200c:	e00a      	b.n	8002024 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	b2da      	uxtb	r2, r3
 8002012:	4908      	ldr	r1, [pc, #32]	; (8002034 <__NVIC_SetPriority+0x50>)
 8002014:	79fb      	ldrb	r3, [r7, #7]
 8002016:	f003 030f 	and.w	r3, r3, #15
 800201a:	3b04      	subs	r3, #4
 800201c:	0112      	lsls	r2, r2, #4
 800201e:	b2d2      	uxtb	r2, r2
 8002020:	440b      	add	r3, r1
 8002022:	761a      	strb	r2, [r3, #24]
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr
 8002030:	e000e100 	.word	0xe000e100
 8002034:	e000ed00 	.word	0xe000ed00

08002038 <NVIC_EncodePriority>:
{
 8002038:	b480      	push	{r7}
 800203a:	b089      	sub	sp, #36	; 0x24
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f003 0307 	and.w	r3, r3, #7
 800204a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	f1c3 0307 	rsb	r3, r3, #7
 8002052:	2b04      	cmp	r3, #4
 8002054:	bf28      	it	cs
 8002056:	2304      	movcs	r3, #4
 8002058:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	3304      	adds	r3, #4
 800205e:	2b06      	cmp	r3, #6
 8002060:	d902      	bls.n	8002068 <NVIC_EncodePriority+0x30>
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	3b03      	subs	r3, #3
 8002066:	e000      	b.n	800206a <NVIC_EncodePriority+0x32>
 8002068:	2300      	movs	r3, #0
 800206a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800206c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	fa02 f303 	lsl.w	r3, r2, r3
 8002076:	43da      	mvns	r2, r3
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	401a      	ands	r2, r3
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002080:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	fa01 f303 	lsl.w	r3, r1, r3
 800208a:	43d9      	mvns	r1, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002090:	4313      	orrs	r3, r2
}
 8002092:	4618      	mov	r0, r3
 8002094:	3724      	adds	r7, #36	; 0x24
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
	...

080020a0 <SysTick_Config>:
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	3b01      	subs	r3, #1
 80020ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020b0:	d301      	bcc.n	80020b6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80020b2:	2301      	movs	r3, #1
 80020b4:	e00f      	b.n	80020d6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020b6:	4a0a      	ldr	r2, [pc, #40]	; (80020e0 <SysTick_Config+0x40>)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	3b01      	subs	r3, #1
 80020bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020be:	210f      	movs	r1, #15
 80020c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020c4:	f7ff ff8e 	bl	8001fe4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020c8:	4b05      	ldr	r3, [pc, #20]	; (80020e0 <SysTick_Config+0x40>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020ce:	4b04      	ldr	r3, [pc, #16]	; (80020e0 <SysTick_Config+0x40>)
 80020d0:	2207      	movs	r2, #7
 80020d2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	e000e010 	.word	0xe000e010

080020e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f7ff ff29 	bl	8001f44 <__NVIC_SetPriorityGrouping>
}
 80020f2:	bf00      	nop
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b086      	sub	sp, #24
 80020fe:	af00      	add	r7, sp, #0
 8002100:	4603      	mov	r3, r0
 8002102:	60b9      	str	r1, [r7, #8]
 8002104:	607a      	str	r2, [r7, #4]
 8002106:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002108:	2300      	movs	r3, #0
 800210a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800210c:	f7ff ff3e 	bl	8001f8c <__NVIC_GetPriorityGrouping>
 8002110:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	68b9      	ldr	r1, [r7, #8]
 8002116:	6978      	ldr	r0, [r7, #20]
 8002118:	f7ff ff8e 	bl	8002038 <NVIC_EncodePriority>
 800211c:	4602      	mov	r2, r0
 800211e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002122:	4611      	mov	r1, r2
 8002124:	4618      	mov	r0, r3
 8002126:	f7ff ff5d 	bl	8001fe4 <__NVIC_SetPriority>
}
 800212a:	bf00      	nop
 800212c:	3718      	adds	r7, #24
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002132:	b580      	push	{r7, lr}
 8002134:	b082      	sub	sp, #8
 8002136:	af00      	add	r7, sp, #0
 8002138:	4603      	mov	r3, r0
 800213a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800213c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002140:	4618      	mov	r0, r3
 8002142:	f7ff ff31 	bl	8001fa8 <__NVIC_EnableIRQ>
}
 8002146:	bf00      	nop
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}

0800214e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800214e:	b580      	push	{r7, lr}
 8002150:	b082      	sub	sp, #8
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f7ff ffa2 	bl	80020a0 <SysTick_Config>
 800215c:	4603      	mov	r3, r0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
	...

08002168 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800217a:	4b23      	ldr	r3, [pc, #140]	; (8002208 <HAL_FLASH_Program+0xa0>)
 800217c:	7e1b      	ldrb	r3, [r3, #24]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d101      	bne.n	8002186 <HAL_FLASH_Program+0x1e>
 8002182:	2302      	movs	r3, #2
 8002184:	e03b      	b.n	80021fe <HAL_FLASH_Program+0x96>
 8002186:	4b20      	ldr	r3, [pc, #128]	; (8002208 <HAL_FLASH_Program+0xa0>)
 8002188:	2201      	movs	r2, #1
 800218a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800218c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002190:	f000 f87c 	bl	800228c <FLASH_WaitForLastOperation>
 8002194:	4603      	mov	r3, r0
 8002196:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8002198:	7dfb      	ldrb	r3, [r7, #23]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d12b      	bne.n	80021f6 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d105      	bne.n	80021b0 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80021a4:	783b      	ldrb	r3, [r7, #0]
 80021a6:	4619      	mov	r1, r3
 80021a8:	68b8      	ldr	r0, [r7, #8]
 80021aa:	f000 f927 	bl	80023fc <FLASH_Program_Byte>
 80021ae:	e016      	b.n	80021de <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d105      	bne.n	80021c2 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80021b6:	883b      	ldrh	r3, [r7, #0]
 80021b8:	4619      	mov	r1, r3
 80021ba:	68b8      	ldr	r0, [r7, #8]
 80021bc:	f000 f8fa 	bl	80023b4 <FLASH_Program_HalfWord>
 80021c0:	e00d      	b.n	80021de <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d105      	bne.n	80021d4 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	4619      	mov	r1, r3
 80021cc:	68b8      	ldr	r0, [r7, #8]
 80021ce:	f000 f8cf 	bl	8002370 <FLASH_Program_Word>
 80021d2:	e004      	b.n	80021de <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80021d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80021d8:	68b8      	ldr	r0, [r7, #8]
 80021da:	f000 f897 	bl	800230c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80021de:	f24c 3050 	movw	r0, #50000	; 0xc350
 80021e2:	f000 f853 	bl	800228c <FLASH_WaitForLastOperation>
 80021e6:	4603      	mov	r3, r0
 80021e8:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80021ea:	4b08      	ldr	r3, [pc, #32]	; (800220c <HAL_FLASH_Program+0xa4>)
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	4a07      	ldr	r2, [pc, #28]	; (800220c <HAL_FLASH_Program+0xa4>)
 80021f0:	f023 0301 	bic.w	r3, r3, #1
 80021f4:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80021f6:	4b04      	ldr	r3, [pc, #16]	; (8002208 <HAL_FLASH_Program+0xa0>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	761a      	strb	r2, [r3, #24]
  
  return status;
 80021fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3718      	adds	r7, #24
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	20000770 	.word	0x20000770
 800220c:	40023c00 	.word	0x40023c00

08002210 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002216:	2300      	movs	r3, #0
 8002218:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800221a:	4b0b      	ldr	r3, [pc, #44]	; (8002248 <HAL_FLASH_Unlock+0x38>)
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	2b00      	cmp	r3, #0
 8002220:	da0b      	bge.n	800223a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002222:	4b09      	ldr	r3, [pc, #36]	; (8002248 <HAL_FLASH_Unlock+0x38>)
 8002224:	4a09      	ldr	r2, [pc, #36]	; (800224c <HAL_FLASH_Unlock+0x3c>)
 8002226:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002228:	4b07      	ldr	r3, [pc, #28]	; (8002248 <HAL_FLASH_Unlock+0x38>)
 800222a:	4a09      	ldr	r2, [pc, #36]	; (8002250 <HAL_FLASH_Unlock+0x40>)
 800222c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800222e:	4b06      	ldr	r3, [pc, #24]	; (8002248 <HAL_FLASH_Unlock+0x38>)
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	2b00      	cmp	r3, #0
 8002234:	da01      	bge.n	800223a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800223a:	79fb      	ldrb	r3, [r7, #7]
}
 800223c:	4618      	mov	r0, r3
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr
 8002248:	40023c00 	.word	0x40023c00
 800224c:	45670123 	.word	0x45670123
 8002250:	cdef89ab 	.word	0xcdef89ab

08002254 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8002258:	4b05      	ldr	r3, [pc, #20]	; (8002270 <HAL_FLASH_Lock+0x1c>)
 800225a:	691b      	ldr	r3, [r3, #16]
 800225c:	4a04      	ldr	r2, [pc, #16]	; (8002270 <HAL_FLASH_Lock+0x1c>)
 800225e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002262:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr
 8002270:	40023c00 	.word	0x40023c00

08002274 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8002278:	4b03      	ldr	r3, [pc, #12]	; (8002288 <HAL_FLASH_GetError+0x14>)
 800227a:	69db      	ldr	r3, [r3, #28]
}  
 800227c:	4618      	mov	r0, r3
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	20000770 	.word	0x20000770

0800228c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002294:	2300      	movs	r3, #0
 8002296:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002298:	4b1a      	ldr	r3, [pc, #104]	; (8002304 <FLASH_WaitForLastOperation+0x78>)
 800229a:	2200      	movs	r2, #0
 800229c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800229e:	f7fe ffbf 	bl	8001220 <HAL_GetTick>
 80022a2:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80022a4:	e010      	b.n	80022c8 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022ac:	d00c      	beq.n	80022c8 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d007      	beq.n	80022c4 <FLASH_WaitForLastOperation+0x38>
 80022b4:	f7fe ffb4 	bl	8001220 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d201      	bcs.n	80022c8 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e019      	b.n	80022fc <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80022c8:	4b0f      	ldr	r3, [pc, #60]	; (8002308 <FLASH_WaitForLastOperation+0x7c>)
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d1e8      	bne.n	80022a6 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80022d4:	4b0c      	ldr	r3, [pc, #48]	; (8002308 <FLASH_WaitForLastOperation+0x7c>)
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	f003 0301 	and.w	r3, r3, #1
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d002      	beq.n	80022e6 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80022e0:	4b09      	ldr	r3, [pc, #36]	; (8002308 <FLASH_WaitForLastOperation+0x7c>)
 80022e2:	2201      	movs	r2, #1
 80022e4:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80022e6:	4b08      	ldr	r3, [pc, #32]	; (8002308 <FLASH_WaitForLastOperation+0x7c>)
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d003      	beq.n	80022fa <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80022f2:	f000 f8a5 	bl	8002440 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e000      	b.n	80022fc <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80022fa:	2300      	movs	r3, #0
  
}  
 80022fc:	4618      	mov	r0, r3
 80022fe:	3710      	adds	r7, #16
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	20000770 	.word	0x20000770
 8002308:	40023c00 	.word	0x40023c00

0800230c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800230c:	b480      	push	{r7}
 800230e:	b085      	sub	sp, #20
 8002310:	af00      	add	r7, sp, #0
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002318:	4b14      	ldr	r3, [pc, #80]	; (800236c <FLASH_Program_DoubleWord+0x60>)
 800231a:	691b      	ldr	r3, [r3, #16]
 800231c:	4a13      	ldr	r2, [pc, #76]	; (800236c <FLASH_Program_DoubleWord+0x60>)
 800231e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002322:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8002324:	4b11      	ldr	r3, [pc, #68]	; (800236c <FLASH_Program_DoubleWord+0x60>)
 8002326:	691b      	ldr	r3, [r3, #16]
 8002328:	4a10      	ldr	r2, [pc, #64]	; (800236c <FLASH_Program_DoubleWord+0x60>)
 800232a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800232e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002330:	4b0e      	ldr	r3, [pc, #56]	; (800236c <FLASH_Program_DoubleWord+0x60>)
 8002332:	691b      	ldr	r3, [r3, #16]
 8002334:	4a0d      	ldr	r2, [pc, #52]	; (800236c <FLASH_Program_DoubleWord+0x60>)
 8002336:	f043 0301 	orr.w	r3, r3, #1
 800233a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	683a      	ldr	r2, [r7, #0]
 8002340:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8002342:	f3bf 8f6f 	isb	sy
}
 8002346:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8002348:	e9d7 0100 	ldrd	r0, r1, [r7]
 800234c:	f04f 0200 	mov.w	r2, #0
 8002350:	f04f 0300 	mov.w	r3, #0
 8002354:	000a      	movs	r2, r1
 8002356:	2300      	movs	r3, #0
 8002358:	68f9      	ldr	r1, [r7, #12]
 800235a:	3104      	adds	r1, #4
 800235c:	4613      	mov	r3, r2
 800235e:	600b      	str	r3, [r1, #0]
}
 8002360:	bf00      	nop
 8002362:	3714      	adds	r7, #20
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr
 800236c:	40023c00 	.word	0x40023c00

08002370 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800237a:	4b0d      	ldr	r3, [pc, #52]	; (80023b0 <FLASH_Program_Word+0x40>)
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	4a0c      	ldr	r2, [pc, #48]	; (80023b0 <FLASH_Program_Word+0x40>)
 8002380:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002384:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8002386:	4b0a      	ldr	r3, [pc, #40]	; (80023b0 <FLASH_Program_Word+0x40>)
 8002388:	691b      	ldr	r3, [r3, #16]
 800238a:	4a09      	ldr	r2, [pc, #36]	; (80023b0 <FLASH_Program_Word+0x40>)
 800238c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002390:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002392:	4b07      	ldr	r3, [pc, #28]	; (80023b0 <FLASH_Program_Word+0x40>)
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	4a06      	ldr	r2, [pc, #24]	; (80023b0 <FLASH_Program_Word+0x40>)
 8002398:	f043 0301 	orr.w	r3, r3, #1
 800239c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	683a      	ldr	r2, [r7, #0]
 80023a2:	601a      	str	r2, [r3, #0]
}
 80023a4:	bf00      	nop
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr
 80023b0:	40023c00 	.word	0x40023c00

080023b4 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	460b      	mov	r3, r1
 80023be:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80023c0:	4b0d      	ldr	r3, [pc, #52]	; (80023f8 <FLASH_Program_HalfWord+0x44>)
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	4a0c      	ldr	r2, [pc, #48]	; (80023f8 <FLASH_Program_HalfWord+0x44>)
 80023c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023ca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80023cc:	4b0a      	ldr	r3, [pc, #40]	; (80023f8 <FLASH_Program_HalfWord+0x44>)
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	4a09      	ldr	r2, [pc, #36]	; (80023f8 <FLASH_Program_HalfWord+0x44>)
 80023d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023d6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80023d8:	4b07      	ldr	r3, [pc, #28]	; (80023f8 <FLASH_Program_HalfWord+0x44>)
 80023da:	691b      	ldr	r3, [r3, #16]
 80023dc:	4a06      	ldr	r2, [pc, #24]	; (80023f8 <FLASH_Program_HalfWord+0x44>)
 80023de:	f043 0301 	orr.w	r3, r3, #1
 80023e2:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	887a      	ldrh	r2, [r7, #2]
 80023e8:	801a      	strh	r2, [r3, #0]
}
 80023ea:	bf00      	nop
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	40023c00 	.word	0x40023c00

080023fc <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	460b      	mov	r3, r1
 8002406:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002408:	4b0c      	ldr	r3, [pc, #48]	; (800243c <FLASH_Program_Byte+0x40>)
 800240a:	691b      	ldr	r3, [r3, #16]
 800240c:	4a0b      	ldr	r2, [pc, #44]	; (800243c <FLASH_Program_Byte+0x40>)
 800240e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002412:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002414:	4b09      	ldr	r3, [pc, #36]	; (800243c <FLASH_Program_Byte+0x40>)
 8002416:	4a09      	ldr	r2, [pc, #36]	; (800243c <FLASH_Program_Byte+0x40>)
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800241c:	4b07      	ldr	r3, [pc, #28]	; (800243c <FLASH_Program_Byte+0x40>)
 800241e:	691b      	ldr	r3, [r3, #16]
 8002420:	4a06      	ldr	r2, [pc, #24]	; (800243c <FLASH_Program_Byte+0x40>)
 8002422:	f043 0301 	orr.w	r3, r3, #1
 8002426:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	78fa      	ldrb	r2, [r7, #3]
 800242c:	701a      	strb	r2, [r3, #0]
}
 800242e:	bf00      	nop
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	40023c00 	.word	0x40023c00

08002440 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002444:	4b27      	ldr	r3, [pc, #156]	; (80024e4 <FLASH_SetErrorCode+0xa4>)
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	f003 0310 	and.w	r3, r3, #16
 800244c:	2b00      	cmp	r3, #0
 800244e:	d008      	beq.n	8002462 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002450:	4b25      	ldr	r3, [pc, #148]	; (80024e8 <FLASH_SetErrorCode+0xa8>)
 8002452:	69db      	ldr	r3, [r3, #28]
 8002454:	f043 0310 	orr.w	r3, r3, #16
 8002458:	4a23      	ldr	r2, [pc, #140]	; (80024e8 <FLASH_SetErrorCode+0xa8>)
 800245a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800245c:	4b21      	ldr	r3, [pc, #132]	; (80024e4 <FLASH_SetErrorCode+0xa4>)
 800245e:	2210      	movs	r2, #16
 8002460:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8002462:	4b20      	ldr	r3, [pc, #128]	; (80024e4 <FLASH_SetErrorCode+0xa4>)
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	f003 0320 	and.w	r3, r3, #32
 800246a:	2b00      	cmp	r3, #0
 800246c:	d008      	beq.n	8002480 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800246e:	4b1e      	ldr	r3, [pc, #120]	; (80024e8 <FLASH_SetErrorCode+0xa8>)
 8002470:	69db      	ldr	r3, [r3, #28]
 8002472:	f043 0308 	orr.w	r3, r3, #8
 8002476:	4a1c      	ldr	r2, [pc, #112]	; (80024e8 <FLASH_SetErrorCode+0xa8>)
 8002478:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800247a:	4b1a      	ldr	r3, [pc, #104]	; (80024e4 <FLASH_SetErrorCode+0xa4>)
 800247c:	2220      	movs	r2, #32
 800247e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002480:	4b18      	ldr	r3, [pc, #96]	; (80024e4 <FLASH_SetErrorCode+0xa4>)
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002488:	2b00      	cmp	r3, #0
 800248a:	d008      	beq.n	800249e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800248c:	4b16      	ldr	r3, [pc, #88]	; (80024e8 <FLASH_SetErrorCode+0xa8>)
 800248e:	69db      	ldr	r3, [r3, #28]
 8002490:	f043 0304 	orr.w	r3, r3, #4
 8002494:	4a14      	ldr	r2, [pc, #80]	; (80024e8 <FLASH_SetErrorCode+0xa8>)
 8002496:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002498:	4b12      	ldr	r3, [pc, #72]	; (80024e4 <FLASH_SetErrorCode+0xa4>)
 800249a:	2240      	movs	r2, #64	; 0x40
 800249c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800249e:	4b11      	ldr	r3, [pc, #68]	; (80024e4 <FLASH_SetErrorCode+0xa4>)
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d008      	beq.n	80024bc <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80024aa:	4b0f      	ldr	r3, [pc, #60]	; (80024e8 <FLASH_SetErrorCode+0xa8>)
 80024ac:	69db      	ldr	r3, [r3, #28]
 80024ae:	f043 0302 	orr.w	r3, r3, #2
 80024b2:	4a0d      	ldr	r2, [pc, #52]	; (80024e8 <FLASH_SetErrorCode+0xa8>)
 80024b4:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80024b6:	4b0b      	ldr	r3, [pc, #44]	; (80024e4 <FLASH_SetErrorCode+0xa4>)
 80024b8:	2280      	movs	r2, #128	; 0x80
 80024ba:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80024bc:	4b09      	ldr	r3, [pc, #36]	; (80024e4 <FLASH_SetErrorCode+0xa4>)
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	f003 0302 	and.w	r3, r3, #2
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d008      	beq.n	80024da <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80024c8:	4b07      	ldr	r3, [pc, #28]	; (80024e8 <FLASH_SetErrorCode+0xa8>)
 80024ca:	69db      	ldr	r3, [r3, #28]
 80024cc:	f043 0320 	orr.w	r3, r3, #32
 80024d0:	4a05      	ldr	r2, [pc, #20]	; (80024e8 <FLASH_SetErrorCode+0xa8>)
 80024d2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80024d4:	4b03      	ldr	r3, [pc, #12]	; (80024e4 <FLASH_SetErrorCode+0xa4>)
 80024d6:	2202      	movs	r2, #2
 80024d8:	60da      	str	r2, [r3, #12]
  }
}
 80024da:	bf00      	nop
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr
 80024e4:	40023c00 	.word	0x40023c00
 80024e8:	20000770 	.word	0x20000770

080024ec <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80024fa:	2300      	movs	r3, #0
 80024fc:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80024fe:	4b31      	ldr	r3, [pc, #196]	; (80025c4 <HAL_FLASHEx_Erase+0xd8>)
 8002500:	7e1b      	ldrb	r3, [r3, #24]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d101      	bne.n	800250a <HAL_FLASHEx_Erase+0x1e>
 8002506:	2302      	movs	r3, #2
 8002508:	e058      	b.n	80025bc <HAL_FLASHEx_Erase+0xd0>
 800250a:	4b2e      	ldr	r3, [pc, #184]	; (80025c4 <HAL_FLASHEx_Erase+0xd8>)
 800250c:	2201      	movs	r2, #1
 800250e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002510:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002514:	f7ff feba 	bl	800228c <FLASH_WaitForLastOperation>
 8002518:	4603      	mov	r3, r0
 800251a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800251c:	7bfb      	ldrb	r3, [r7, #15]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d148      	bne.n	80025b4 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002528:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2b01      	cmp	r3, #1
 8002530:	d115      	bne.n	800255e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	b2da      	uxtb	r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	4619      	mov	r1, r3
 800253e:	4610      	mov	r0, r2
 8002540:	f000 f844 	bl	80025cc <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002544:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002548:	f7ff fea0 	bl	800228c <FLASH_WaitForLastOperation>
 800254c:	4603      	mov	r3, r0
 800254e:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8002550:	4b1d      	ldr	r3, [pc, #116]	; (80025c8 <HAL_FLASHEx_Erase+0xdc>)
 8002552:	691b      	ldr	r3, [r3, #16]
 8002554:	4a1c      	ldr	r2, [pc, #112]	; (80025c8 <HAL_FLASHEx_Erase+0xdc>)
 8002556:	f023 0304 	bic.w	r3, r3, #4
 800255a:	6113      	str	r3, [r2, #16]
 800255c:	e028      	b.n	80025b0 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	60bb      	str	r3, [r7, #8]
 8002564:	e01c      	b.n	80025a0 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	b2db      	uxtb	r3, r3
 800256c:	4619      	mov	r1, r3
 800256e:	68b8      	ldr	r0, [r7, #8]
 8002570:	f000 f850 	bl	8002614 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002574:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002578:	f7ff fe88 	bl	800228c <FLASH_WaitForLastOperation>
 800257c:	4603      	mov	r3, r0
 800257e:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8002580:	4b11      	ldr	r3, [pc, #68]	; (80025c8 <HAL_FLASHEx_Erase+0xdc>)
 8002582:	691b      	ldr	r3, [r3, #16]
 8002584:	4a10      	ldr	r2, [pc, #64]	; (80025c8 <HAL_FLASHEx_Erase+0xdc>)
 8002586:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800258a:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 800258c:	7bfb      	ldrb	r3, [r7, #15]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d003      	beq.n	800259a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	68ba      	ldr	r2, [r7, #8]
 8002596:	601a      	str	r2, [r3, #0]
          break;
 8002598:	e00a      	b.n	80025b0 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	3301      	adds	r3, #1
 800259e:	60bb      	str	r3, [r7, #8]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	68da      	ldr	r2, [r3, #12]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	4413      	add	r3, r2
 80025aa:	68ba      	ldr	r2, [r7, #8]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d3da      	bcc.n	8002566 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80025b0:	f000 f878 	bl	80026a4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80025b4:	4b03      	ldr	r3, [pc, #12]	; (80025c4 <HAL_FLASHEx_Erase+0xd8>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	761a      	strb	r2, [r3, #24]

  return status;
 80025ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3710      	adds	r7, #16
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	20000770 	.word	0x20000770
 80025c8:	40023c00 	.word	0x40023c00

080025cc <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	4603      	mov	r3, r0
 80025d4:	6039      	str	r1, [r7, #0]
 80025d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80025d8:	4b0d      	ldr	r3, [pc, #52]	; (8002610 <FLASH_MassErase+0x44>)
 80025da:	691b      	ldr	r3, [r3, #16]
 80025dc:	4a0c      	ldr	r2, [pc, #48]	; (8002610 <FLASH_MassErase+0x44>)
 80025de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025e2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80025e4:	4b0a      	ldr	r3, [pc, #40]	; (8002610 <FLASH_MassErase+0x44>)
 80025e6:	691b      	ldr	r3, [r3, #16]
 80025e8:	4a09      	ldr	r2, [pc, #36]	; (8002610 <FLASH_MassErase+0x44>)
 80025ea:	f043 0304 	orr.w	r3, r3, #4
 80025ee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80025f0:	4b07      	ldr	r3, [pc, #28]	; (8002610 <FLASH_MassErase+0x44>)
 80025f2:	691a      	ldr	r2, [r3, #16]
 80025f4:	79fb      	ldrb	r3, [r7, #7]
 80025f6:	021b      	lsls	r3, r3, #8
 80025f8:	4313      	orrs	r3, r2
 80025fa:	4a05      	ldr	r2, [pc, #20]	; (8002610 <FLASH_MassErase+0x44>)
 80025fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002600:	6113      	str	r3, [r2, #16]
}
 8002602:	bf00      	nop
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	40023c00 	.word	0x40023c00

08002614 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002614:	b480      	push	{r7}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	460b      	mov	r3, r1
 800261e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002620:	2300      	movs	r3, #0
 8002622:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002624:	78fb      	ldrb	r3, [r7, #3]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d102      	bne.n	8002630 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800262a:	2300      	movs	r3, #0
 800262c:	60fb      	str	r3, [r7, #12]
 800262e:	e010      	b.n	8002652 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002630:	78fb      	ldrb	r3, [r7, #3]
 8002632:	2b01      	cmp	r3, #1
 8002634:	d103      	bne.n	800263e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002636:	f44f 7380 	mov.w	r3, #256	; 0x100
 800263a:	60fb      	str	r3, [r7, #12]
 800263c:	e009      	b.n	8002652 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800263e:	78fb      	ldrb	r3, [r7, #3]
 8002640:	2b02      	cmp	r3, #2
 8002642:	d103      	bne.n	800264c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002644:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002648:	60fb      	str	r3, [r7, #12]
 800264a:	e002      	b.n	8002652 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800264c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002650:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002652:	4b13      	ldr	r3, [pc, #76]	; (80026a0 <FLASH_Erase_Sector+0x8c>)
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	4a12      	ldr	r2, [pc, #72]	; (80026a0 <FLASH_Erase_Sector+0x8c>)
 8002658:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800265c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800265e:	4b10      	ldr	r3, [pc, #64]	; (80026a0 <FLASH_Erase_Sector+0x8c>)
 8002660:	691a      	ldr	r2, [r3, #16]
 8002662:	490f      	ldr	r1, [pc, #60]	; (80026a0 <FLASH_Erase_Sector+0x8c>)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	4313      	orrs	r3, r2
 8002668:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800266a:	4b0d      	ldr	r3, [pc, #52]	; (80026a0 <FLASH_Erase_Sector+0x8c>)
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	4a0c      	ldr	r2, [pc, #48]	; (80026a0 <FLASH_Erase_Sector+0x8c>)
 8002670:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002674:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002676:	4b0a      	ldr	r3, [pc, #40]	; (80026a0 <FLASH_Erase_Sector+0x8c>)
 8002678:	691a      	ldr	r2, [r3, #16]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	00db      	lsls	r3, r3, #3
 800267e:	4313      	orrs	r3, r2
 8002680:	4a07      	ldr	r2, [pc, #28]	; (80026a0 <FLASH_Erase_Sector+0x8c>)
 8002682:	f043 0302 	orr.w	r3, r3, #2
 8002686:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002688:	4b05      	ldr	r3, [pc, #20]	; (80026a0 <FLASH_Erase_Sector+0x8c>)
 800268a:	691b      	ldr	r3, [r3, #16]
 800268c:	4a04      	ldr	r2, [pc, #16]	; (80026a0 <FLASH_Erase_Sector+0x8c>)
 800268e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002692:	6113      	str	r3, [r2, #16]
}
 8002694:	bf00      	nop
 8002696:	3714      	adds	r7, #20
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr
 80026a0:	40023c00 	.word	0x40023c00

080026a4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80026a8:	4b20      	ldr	r3, [pc, #128]	; (800272c <FLASH_FlushCaches+0x88>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d017      	beq.n	80026e4 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80026b4:	4b1d      	ldr	r3, [pc, #116]	; (800272c <FLASH_FlushCaches+0x88>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a1c      	ldr	r2, [pc, #112]	; (800272c <FLASH_FlushCaches+0x88>)
 80026ba:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80026be:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80026c0:	4b1a      	ldr	r3, [pc, #104]	; (800272c <FLASH_FlushCaches+0x88>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a19      	ldr	r2, [pc, #100]	; (800272c <FLASH_FlushCaches+0x88>)
 80026c6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80026ca:	6013      	str	r3, [r2, #0]
 80026cc:	4b17      	ldr	r3, [pc, #92]	; (800272c <FLASH_FlushCaches+0x88>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a16      	ldr	r2, [pc, #88]	; (800272c <FLASH_FlushCaches+0x88>)
 80026d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80026d6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80026d8:	4b14      	ldr	r3, [pc, #80]	; (800272c <FLASH_FlushCaches+0x88>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a13      	ldr	r2, [pc, #76]	; (800272c <FLASH_FlushCaches+0x88>)
 80026de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026e2:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80026e4:	4b11      	ldr	r3, [pc, #68]	; (800272c <FLASH_FlushCaches+0x88>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d017      	beq.n	8002720 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80026f0:	4b0e      	ldr	r3, [pc, #56]	; (800272c <FLASH_FlushCaches+0x88>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a0d      	ldr	r2, [pc, #52]	; (800272c <FLASH_FlushCaches+0x88>)
 80026f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80026fa:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80026fc:	4b0b      	ldr	r3, [pc, #44]	; (800272c <FLASH_FlushCaches+0x88>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a0a      	ldr	r2, [pc, #40]	; (800272c <FLASH_FlushCaches+0x88>)
 8002702:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002706:	6013      	str	r3, [r2, #0]
 8002708:	4b08      	ldr	r3, [pc, #32]	; (800272c <FLASH_FlushCaches+0x88>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a07      	ldr	r2, [pc, #28]	; (800272c <FLASH_FlushCaches+0x88>)
 800270e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002712:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002714:	4b05      	ldr	r3, [pc, #20]	; (800272c <FLASH_FlushCaches+0x88>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a04      	ldr	r2, [pc, #16]	; (800272c <FLASH_FlushCaches+0x88>)
 800271a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800271e:	6013      	str	r3, [r2, #0]
  }
}
 8002720:	bf00      	nop
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	40023c00 	.word	0x40023c00

08002730 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002730:	b480      	push	{r7}
 8002732:	b089      	sub	sp, #36	; 0x24
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800273a:	2300      	movs	r3, #0
 800273c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800273e:	2300      	movs	r3, #0
 8002740:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002742:	2300      	movs	r3, #0
 8002744:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002746:	2300      	movs	r3, #0
 8002748:	61fb      	str	r3, [r7, #28]
 800274a:	e16b      	b.n	8002a24 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800274c:	2201      	movs	r2, #1
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	697a      	ldr	r2, [r7, #20]
 800275c:	4013      	ands	r3, r2
 800275e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002760:	693a      	ldr	r2, [r7, #16]
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	429a      	cmp	r2, r3
 8002766:	f040 815a 	bne.w	8002a1e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f003 0303 	and.w	r3, r3, #3
 8002772:	2b01      	cmp	r3, #1
 8002774:	d005      	beq.n	8002782 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800277e:	2b02      	cmp	r3, #2
 8002780:	d130      	bne.n	80027e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	2203      	movs	r2, #3
 800278e:	fa02 f303 	lsl.w	r3, r2, r3
 8002792:	43db      	mvns	r3, r3
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	4013      	ands	r3, r2
 8002798:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	68da      	ldr	r2, [r3, #12]
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	fa02 f303 	lsl.w	r3, r2, r3
 80027a6:	69ba      	ldr	r2, [r7, #24]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	69ba      	ldr	r2, [r7, #24]
 80027b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027b8:	2201      	movs	r2, #1
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	43db      	mvns	r3, r3
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	4013      	ands	r3, r2
 80027c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	091b      	lsrs	r3, r3, #4
 80027ce:	f003 0201 	and.w	r2, r3, #1
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	4313      	orrs	r3, r2
 80027dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f003 0303 	and.w	r3, r3, #3
 80027ec:	2b03      	cmp	r3, #3
 80027ee:	d017      	beq.n	8002820 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	2203      	movs	r2, #3
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	43db      	mvns	r3, r3
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	4013      	ands	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	689a      	ldr	r2, [r3, #8]
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	005b      	lsls	r3, r3, #1
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	4313      	orrs	r3, r2
 8002818:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f003 0303 	and.w	r3, r3, #3
 8002828:	2b02      	cmp	r3, #2
 800282a:	d123      	bne.n	8002874 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	08da      	lsrs	r2, r3, #3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	3208      	adds	r2, #8
 8002834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002838:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	f003 0307 	and.w	r3, r3, #7
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	220f      	movs	r2, #15
 8002844:	fa02 f303 	lsl.w	r3, r2, r3
 8002848:	43db      	mvns	r3, r3
 800284a:	69ba      	ldr	r2, [r7, #24]
 800284c:	4013      	ands	r3, r2
 800284e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	691a      	ldr	r2, [r3, #16]
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	f003 0307 	and.w	r3, r3, #7
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	4313      	orrs	r3, r2
 8002864:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	08da      	lsrs	r2, r3, #3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	3208      	adds	r2, #8
 800286e:	69b9      	ldr	r1, [r7, #24]
 8002870:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	005b      	lsls	r3, r3, #1
 800287e:	2203      	movs	r2, #3
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	43db      	mvns	r3, r3
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	4013      	ands	r3, r2
 800288a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f003 0203 	and.w	r2, r3, #3
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	4313      	orrs	r3, r2
 80028a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	f000 80b4 	beq.w	8002a1e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028b6:	2300      	movs	r3, #0
 80028b8:	60fb      	str	r3, [r7, #12]
 80028ba:	4b60      	ldr	r3, [pc, #384]	; (8002a3c <HAL_GPIO_Init+0x30c>)
 80028bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028be:	4a5f      	ldr	r2, [pc, #380]	; (8002a3c <HAL_GPIO_Init+0x30c>)
 80028c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028c4:	6453      	str	r3, [r2, #68]	; 0x44
 80028c6:	4b5d      	ldr	r3, [pc, #372]	; (8002a3c <HAL_GPIO_Init+0x30c>)
 80028c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028ce:	60fb      	str	r3, [r7, #12]
 80028d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028d2:	4a5b      	ldr	r2, [pc, #364]	; (8002a40 <HAL_GPIO_Init+0x310>)
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	089b      	lsrs	r3, r3, #2
 80028d8:	3302      	adds	r3, #2
 80028da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	f003 0303 	and.w	r3, r3, #3
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	220f      	movs	r2, #15
 80028ea:	fa02 f303 	lsl.w	r3, r2, r3
 80028ee:	43db      	mvns	r3, r3
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	4013      	ands	r3, r2
 80028f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a52      	ldr	r2, [pc, #328]	; (8002a44 <HAL_GPIO_Init+0x314>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d02b      	beq.n	8002956 <HAL_GPIO_Init+0x226>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a51      	ldr	r2, [pc, #324]	; (8002a48 <HAL_GPIO_Init+0x318>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d025      	beq.n	8002952 <HAL_GPIO_Init+0x222>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a50      	ldr	r2, [pc, #320]	; (8002a4c <HAL_GPIO_Init+0x31c>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d01f      	beq.n	800294e <HAL_GPIO_Init+0x21e>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a4f      	ldr	r2, [pc, #316]	; (8002a50 <HAL_GPIO_Init+0x320>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d019      	beq.n	800294a <HAL_GPIO_Init+0x21a>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a4e      	ldr	r2, [pc, #312]	; (8002a54 <HAL_GPIO_Init+0x324>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d013      	beq.n	8002946 <HAL_GPIO_Init+0x216>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a4d      	ldr	r2, [pc, #308]	; (8002a58 <HAL_GPIO_Init+0x328>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d00d      	beq.n	8002942 <HAL_GPIO_Init+0x212>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a4c      	ldr	r2, [pc, #304]	; (8002a5c <HAL_GPIO_Init+0x32c>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d007      	beq.n	800293e <HAL_GPIO_Init+0x20e>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a4b      	ldr	r2, [pc, #300]	; (8002a60 <HAL_GPIO_Init+0x330>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d101      	bne.n	800293a <HAL_GPIO_Init+0x20a>
 8002936:	2307      	movs	r3, #7
 8002938:	e00e      	b.n	8002958 <HAL_GPIO_Init+0x228>
 800293a:	2308      	movs	r3, #8
 800293c:	e00c      	b.n	8002958 <HAL_GPIO_Init+0x228>
 800293e:	2306      	movs	r3, #6
 8002940:	e00a      	b.n	8002958 <HAL_GPIO_Init+0x228>
 8002942:	2305      	movs	r3, #5
 8002944:	e008      	b.n	8002958 <HAL_GPIO_Init+0x228>
 8002946:	2304      	movs	r3, #4
 8002948:	e006      	b.n	8002958 <HAL_GPIO_Init+0x228>
 800294a:	2303      	movs	r3, #3
 800294c:	e004      	b.n	8002958 <HAL_GPIO_Init+0x228>
 800294e:	2302      	movs	r3, #2
 8002950:	e002      	b.n	8002958 <HAL_GPIO_Init+0x228>
 8002952:	2301      	movs	r3, #1
 8002954:	e000      	b.n	8002958 <HAL_GPIO_Init+0x228>
 8002956:	2300      	movs	r3, #0
 8002958:	69fa      	ldr	r2, [r7, #28]
 800295a:	f002 0203 	and.w	r2, r2, #3
 800295e:	0092      	lsls	r2, r2, #2
 8002960:	4093      	lsls	r3, r2
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	4313      	orrs	r3, r2
 8002966:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002968:	4935      	ldr	r1, [pc, #212]	; (8002a40 <HAL_GPIO_Init+0x310>)
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	089b      	lsrs	r3, r3, #2
 800296e:	3302      	adds	r3, #2
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002976:	4b3b      	ldr	r3, [pc, #236]	; (8002a64 <HAL_GPIO_Init+0x334>)
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	43db      	mvns	r3, r3
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	4013      	ands	r3, r2
 8002984:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d003      	beq.n	800299a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002992:	69ba      	ldr	r2, [r7, #24]
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	4313      	orrs	r3, r2
 8002998:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800299a:	4a32      	ldr	r2, [pc, #200]	; (8002a64 <HAL_GPIO_Init+0x334>)
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029a0:	4b30      	ldr	r3, [pc, #192]	; (8002a64 <HAL_GPIO_Init+0x334>)
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	43db      	mvns	r3, r3
 80029aa:	69ba      	ldr	r2, [r7, #24]
 80029ac:	4013      	ands	r3, r2
 80029ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d003      	beq.n	80029c4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029c4:	4a27      	ldr	r2, [pc, #156]	; (8002a64 <HAL_GPIO_Init+0x334>)
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029ca:	4b26      	ldr	r3, [pc, #152]	; (8002a64 <HAL_GPIO_Init+0x334>)
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	43db      	mvns	r3, r3
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	4013      	ands	r3, r2
 80029d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d003      	beq.n	80029ee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80029e6:	69ba      	ldr	r2, [r7, #24]
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029ee:	4a1d      	ldr	r2, [pc, #116]	; (8002a64 <HAL_GPIO_Init+0x334>)
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029f4:	4b1b      	ldr	r3, [pc, #108]	; (8002a64 <HAL_GPIO_Init+0x334>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	43db      	mvns	r3, r3
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	4013      	ands	r3, r2
 8002a02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d003      	beq.n	8002a18 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a18:	4a12      	ldr	r2, [pc, #72]	; (8002a64 <HAL_GPIO_Init+0x334>)
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	3301      	adds	r3, #1
 8002a22:	61fb      	str	r3, [r7, #28]
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	2b0f      	cmp	r3, #15
 8002a28:	f67f ae90 	bls.w	800274c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a2c:	bf00      	nop
 8002a2e:	bf00      	nop
 8002a30:	3724      	adds	r7, #36	; 0x24
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	40023800 	.word	0x40023800
 8002a40:	40013800 	.word	0x40013800
 8002a44:	40020000 	.word	0x40020000
 8002a48:	40020400 	.word	0x40020400
 8002a4c:	40020800 	.word	0x40020800
 8002a50:	40020c00 	.word	0x40020c00
 8002a54:	40021000 	.word	0x40021000
 8002a58:	40021400 	.word	0x40021400
 8002a5c:	40021800 	.word	0x40021800
 8002a60:	40021c00 	.word	0x40021c00
 8002a64:	40013c00 	.word	0x40013c00

08002a68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	460b      	mov	r3, r1
 8002a72:	807b      	strh	r3, [r7, #2]
 8002a74:	4613      	mov	r3, r2
 8002a76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a78:	787b      	ldrb	r3, [r7, #1]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a7e:	887a      	ldrh	r2, [r7, #2]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a84:	e003      	b.n	8002a8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a86:	887b      	ldrh	r3, [r7, #2]
 8002a88:	041a      	lsls	r2, r3, #16
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	619a      	str	r2, [r3, #24]
}
 8002a8e:	bf00      	nop
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr

08002a9a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	b085      	sub	sp, #20
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	695b      	ldr	r3, [r3, #20]
 8002aaa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002aac:	887a      	ldrh	r2, [r7, #2]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	041a      	lsls	r2, r3, #16
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	43d9      	mvns	r1, r3
 8002ab8:	887b      	ldrh	r3, [r7, #2]
 8002aba:	400b      	ands	r3, r1
 8002abc:	431a      	orrs	r2, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	619a      	str	r2, [r3, #24]
}
 8002ac2:	bf00      	nop
 8002ac4:	3714      	adds	r7, #20
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
	...

08002ad0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b086      	sub	sp, #24
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d101      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e267      	b.n	8002fb2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d075      	beq.n	8002bda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002aee:	4b88      	ldr	r3, [pc, #544]	; (8002d10 <HAL_RCC_OscConfig+0x240>)
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	f003 030c 	and.w	r3, r3, #12
 8002af6:	2b04      	cmp	r3, #4
 8002af8:	d00c      	beq.n	8002b14 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002afa:	4b85      	ldr	r3, [pc, #532]	; (8002d10 <HAL_RCC_OscConfig+0x240>)
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b02:	2b08      	cmp	r3, #8
 8002b04:	d112      	bne.n	8002b2c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b06:	4b82      	ldr	r3, [pc, #520]	; (8002d10 <HAL_RCC_OscConfig+0x240>)
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b12:	d10b      	bne.n	8002b2c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b14:	4b7e      	ldr	r3, [pc, #504]	; (8002d10 <HAL_RCC_OscConfig+0x240>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d05b      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x108>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d157      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e242      	b.n	8002fb2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b34:	d106      	bne.n	8002b44 <HAL_RCC_OscConfig+0x74>
 8002b36:	4b76      	ldr	r3, [pc, #472]	; (8002d10 <HAL_RCC_OscConfig+0x240>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a75      	ldr	r2, [pc, #468]	; (8002d10 <HAL_RCC_OscConfig+0x240>)
 8002b3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b40:	6013      	str	r3, [r2, #0]
 8002b42:	e01d      	b.n	8002b80 <HAL_RCC_OscConfig+0xb0>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b4c:	d10c      	bne.n	8002b68 <HAL_RCC_OscConfig+0x98>
 8002b4e:	4b70      	ldr	r3, [pc, #448]	; (8002d10 <HAL_RCC_OscConfig+0x240>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a6f      	ldr	r2, [pc, #444]	; (8002d10 <HAL_RCC_OscConfig+0x240>)
 8002b54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b58:	6013      	str	r3, [r2, #0]
 8002b5a:	4b6d      	ldr	r3, [pc, #436]	; (8002d10 <HAL_RCC_OscConfig+0x240>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a6c      	ldr	r2, [pc, #432]	; (8002d10 <HAL_RCC_OscConfig+0x240>)
 8002b60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b64:	6013      	str	r3, [r2, #0]
 8002b66:	e00b      	b.n	8002b80 <HAL_RCC_OscConfig+0xb0>
 8002b68:	4b69      	ldr	r3, [pc, #420]	; (8002d10 <HAL_RCC_OscConfig+0x240>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a68      	ldr	r2, [pc, #416]	; (8002d10 <HAL_RCC_OscConfig+0x240>)
 8002b6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b72:	6013      	str	r3, [r2, #0]
 8002b74:	4b66      	ldr	r3, [pc, #408]	; (8002d10 <HAL_RCC_OscConfig+0x240>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a65      	ldr	r2, [pc, #404]	; (8002d10 <HAL_RCC_OscConfig+0x240>)
 8002b7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d013      	beq.n	8002bb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b88:	f7fe fb4a 	bl	8001220 <HAL_GetTick>
 8002b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b8e:	e008      	b.n	8002ba2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b90:	f7fe fb46 	bl	8001220 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b64      	cmp	r3, #100	; 0x64
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e207      	b.n	8002fb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ba2:	4b5b      	ldr	r3, [pc, #364]	; (8002d10 <HAL_RCC_OscConfig+0x240>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d0f0      	beq.n	8002b90 <HAL_RCC_OscConfig+0xc0>
 8002bae:	e014      	b.n	8002bda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb0:	f7fe fb36 	bl	8001220 <HAL_GetTick>
 8002bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bb6:	e008      	b.n	8002bca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bb8:	f7fe fb32 	bl	8001220 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b64      	cmp	r3, #100	; 0x64
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e1f3      	b.n	8002fb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bca:	4b51      	ldr	r3, [pc, #324]	; (8002d10 <HAL_RCC_OscConfig+0x240>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d1f0      	bne.n	8002bb8 <HAL_RCC_OscConfig+0xe8>
 8002bd6:	e000      	b.n	8002bda <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d063      	beq.n	8002cae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002be6:	4b4a      	ldr	r3, [pc, #296]	; (8002d10 <HAL_RCC_OscConfig+0x240>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f003 030c 	and.w	r3, r3, #12
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d00b      	beq.n	8002c0a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bf2:	4b47      	ldr	r3, [pc, #284]	; (8002d10 <HAL_RCC_OscConfig+0x240>)
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bfa:	2b08      	cmp	r3, #8
 8002bfc:	d11c      	bne.n	8002c38 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bfe:	4b44      	ldr	r3, [pc, #272]	; (8002d10 <HAL_RCC_OscConfig+0x240>)
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d116      	bne.n	8002c38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c0a:	4b41      	ldr	r3, [pc, #260]	; (8002d10 <HAL_RCC_OscConfig+0x240>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d005      	beq.n	8002c22 <HAL_RCC_OscConfig+0x152>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d001      	beq.n	8002c22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e1c7      	b.n	8002fb2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c22:	4b3b      	ldr	r3, [pc, #236]	; (8002d10 <HAL_RCC_OscConfig+0x240>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	00db      	lsls	r3, r3, #3
 8002c30:	4937      	ldr	r1, [pc, #220]	; (8002d10 <HAL_RCC_OscConfig+0x240>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c36:	e03a      	b.n	8002cae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d020      	beq.n	8002c82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c40:	4b34      	ldr	r3, [pc, #208]	; (8002d14 <HAL_RCC_OscConfig+0x244>)
 8002c42:	2201      	movs	r2, #1
 8002c44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c46:	f7fe faeb 	bl	8001220 <HAL_GetTick>
 8002c4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c4c:	e008      	b.n	8002c60 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c4e:	f7fe fae7 	bl	8001220 <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d901      	bls.n	8002c60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e1a8      	b.n	8002fb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c60:	4b2b      	ldr	r3, [pc, #172]	; (8002d10 <HAL_RCC_OscConfig+0x240>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0302 	and.w	r3, r3, #2
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d0f0      	beq.n	8002c4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c6c:	4b28      	ldr	r3, [pc, #160]	; (8002d10 <HAL_RCC_OscConfig+0x240>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	00db      	lsls	r3, r3, #3
 8002c7a:	4925      	ldr	r1, [pc, #148]	; (8002d10 <HAL_RCC_OscConfig+0x240>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	600b      	str	r3, [r1, #0]
 8002c80:	e015      	b.n	8002cae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c82:	4b24      	ldr	r3, [pc, #144]	; (8002d14 <HAL_RCC_OscConfig+0x244>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c88:	f7fe faca 	bl	8001220 <HAL_GetTick>
 8002c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c90:	f7fe fac6 	bl	8001220 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e187      	b.n	8002fb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ca2:	4b1b      	ldr	r3, [pc, #108]	; (8002d10 <HAL_RCC_OscConfig+0x240>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d1f0      	bne.n	8002c90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0308 	and.w	r3, r3, #8
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d036      	beq.n	8002d28 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d016      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cc2:	4b15      	ldr	r3, [pc, #84]	; (8002d18 <HAL_RCC_OscConfig+0x248>)
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cc8:	f7fe faaa 	bl	8001220 <HAL_GetTick>
 8002ccc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cce:	e008      	b.n	8002ce2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cd0:	f7fe faa6 	bl	8001220 <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e167      	b.n	8002fb2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ce2:	4b0b      	ldr	r3, [pc, #44]	; (8002d10 <HAL_RCC_OscConfig+0x240>)
 8002ce4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d0f0      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x200>
 8002cee:	e01b      	b.n	8002d28 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cf0:	4b09      	ldr	r3, [pc, #36]	; (8002d18 <HAL_RCC_OscConfig+0x248>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cf6:	f7fe fa93 	bl	8001220 <HAL_GetTick>
 8002cfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cfc:	e00e      	b.n	8002d1c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cfe:	f7fe fa8f 	bl	8001220 <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d907      	bls.n	8002d1c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e150      	b.n	8002fb2 <HAL_RCC_OscConfig+0x4e2>
 8002d10:	40023800 	.word	0x40023800
 8002d14:	42470000 	.word	0x42470000
 8002d18:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d1c:	4b88      	ldr	r3, [pc, #544]	; (8002f40 <HAL_RCC_OscConfig+0x470>)
 8002d1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d20:	f003 0302 	and.w	r3, r3, #2
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d1ea      	bne.n	8002cfe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0304 	and.w	r3, r3, #4
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	f000 8097 	beq.w	8002e64 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d36:	2300      	movs	r3, #0
 8002d38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d3a:	4b81      	ldr	r3, [pc, #516]	; (8002f40 <HAL_RCC_OscConfig+0x470>)
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d10f      	bne.n	8002d66 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d46:	2300      	movs	r3, #0
 8002d48:	60bb      	str	r3, [r7, #8]
 8002d4a:	4b7d      	ldr	r3, [pc, #500]	; (8002f40 <HAL_RCC_OscConfig+0x470>)
 8002d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4e:	4a7c      	ldr	r2, [pc, #496]	; (8002f40 <HAL_RCC_OscConfig+0x470>)
 8002d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d54:	6413      	str	r3, [r2, #64]	; 0x40
 8002d56:	4b7a      	ldr	r3, [pc, #488]	; (8002f40 <HAL_RCC_OscConfig+0x470>)
 8002d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d5e:	60bb      	str	r3, [r7, #8]
 8002d60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d62:	2301      	movs	r3, #1
 8002d64:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d66:	4b77      	ldr	r3, [pc, #476]	; (8002f44 <HAL_RCC_OscConfig+0x474>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d118      	bne.n	8002da4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d72:	4b74      	ldr	r3, [pc, #464]	; (8002f44 <HAL_RCC_OscConfig+0x474>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a73      	ldr	r2, [pc, #460]	; (8002f44 <HAL_RCC_OscConfig+0x474>)
 8002d78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d7e:	f7fe fa4f 	bl	8001220 <HAL_GetTick>
 8002d82:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d84:	e008      	b.n	8002d98 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d86:	f7fe fa4b 	bl	8001220 <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d901      	bls.n	8002d98 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e10c      	b.n	8002fb2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d98:	4b6a      	ldr	r3, [pc, #424]	; (8002f44 <HAL_RCC_OscConfig+0x474>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d0f0      	beq.n	8002d86 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d106      	bne.n	8002dba <HAL_RCC_OscConfig+0x2ea>
 8002dac:	4b64      	ldr	r3, [pc, #400]	; (8002f40 <HAL_RCC_OscConfig+0x470>)
 8002dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db0:	4a63      	ldr	r2, [pc, #396]	; (8002f40 <HAL_RCC_OscConfig+0x470>)
 8002db2:	f043 0301 	orr.w	r3, r3, #1
 8002db6:	6713      	str	r3, [r2, #112]	; 0x70
 8002db8:	e01c      	b.n	8002df4 <HAL_RCC_OscConfig+0x324>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	2b05      	cmp	r3, #5
 8002dc0:	d10c      	bne.n	8002ddc <HAL_RCC_OscConfig+0x30c>
 8002dc2:	4b5f      	ldr	r3, [pc, #380]	; (8002f40 <HAL_RCC_OscConfig+0x470>)
 8002dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dc6:	4a5e      	ldr	r2, [pc, #376]	; (8002f40 <HAL_RCC_OscConfig+0x470>)
 8002dc8:	f043 0304 	orr.w	r3, r3, #4
 8002dcc:	6713      	str	r3, [r2, #112]	; 0x70
 8002dce:	4b5c      	ldr	r3, [pc, #368]	; (8002f40 <HAL_RCC_OscConfig+0x470>)
 8002dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd2:	4a5b      	ldr	r2, [pc, #364]	; (8002f40 <HAL_RCC_OscConfig+0x470>)
 8002dd4:	f043 0301 	orr.w	r3, r3, #1
 8002dd8:	6713      	str	r3, [r2, #112]	; 0x70
 8002dda:	e00b      	b.n	8002df4 <HAL_RCC_OscConfig+0x324>
 8002ddc:	4b58      	ldr	r3, [pc, #352]	; (8002f40 <HAL_RCC_OscConfig+0x470>)
 8002dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de0:	4a57      	ldr	r2, [pc, #348]	; (8002f40 <HAL_RCC_OscConfig+0x470>)
 8002de2:	f023 0301 	bic.w	r3, r3, #1
 8002de6:	6713      	str	r3, [r2, #112]	; 0x70
 8002de8:	4b55      	ldr	r3, [pc, #340]	; (8002f40 <HAL_RCC_OscConfig+0x470>)
 8002dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dec:	4a54      	ldr	r2, [pc, #336]	; (8002f40 <HAL_RCC_OscConfig+0x470>)
 8002dee:	f023 0304 	bic.w	r3, r3, #4
 8002df2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d015      	beq.n	8002e28 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dfc:	f7fe fa10 	bl	8001220 <HAL_GetTick>
 8002e00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e02:	e00a      	b.n	8002e1a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e04:	f7fe fa0c 	bl	8001220 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d901      	bls.n	8002e1a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e0cb      	b.n	8002fb2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e1a:	4b49      	ldr	r3, [pc, #292]	; (8002f40 <HAL_RCC_OscConfig+0x470>)
 8002e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d0ee      	beq.n	8002e04 <HAL_RCC_OscConfig+0x334>
 8002e26:	e014      	b.n	8002e52 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e28:	f7fe f9fa 	bl	8001220 <HAL_GetTick>
 8002e2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e2e:	e00a      	b.n	8002e46 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e30:	f7fe f9f6 	bl	8001220 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e0b5      	b.n	8002fb2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e46:	4b3e      	ldr	r3, [pc, #248]	; (8002f40 <HAL_RCC_OscConfig+0x470>)
 8002e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e4a:	f003 0302 	and.w	r3, r3, #2
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d1ee      	bne.n	8002e30 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e52:	7dfb      	ldrb	r3, [r7, #23]
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d105      	bne.n	8002e64 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e58:	4b39      	ldr	r3, [pc, #228]	; (8002f40 <HAL_RCC_OscConfig+0x470>)
 8002e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5c:	4a38      	ldr	r2, [pc, #224]	; (8002f40 <HAL_RCC_OscConfig+0x470>)
 8002e5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e62:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	699b      	ldr	r3, [r3, #24]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	f000 80a1 	beq.w	8002fb0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e6e:	4b34      	ldr	r3, [pc, #208]	; (8002f40 <HAL_RCC_OscConfig+0x470>)
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	f003 030c 	and.w	r3, r3, #12
 8002e76:	2b08      	cmp	r3, #8
 8002e78:	d05c      	beq.n	8002f34 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d141      	bne.n	8002f06 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e82:	4b31      	ldr	r3, [pc, #196]	; (8002f48 <HAL_RCC_OscConfig+0x478>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e88:	f7fe f9ca 	bl	8001220 <HAL_GetTick>
 8002e8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e8e:	e008      	b.n	8002ea2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e90:	f7fe f9c6 	bl	8001220 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e087      	b.n	8002fb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ea2:	4b27      	ldr	r3, [pc, #156]	; (8002f40 <HAL_RCC_OscConfig+0x470>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d1f0      	bne.n	8002e90 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	69da      	ldr	r2, [r3, #28]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a1b      	ldr	r3, [r3, #32]
 8002eb6:	431a      	orrs	r2, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebc:	019b      	lsls	r3, r3, #6
 8002ebe:	431a      	orrs	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec4:	085b      	lsrs	r3, r3, #1
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	041b      	lsls	r3, r3, #16
 8002eca:	431a      	orrs	r2, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed0:	061b      	lsls	r3, r3, #24
 8002ed2:	491b      	ldr	r1, [pc, #108]	; (8002f40 <HAL_RCC_OscConfig+0x470>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ed8:	4b1b      	ldr	r3, [pc, #108]	; (8002f48 <HAL_RCC_OscConfig+0x478>)
 8002eda:	2201      	movs	r2, #1
 8002edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ede:	f7fe f99f 	bl	8001220 <HAL_GetTick>
 8002ee2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ee4:	e008      	b.n	8002ef8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ee6:	f7fe f99b 	bl	8001220 <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d901      	bls.n	8002ef8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e05c      	b.n	8002fb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ef8:	4b11      	ldr	r3, [pc, #68]	; (8002f40 <HAL_RCC_OscConfig+0x470>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d0f0      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x416>
 8002f04:	e054      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f06:	4b10      	ldr	r3, [pc, #64]	; (8002f48 <HAL_RCC_OscConfig+0x478>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f0c:	f7fe f988 	bl	8001220 <HAL_GetTick>
 8002f10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f12:	e008      	b.n	8002f26 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f14:	f7fe f984 	bl	8001220 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d901      	bls.n	8002f26 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e045      	b.n	8002fb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f26:	4b06      	ldr	r3, [pc, #24]	; (8002f40 <HAL_RCC_OscConfig+0x470>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d1f0      	bne.n	8002f14 <HAL_RCC_OscConfig+0x444>
 8002f32:	e03d      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	699b      	ldr	r3, [r3, #24]
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d107      	bne.n	8002f4c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e038      	b.n	8002fb2 <HAL_RCC_OscConfig+0x4e2>
 8002f40:	40023800 	.word	0x40023800
 8002f44:	40007000 	.word	0x40007000
 8002f48:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f4c:	4b1b      	ldr	r3, [pc, #108]	; (8002fbc <HAL_RCC_OscConfig+0x4ec>)
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	699b      	ldr	r3, [r3, #24]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d028      	beq.n	8002fac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d121      	bne.n	8002fac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d11a      	bne.n	8002fac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f76:	68fa      	ldr	r2, [r7, #12]
 8002f78:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f82:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d111      	bne.n	8002fac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f92:	085b      	lsrs	r3, r3, #1
 8002f94:	3b01      	subs	r3, #1
 8002f96:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d107      	bne.n	8002fac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d001      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e000      	b.n	8002fb2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3718      	adds	r7, #24
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	40023800 	.word	0x40023800

08002fc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d101      	bne.n	8002fd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e0cc      	b.n	800316e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fd4:	4b68      	ldr	r3, [pc, #416]	; (8003178 <HAL_RCC_ClockConfig+0x1b8>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0307 	and.w	r3, r3, #7
 8002fdc:	683a      	ldr	r2, [r7, #0]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d90c      	bls.n	8002ffc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fe2:	4b65      	ldr	r3, [pc, #404]	; (8003178 <HAL_RCC_ClockConfig+0x1b8>)
 8002fe4:	683a      	ldr	r2, [r7, #0]
 8002fe6:	b2d2      	uxtb	r2, r2
 8002fe8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fea:	4b63      	ldr	r3, [pc, #396]	; (8003178 <HAL_RCC_ClockConfig+0x1b8>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0307 	and.w	r3, r3, #7
 8002ff2:	683a      	ldr	r2, [r7, #0]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d001      	beq.n	8002ffc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e0b8      	b.n	800316e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0302 	and.w	r3, r3, #2
 8003004:	2b00      	cmp	r3, #0
 8003006:	d020      	beq.n	800304a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0304 	and.w	r3, r3, #4
 8003010:	2b00      	cmp	r3, #0
 8003012:	d005      	beq.n	8003020 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003014:	4b59      	ldr	r3, [pc, #356]	; (800317c <HAL_RCC_ClockConfig+0x1bc>)
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	4a58      	ldr	r2, [pc, #352]	; (800317c <HAL_RCC_ClockConfig+0x1bc>)
 800301a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800301e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0308 	and.w	r3, r3, #8
 8003028:	2b00      	cmp	r3, #0
 800302a:	d005      	beq.n	8003038 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800302c:	4b53      	ldr	r3, [pc, #332]	; (800317c <HAL_RCC_ClockConfig+0x1bc>)
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	4a52      	ldr	r2, [pc, #328]	; (800317c <HAL_RCC_ClockConfig+0x1bc>)
 8003032:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003036:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003038:	4b50      	ldr	r3, [pc, #320]	; (800317c <HAL_RCC_ClockConfig+0x1bc>)
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	494d      	ldr	r1, [pc, #308]	; (800317c <HAL_RCC_ClockConfig+0x1bc>)
 8003046:	4313      	orrs	r3, r2
 8003048:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0301 	and.w	r3, r3, #1
 8003052:	2b00      	cmp	r3, #0
 8003054:	d044      	beq.n	80030e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	2b01      	cmp	r3, #1
 800305c:	d107      	bne.n	800306e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800305e:	4b47      	ldr	r3, [pc, #284]	; (800317c <HAL_RCC_ClockConfig+0x1bc>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d119      	bne.n	800309e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e07f      	b.n	800316e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	2b02      	cmp	r3, #2
 8003074:	d003      	beq.n	800307e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800307a:	2b03      	cmp	r3, #3
 800307c:	d107      	bne.n	800308e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800307e:	4b3f      	ldr	r3, [pc, #252]	; (800317c <HAL_RCC_ClockConfig+0x1bc>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d109      	bne.n	800309e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e06f      	b.n	800316e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800308e:	4b3b      	ldr	r3, [pc, #236]	; (800317c <HAL_RCC_ClockConfig+0x1bc>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d101      	bne.n	800309e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e067      	b.n	800316e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800309e:	4b37      	ldr	r3, [pc, #220]	; (800317c <HAL_RCC_ClockConfig+0x1bc>)
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f023 0203 	bic.w	r2, r3, #3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	4934      	ldr	r1, [pc, #208]	; (800317c <HAL_RCC_ClockConfig+0x1bc>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030b0:	f7fe f8b6 	bl	8001220 <HAL_GetTick>
 80030b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030b6:	e00a      	b.n	80030ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030b8:	f7fe f8b2 	bl	8001220 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e04f      	b.n	800316e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ce:	4b2b      	ldr	r3, [pc, #172]	; (800317c <HAL_RCC_ClockConfig+0x1bc>)
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	f003 020c 	and.w	r2, r3, #12
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	429a      	cmp	r2, r3
 80030de:	d1eb      	bne.n	80030b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030e0:	4b25      	ldr	r3, [pc, #148]	; (8003178 <HAL_RCC_ClockConfig+0x1b8>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0307 	and.w	r3, r3, #7
 80030e8:	683a      	ldr	r2, [r7, #0]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d20c      	bcs.n	8003108 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ee:	4b22      	ldr	r3, [pc, #136]	; (8003178 <HAL_RCC_ClockConfig+0x1b8>)
 80030f0:	683a      	ldr	r2, [r7, #0]
 80030f2:	b2d2      	uxtb	r2, r2
 80030f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030f6:	4b20      	ldr	r3, [pc, #128]	; (8003178 <HAL_RCC_ClockConfig+0x1b8>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0307 	and.w	r3, r3, #7
 80030fe:	683a      	ldr	r2, [r7, #0]
 8003100:	429a      	cmp	r2, r3
 8003102:	d001      	beq.n	8003108 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e032      	b.n	800316e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0304 	and.w	r3, r3, #4
 8003110:	2b00      	cmp	r3, #0
 8003112:	d008      	beq.n	8003126 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003114:	4b19      	ldr	r3, [pc, #100]	; (800317c <HAL_RCC_ClockConfig+0x1bc>)
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	4916      	ldr	r1, [pc, #88]	; (800317c <HAL_RCC_ClockConfig+0x1bc>)
 8003122:	4313      	orrs	r3, r2
 8003124:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0308 	and.w	r3, r3, #8
 800312e:	2b00      	cmp	r3, #0
 8003130:	d009      	beq.n	8003146 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003132:	4b12      	ldr	r3, [pc, #72]	; (800317c <HAL_RCC_ClockConfig+0x1bc>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	00db      	lsls	r3, r3, #3
 8003140:	490e      	ldr	r1, [pc, #56]	; (800317c <HAL_RCC_ClockConfig+0x1bc>)
 8003142:	4313      	orrs	r3, r2
 8003144:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003146:	f000 f821 	bl	800318c <HAL_RCC_GetSysClockFreq>
 800314a:	4602      	mov	r2, r0
 800314c:	4b0b      	ldr	r3, [pc, #44]	; (800317c <HAL_RCC_ClockConfig+0x1bc>)
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	091b      	lsrs	r3, r3, #4
 8003152:	f003 030f 	and.w	r3, r3, #15
 8003156:	490a      	ldr	r1, [pc, #40]	; (8003180 <HAL_RCC_ClockConfig+0x1c0>)
 8003158:	5ccb      	ldrb	r3, [r1, r3]
 800315a:	fa22 f303 	lsr.w	r3, r2, r3
 800315e:	4a09      	ldr	r2, [pc, #36]	; (8003184 <HAL_RCC_ClockConfig+0x1c4>)
 8003160:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003162:	4b09      	ldr	r3, [pc, #36]	; (8003188 <HAL_RCC_ClockConfig+0x1c8>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4618      	mov	r0, r3
 8003168:	f7fe f816 	bl	8001198 <HAL_InitTick>

  return HAL_OK;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3710      	adds	r7, #16
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	40023c00 	.word	0x40023c00
 800317c:	40023800 	.word	0x40023800
 8003180:	08004adc 	.word	0x08004adc
 8003184:	20000000 	.word	0x20000000
 8003188:	20000004 	.word	0x20000004

0800318c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800318c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003190:	b090      	sub	sp, #64	; 0x40
 8003192:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003194:	2300      	movs	r3, #0
 8003196:	637b      	str	r3, [r7, #52]	; 0x34
 8003198:	2300      	movs	r3, #0
 800319a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800319c:	2300      	movs	r3, #0
 800319e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80031a0:	2300      	movs	r3, #0
 80031a2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031a4:	4b59      	ldr	r3, [pc, #356]	; (800330c <HAL_RCC_GetSysClockFreq+0x180>)
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	f003 030c 	and.w	r3, r3, #12
 80031ac:	2b08      	cmp	r3, #8
 80031ae:	d00d      	beq.n	80031cc <HAL_RCC_GetSysClockFreq+0x40>
 80031b0:	2b08      	cmp	r3, #8
 80031b2:	f200 80a1 	bhi.w	80032f8 <HAL_RCC_GetSysClockFreq+0x16c>
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d002      	beq.n	80031c0 <HAL_RCC_GetSysClockFreq+0x34>
 80031ba:	2b04      	cmp	r3, #4
 80031bc:	d003      	beq.n	80031c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80031be:	e09b      	b.n	80032f8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031c0:	4b53      	ldr	r3, [pc, #332]	; (8003310 <HAL_RCC_GetSysClockFreq+0x184>)
 80031c2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80031c4:	e09b      	b.n	80032fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031c6:	4b53      	ldr	r3, [pc, #332]	; (8003314 <HAL_RCC_GetSysClockFreq+0x188>)
 80031c8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80031ca:	e098      	b.n	80032fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031cc:	4b4f      	ldr	r3, [pc, #316]	; (800330c <HAL_RCC_GetSysClockFreq+0x180>)
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031d4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031d6:	4b4d      	ldr	r3, [pc, #308]	; (800330c <HAL_RCC_GetSysClockFreq+0x180>)
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d028      	beq.n	8003234 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031e2:	4b4a      	ldr	r3, [pc, #296]	; (800330c <HAL_RCC_GetSysClockFreq+0x180>)
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	099b      	lsrs	r3, r3, #6
 80031e8:	2200      	movs	r2, #0
 80031ea:	623b      	str	r3, [r7, #32]
 80031ec:	627a      	str	r2, [r7, #36]	; 0x24
 80031ee:	6a3b      	ldr	r3, [r7, #32]
 80031f0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80031f4:	2100      	movs	r1, #0
 80031f6:	4b47      	ldr	r3, [pc, #284]	; (8003314 <HAL_RCC_GetSysClockFreq+0x188>)
 80031f8:	fb03 f201 	mul.w	r2, r3, r1
 80031fc:	2300      	movs	r3, #0
 80031fe:	fb00 f303 	mul.w	r3, r0, r3
 8003202:	4413      	add	r3, r2
 8003204:	4a43      	ldr	r2, [pc, #268]	; (8003314 <HAL_RCC_GetSysClockFreq+0x188>)
 8003206:	fba0 1202 	umull	r1, r2, r0, r2
 800320a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800320c:	460a      	mov	r2, r1
 800320e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003210:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003212:	4413      	add	r3, r2
 8003214:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003218:	2200      	movs	r2, #0
 800321a:	61bb      	str	r3, [r7, #24]
 800321c:	61fa      	str	r2, [r7, #28]
 800321e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003222:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003226:	f7fd f823 	bl	8000270 <__aeabi_uldivmod>
 800322a:	4602      	mov	r2, r0
 800322c:	460b      	mov	r3, r1
 800322e:	4613      	mov	r3, r2
 8003230:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003232:	e053      	b.n	80032dc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003234:	4b35      	ldr	r3, [pc, #212]	; (800330c <HAL_RCC_GetSysClockFreq+0x180>)
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	099b      	lsrs	r3, r3, #6
 800323a:	2200      	movs	r2, #0
 800323c:	613b      	str	r3, [r7, #16]
 800323e:	617a      	str	r2, [r7, #20]
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003246:	f04f 0b00 	mov.w	fp, #0
 800324a:	4652      	mov	r2, sl
 800324c:	465b      	mov	r3, fp
 800324e:	f04f 0000 	mov.w	r0, #0
 8003252:	f04f 0100 	mov.w	r1, #0
 8003256:	0159      	lsls	r1, r3, #5
 8003258:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800325c:	0150      	lsls	r0, r2, #5
 800325e:	4602      	mov	r2, r0
 8003260:	460b      	mov	r3, r1
 8003262:	ebb2 080a 	subs.w	r8, r2, sl
 8003266:	eb63 090b 	sbc.w	r9, r3, fp
 800326a:	f04f 0200 	mov.w	r2, #0
 800326e:	f04f 0300 	mov.w	r3, #0
 8003272:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003276:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800327a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800327e:	ebb2 0408 	subs.w	r4, r2, r8
 8003282:	eb63 0509 	sbc.w	r5, r3, r9
 8003286:	f04f 0200 	mov.w	r2, #0
 800328a:	f04f 0300 	mov.w	r3, #0
 800328e:	00eb      	lsls	r3, r5, #3
 8003290:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003294:	00e2      	lsls	r2, r4, #3
 8003296:	4614      	mov	r4, r2
 8003298:	461d      	mov	r5, r3
 800329a:	eb14 030a 	adds.w	r3, r4, sl
 800329e:	603b      	str	r3, [r7, #0]
 80032a0:	eb45 030b 	adc.w	r3, r5, fp
 80032a4:	607b      	str	r3, [r7, #4]
 80032a6:	f04f 0200 	mov.w	r2, #0
 80032aa:	f04f 0300 	mov.w	r3, #0
 80032ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80032b2:	4629      	mov	r1, r5
 80032b4:	028b      	lsls	r3, r1, #10
 80032b6:	4621      	mov	r1, r4
 80032b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032bc:	4621      	mov	r1, r4
 80032be:	028a      	lsls	r2, r1, #10
 80032c0:	4610      	mov	r0, r2
 80032c2:	4619      	mov	r1, r3
 80032c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032c6:	2200      	movs	r2, #0
 80032c8:	60bb      	str	r3, [r7, #8]
 80032ca:	60fa      	str	r2, [r7, #12]
 80032cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032d0:	f7fc ffce 	bl	8000270 <__aeabi_uldivmod>
 80032d4:	4602      	mov	r2, r0
 80032d6:	460b      	mov	r3, r1
 80032d8:	4613      	mov	r3, r2
 80032da:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80032dc:	4b0b      	ldr	r3, [pc, #44]	; (800330c <HAL_RCC_GetSysClockFreq+0x180>)
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	0c1b      	lsrs	r3, r3, #16
 80032e2:	f003 0303 	and.w	r3, r3, #3
 80032e6:	3301      	adds	r3, #1
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80032ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80032ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80032f6:	e002      	b.n	80032fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032f8:	4b05      	ldr	r3, [pc, #20]	; (8003310 <HAL_RCC_GetSysClockFreq+0x184>)
 80032fa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80032fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003300:	4618      	mov	r0, r3
 8003302:	3740      	adds	r7, #64	; 0x40
 8003304:	46bd      	mov	sp, r7
 8003306:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800330a:	bf00      	nop
 800330c:	40023800 	.word	0x40023800
 8003310:	00f42400 	.word	0x00f42400
 8003314:	017d7840 	.word	0x017d7840

08003318 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800331c:	4b03      	ldr	r3, [pc, #12]	; (800332c <HAL_RCC_GetHCLKFreq+0x14>)
 800331e:	681b      	ldr	r3, [r3, #0]
}
 8003320:	4618      	mov	r0, r3
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	20000000 	.word	0x20000000

08003330 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003334:	f7ff fff0 	bl	8003318 <HAL_RCC_GetHCLKFreq>
 8003338:	4602      	mov	r2, r0
 800333a:	4b05      	ldr	r3, [pc, #20]	; (8003350 <HAL_RCC_GetPCLK1Freq+0x20>)
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	0a9b      	lsrs	r3, r3, #10
 8003340:	f003 0307 	and.w	r3, r3, #7
 8003344:	4903      	ldr	r1, [pc, #12]	; (8003354 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003346:	5ccb      	ldrb	r3, [r1, r3]
 8003348:	fa22 f303 	lsr.w	r3, r2, r3
}
 800334c:	4618      	mov	r0, r3
 800334e:	bd80      	pop	{r7, pc}
 8003350:	40023800 	.word	0x40023800
 8003354:	08004aec 	.word	0x08004aec

08003358 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800335c:	f7ff ffdc 	bl	8003318 <HAL_RCC_GetHCLKFreq>
 8003360:	4602      	mov	r2, r0
 8003362:	4b05      	ldr	r3, [pc, #20]	; (8003378 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	0b5b      	lsrs	r3, r3, #13
 8003368:	f003 0307 	and.w	r3, r3, #7
 800336c:	4903      	ldr	r1, [pc, #12]	; (800337c <HAL_RCC_GetPCLK2Freq+0x24>)
 800336e:	5ccb      	ldrb	r3, [r1, r3]
 8003370:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003374:	4618      	mov	r0, r3
 8003376:	bd80      	pop	{r7, pc}
 8003378:	40023800 	.word	0x40023800
 800337c:	08004aec 	.word	0x08004aec

08003380 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d101      	bne.n	8003392 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e03f      	b.n	8003412 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003398:	b2db      	uxtb	r3, r3
 800339a:	2b00      	cmp	r3, #0
 800339c:	d106      	bne.n	80033ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f7fd fd6e 	bl	8000e88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2224      	movs	r2, #36	; 0x24
 80033b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	68da      	ldr	r2, [r3, #12]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f000 f829 	bl	800341c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	691a      	ldr	r2, [r3, #16]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	695a      	ldr	r2, [r3, #20]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	68da      	ldr	r2, [r3, #12]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2220      	movs	r2, #32
 8003404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2220      	movs	r2, #32
 800340c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	3708      	adds	r7, #8
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
	...

0800341c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800341c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003420:	b0c0      	sub	sp, #256	; 0x100
 8003422:	af00      	add	r7, sp, #0
 8003424:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	691b      	ldr	r3, [r3, #16]
 8003430:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003438:	68d9      	ldr	r1, [r3, #12]
 800343a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	ea40 0301 	orr.w	r3, r0, r1
 8003444:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003446:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800344a:	689a      	ldr	r2, [r3, #8]
 800344c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	431a      	orrs	r2, r3
 8003454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	431a      	orrs	r2, r3
 800345c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003460:	69db      	ldr	r3, [r3, #28]
 8003462:	4313      	orrs	r3, r2
 8003464:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003474:	f021 010c 	bic.w	r1, r1, #12
 8003478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003482:	430b      	orrs	r3, r1
 8003484:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003486:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	695b      	ldr	r3, [r3, #20]
 800348e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003496:	6999      	ldr	r1, [r3, #24]
 8003498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	ea40 0301 	orr.w	r3, r0, r1
 80034a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80034a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	4b8f      	ldr	r3, [pc, #572]	; (80036e8 <UART_SetConfig+0x2cc>)
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d005      	beq.n	80034bc <UART_SetConfig+0xa0>
 80034b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	4b8d      	ldr	r3, [pc, #564]	; (80036ec <UART_SetConfig+0x2d0>)
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d104      	bne.n	80034c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80034bc:	f7ff ff4c 	bl	8003358 <HAL_RCC_GetPCLK2Freq>
 80034c0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80034c4:	e003      	b.n	80034ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80034c6:	f7ff ff33 	bl	8003330 <HAL_RCC_GetPCLK1Freq>
 80034ca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034d2:	69db      	ldr	r3, [r3, #28]
 80034d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034d8:	f040 810c 	bne.w	80036f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80034dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034e0:	2200      	movs	r2, #0
 80034e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80034e6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80034ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80034ee:	4622      	mov	r2, r4
 80034f0:	462b      	mov	r3, r5
 80034f2:	1891      	adds	r1, r2, r2
 80034f4:	65b9      	str	r1, [r7, #88]	; 0x58
 80034f6:	415b      	adcs	r3, r3
 80034f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80034fe:	4621      	mov	r1, r4
 8003500:	eb12 0801 	adds.w	r8, r2, r1
 8003504:	4629      	mov	r1, r5
 8003506:	eb43 0901 	adc.w	r9, r3, r1
 800350a:	f04f 0200 	mov.w	r2, #0
 800350e:	f04f 0300 	mov.w	r3, #0
 8003512:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003516:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800351a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800351e:	4690      	mov	r8, r2
 8003520:	4699      	mov	r9, r3
 8003522:	4623      	mov	r3, r4
 8003524:	eb18 0303 	adds.w	r3, r8, r3
 8003528:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800352c:	462b      	mov	r3, r5
 800352e:	eb49 0303 	adc.w	r3, r9, r3
 8003532:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003542:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003546:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800354a:	460b      	mov	r3, r1
 800354c:	18db      	adds	r3, r3, r3
 800354e:	653b      	str	r3, [r7, #80]	; 0x50
 8003550:	4613      	mov	r3, r2
 8003552:	eb42 0303 	adc.w	r3, r2, r3
 8003556:	657b      	str	r3, [r7, #84]	; 0x54
 8003558:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800355c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003560:	f7fc fe86 	bl	8000270 <__aeabi_uldivmod>
 8003564:	4602      	mov	r2, r0
 8003566:	460b      	mov	r3, r1
 8003568:	4b61      	ldr	r3, [pc, #388]	; (80036f0 <UART_SetConfig+0x2d4>)
 800356a:	fba3 2302 	umull	r2, r3, r3, r2
 800356e:	095b      	lsrs	r3, r3, #5
 8003570:	011c      	lsls	r4, r3, #4
 8003572:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003576:	2200      	movs	r2, #0
 8003578:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800357c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003580:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003584:	4642      	mov	r2, r8
 8003586:	464b      	mov	r3, r9
 8003588:	1891      	adds	r1, r2, r2
 800358a:	64b9      	str	r1, [r7, #72]	; 0x48
 800358c:	415b      	adcs	r3, r3
 800358e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003590:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003594:	4641      	mov	r1, r8
 8003596:	eb12 0a01 	adds.w	sl, r2, r1
 800359a:	4649      	mov	r1, r9
 800359c:	eb43 0b01 	adc.w	fp, r3, r1
 80035a0:	f04f 0200 	mov.w	r2, #0
 80035a4:	f04f 0300 	mov.w	r3, #0
 80035a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80035ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80035b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035b4:	4692      	mov	sl, r2
 80035b6:	469b      	mov	fp, r3
 80035b8:	4643      	mov	r3, r8
 80035ba:	eb1a 0303 	adds.w	r3, sl, r3
 80035be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80035c2:	464b      	mov	r3, r9
 80035c4:	eb4b 0303 	adc.w	r3, fp, r3
 80035c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80035cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80035d8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80035dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80035e0:	460b      	mov	r3, r1
 80035e2:	18db      	adds	r3, r3, r3
 80035e4:	643b      	str	r3, [r7, #64]	; 0x40
 80035e6:	4613      	mov	r3, r2
 80035e8:	eb42 0303 	adc.w	r3, r2, r3
 80035ec:	647b      	str	r3, [r7, #68]	; 0x44
 80035ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80035f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80035f6:	f7fc fe3b 	bl	8000270 <__aeabi_uldivmod>
 80035fa:	4602      	mov	r2, r0
 80035fc:	460b      	mov	r3, r1
 80035fe:	4611      	mov	r1, r2
 8003600:	4b3b      	ldr	r3, [pc, #236]	; (80036f0 <UART_SetConfig+0x2d4>)
 8003602:	fba3 2301 	umull	r2, r3, r3, r1
 8003606:	095b      	lsrs	r3, r3, #5
 8003608:	2264      	movs	r2, #100	; 0x64
 800360a:	fb02 f303 	mul.w	r3, r2, r3
 800360e:	1acb      	subs	r3, r1, r3
 8003610:	00db      	lsls	r3, r3, #3
 8003612:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003616:	4b36      	ldr	r3, [pc, #216]	; (80036f0 <UART_SetConfig+0x2d4>)
 8003618:	fba3 2302 	umull	r2, r3, r3, r2
 800361c:	095b      	lsrs	r3, r3, #5
 800361e:	005b      	lsls	r3, r3, #1
 8003620:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003624:	441c      	add	r4, r3
 8003626:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800362a:	2200      	movs	r2, #0
 800362c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003630:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003634:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003638:	4642      	mov	r2, r8
 800363a:	464b      	mov	r3, r9
 800363c:	1891      	adds	r1, r2, r2
 800363e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003640:	415b      	adcs	r3, r3
 8003642:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003644:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003648:	4641      	mov	r1, r8
 800364a:	1851      	adds	r1, r2, r1
 800364c:	6339      	str	r1, [r7, #48]	; 0x30
 800364e:	4649      	mov	r1, r9
 8003650:	414b      	adcs	r3, r1
 8003652:	637b      	str	r3, [r7, #52]	; 0x34
 8003654:	f04f 0200 	mov.w	r2, #0
 8003658:	f04f 0300 	mov.w	r3, #0
 800365c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003660:	4659      	mov	r1, fp
 8003662:	00cb      	lsls	r3, r1, #3
 8003664:	4651      	mov	r1, sl
 8003666:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800366a:	4651      	mov	r1, sl
 800366c:	00ca      	lsls	r2, r1, #3
 800366e:	4610      	mov	r0, r2
 8003670:	4619      	mov	r1, r3
 8003672:	4603      	mov	r3, r0
 8003674:	4642      	mov	r2, r8
 8003676:	189b      	adds	r3, r3, r2
 8003678:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800367c:	464b      	mov	r3, r9
 800367e:	460a      	mov	r2, r1
 8003680:	eb42 0303 	adc.w	r3, r2, r3
 8003684:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003694:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003698:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800369c:	460b      	mov	r3, r1
 800369e:	18db      	adds	r3, r3, r3
 80036a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80036a2:	4613      	mov	r3, r2
 80036a4:	eb42 0303 	adc.w	r3, r2, r3
 80036a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80036ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80036b2:	f7fc fddd 	bl	8000270 <__aeabi_uldivmod>
 80036b6:	4602      	mov	r2, r0
 80036b8:	460b      	mov	r3, r1
 80036ba:	4b0d      	ldr	r3, [pc, #52]	; (80036f0 <UART_SetConfig+0x2d4>)
 80036bc:	fba3 1302 	umull	r1, r3, r3, r2
 80036c0:	095b      	lsrs	r3, r3, #5
 80036c2:	2164      	movs	r1, #100	; 0x64
 80036c4:	fb01 f303 	mul.w	r3, r1, r3
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	00db      	lsls	r3, r3, #3
 80036cc:	3332      	adds	r3, #50	; 0x32
 80036ce:	4a08      	ldr	r2, [pc, #32]	; (80036f0 <UART_SetConfig+0x2d4>)
 80036d0:	fba2 2303 	umull	r2, r3, r2, r3
 80036d4:	095b      	lsrs	r3, r3, #5
 80036d6:	f003 0207 	and.w	r2, r3, #7
 80036da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4422      	add	r2, r4
 80036e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80036e4:	e105      	b.n	80038f2 <UART_SetConfig+0x4d6>
 80036e6:	bf00      	nop
 80036e8:	40011000 	.word	0x40011000
 80036ec:	40011400 	.word	0x40011400
 80036f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036f8:	2200      	movs	r2, #0
 80036fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80036fe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003702:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003706:	4642      	mov	r2, r8
 8003708:	464b      	mov	r3, r9
 800370a:	1891      	adds	r1, r2, r2
 800370c:	6239      	str	r1, [r7, #32]
 800370e:	415b      	adcs	r3, r3
 8003710:	627b      	str	r3, [r7, #36]	; 0x24
 8003712:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003716:	4641      	mov	r1, r8
 8003718:	1854      	adds	r4, r2, r1
 800371a:	4649      	mov	r1, r9
 800371c:	eb43 0501 	adc.w	r5, r3, r1
 8003720:	f04f 0200 	mov.w	r2, #0
 8003724:	f04f 0300 	mov.w	r3, #0
 8003728:	00eb      	lsls	r3, r5, #3
 800372a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800372e:	00e2      	lsls	r2, r4, #3
 8003730:	4614      	mov	r4, r2
 8003732:	461d      	mov	r5, r3
 8003734:	4643      	mov	r3, r8
 8003736:	18e3      	adds	r3, r4, r3
 8003738:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800373c:	464b      	mov	r3, r9
 800373e:	eb45 0303 	adc.w	r3, r5, r3
 8003742:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003752:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003756:	f04f 0200 	mov.w	r2, #0
 800375a:	f04f 0300 	mov.w	r3, #0
 800375e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003762:	4629      	mov	r1, r5
 8003764:	008b      	lsls	r3, r1, #2
 8003766:	4621      	mov	r1, r4
 8003768:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800376c:	4621      	mov	r1, r4
 800376e:	008a      	lsls	r2, r1, #2
 8003770:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003774:	f7fc fd7c 	bl	8000270 <__aeabi_uldivmod>
 8003778:	4602      	mov	r2, r0
 800377a:	460b      	mov	r3, r1
 800377c:	4b60      	ldr	r3, [pc, #384]	; (8003900 <UART_SetConfig+0x4e4>)
 800377e:	fba3 2302 	umull	r2, r3, r3, r2
 8003782:	095b      	lsrs	r3, r3, #5
 8003784:	011c      	lsls	r4, r3, #4
 8003786:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800378a:	2200      	movs	r2, #0
 800378c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003790:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003794:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003798:	4642      	mov	r2, r8
 800379a:	464b      	mov	r3, r9
 800379c:	1891      	adds	r1, r2, r2
 800379e:	61b9      	str	r1, [r7, #24]
 80037a0:	415b      	adcs	r3, r3
 80037a2:	61fb      	str	r3, [r7, #28]
 80037a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037a8:	4641      	mov	r1, r8
 80037aa:	1851      	adds	r1, r2, r1
 80037ac:	6139      	str	r1, [r7, #16]
 80037ae:	4649      	mov	r1, r9
 80037b0:	414b      	adcs	r3, r1
 80037b2:	617b      	str	r3, [r7, #20]
 80037b4:	f04f 0200 	mov.w	r2, #0
 80037b8:	f04f 0300 	mov.w	r3, #0
 80037bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037c0:	4659      	mov	r1, fp
 80037c2:	00cb      	lsls	r3, r1, #3
 80037c4:	4651      	mov	r1, sl
 80037c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037ca:	4651      	mov	r1, sl
 80037cc:	00ca      	lsls	r2, r1, #3
 80037ce:	4610      	mov	r0, r2
 80037d0:	4619      	mov	r1, r3
 80037d2:	4603      	mov	r3, r0
 80037d4:	4642      	mov	r2, r8
 80037d6:	189b      	adds	r3, r3, r2
 80037d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80037dc:	464b      	mov	r3, r9
 80037de:	460a      	mov	r2, r1
 80037e0:	eb42 0303 	adc.w	r3, r2, r3
 80037e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80037e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	67bb      	str	r3, [r7, #120]	; 0x78
 80037f2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80037f4:	f04f 0200 	mov.w	r2, #0
 80037f8:	f04f 0300 	mov.w	r3, #0
 80037fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003800:	4649      	mov	r1, r9
 8003802:	008b      	lsls	r3, r1, #2
 8003804:	4641      	mov	r1, r8
 8003806:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800380a:	4641      	mov	r1, r8
 800380c:	008a      	lsls	r2, r1, #2
 800380e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003812:	f7fc fd2d 	bl	8000270 <__aeabi_uldivmod>
 8003816:	4602      	mov	r2, r0
 8003818:	460b      	mov	r3, r1
 800381a:	4b39      	ldr	r3, [pc, #228]	; (8003900 <UART_SetConfig+0x4e4>)
 800381c:	fba3 1302 	umull	r1, r3, r3, r2
 8003820:	095b      	lsrs	r3, r3, #5
 8003822:	2164      	movs	r1, #100	; 0x64
 8003824:	fb01 f303 	mul.w	r3, r1, r3
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	011b      	lsls	r3, r3, #4
 800382c:	3332      	adds	r3, #50	; 0x32
 800382e:	4a34      	ldr	r2, [pc, #208]	; (8003900 <UART_SetConfig+0x4e4>)
 8003830:	fba2 2303 	umull	r2, r3, r2, r3
 8003834:	095b      	lsrs	r3, r3, #5
 8003836:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800383a:	441c      	add	r4, r3
 800383c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003840:	2200      	movs	r2, #0
 8003842:	673b      	str	r3, [r7, #112]	; 0x70
 8003844:	677a      	str	r2, [r7, #116]	; 0x74
 8003846:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800384a:	4642      	mov	r2, r8
 800384c:	464b      	mov	r3, r9
 800384e:	1891      	adds	r1, r2, r2
 8003850:	60b9      	str	r1, [r7, #8]
 8003852:	415b      	adcs	r3, r3
 8003854:	60fb      	str	r3, [r7, #12]
 8003856:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800385a:	4641      	mov	r1, r8
 800385c:	1851      	adds	r1, r2, r1
 800385e:	6039      	str	r1, [r7, #0]
 8003860:	4649      	mov	r1, r9
 8003862:	414b      	adcs	r3, r1
 8003864:	607b      	str	r3, [r7, #4]
 8003866:	f04f 0200 	mov.w	r2, #0
 800386a:	f04f 0300 	mov.w	r3, #0
 800386e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003872:	4659      	mov	r1, fp
 8003874:	00cb      	lsls	r3, r1, #3
 8003876:	4651      	mov	r1, sl
 8003878:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800387c:	4651      	mov	r1, sl
 800387e:	00ca      	lsls	r2, r1, #3
 8003880:	4610      	mov	r0, r2
 8003882:	4619      	mov	r1, r3
 8003884:	4603      	mov	r3, r0
 8003886:	4642      	mov	r2, r8
 8003888:	189b      	adds	r3, r3, r2
 800388a:	66bb      	str	r3, [r7, #104]	; 0x68
 800388c:	464b      	mov	r3, r9
 800388e:	460a      	mov	r2, r1
 8003890:	eb42 0303 	adc.w	r3, r2, r3
 8003894:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003896:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	663b      	str	r3, [r7, #96]	; 0x60
 80038a0:	667a      	str	r2, [r7, #100]	; 0x64
 80038a2:	f04f 0200 	mov.w	r2, #0
 80038a6:	f04f 0300 	mov.w	r3, #0
 80038aa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80038ae:	4649      	mov	r1, r9
 80038b0:	008b      	lsls	r3, r1, #2
 80038b2:	4641      	mov	r1, r8
 80038b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038b8:	4641      	mov	r1, r8
 80038ba:	008a      	lsls	r2, r1, #2
 80038bc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80038c0:	f7fc fcd6 	bl	8000270 <__aeabi_uldivmod>
 80038c4:	4602      	mov	r2, r0
 80038c6:	460b      	mov	r3, r1
 80038c8:	4b0d      	ldr	r3, [pc, #52]	; (8003900 <UART_SetConfig+0x4e4>)
 80038ca:	fba3 1302 	umull	r1, r3, r3, r2
 80038ce:	095b      	lsrs	r3, r3, #5
 80038d0:	2164      	movs	r1, #100	; 0x64
 80038d2:	fb01 f303 	mul.w	r3, r1, r3
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	011b      	lsls	r3, r3, #4
 80038da:	3332      	adds	r3, #50	; 0x32
 80038dc:	4a08      	ldr	r2, [pc, #32]	; (8003900 <UART_SetConfig+0x4e4>)
 80038de:	fba2 2303 	umull	r2, r3, r2, r3
 80038e2:	095b      	lsrs	r3, r3, #5
 80038e4:	f003 020f 	and.w	r2, r3, #15
 80038e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4422      	add	r2, r4
 80038f0:	609a      	str	r2, [r3, #8]
}
 80038f2:	bf00      	nop
 80038f4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80038f8:	46bd      	mov	sp, r7
 80038fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038fe:	bf00      	nop
 8003900:	51eb851f 	.word	0x51eb851f

08003904 <__errno>:
 8003904:	4b01      	ldr	r3, [pc, #4]	; (800390c <__errno+0x8>)
 8003906:	6818      	ldr	r0, [r3, #0]
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	2000000c 	.word	0x2000000c

08003910 <__libc_init_array>:
 8003910:	b570      	push	{r4, r5, r6, lr}
 8003912:	4d0d      	ldr	r5, [pc, #52]	; (8003948 <__libc_init_array+0x38>)
 8003914:	4c0d      	ldr	r4, [pc, #52]	; (800394c <__libc_init_array+0x3c>)
 8003916:	1b64      	subs	r4, r4, r5
 8003918:	10a4      	asrs	r4, r4, #2
 800391a:	2600      	movs	r6, #0
 800391c:	42a6      	cmp	r6, r4
 800391e:	d109      	bne.n	8003934 <__libc_init_array+0x24>
 8003920:	4d0b      	ldr	r5, [pc, #44]	; (8003950 <__libc_init_array+0x40>)
 8003922:	4c0c      	ldr	r4, [pc, #48]	; (8003954 <__libc_init_array+0x44>)
 8003924:	f001 f832 	bl	800498c <_init>
 8003928:	1b64      	subs	r4, r4, r5
 800392a:	10a4      	asrs	r4, r4, #2
 800392c:	2600      	movs	r6, #0
 800392e:	42a6      	cmp	r6, r4
 8003930:	d105      	bne.n	800393e <__libc_init_array+0x2e>
 8003932:	bd70      	pop	{r4, r5, r6, pc}
 8003934:	f855 3b04 	ldr.w	r3, [r5], #4
 8003938:	4798      	blx	r3
 800393a:	3601      	adds	r6, #1
 800393c:	e7ee      	b.n	800391c <__libc_init_array+0xc>
 800393e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003942:	4798      	blx	r3
 8003944:	3601      	adds	r6, #1
 8003946:	e7f2      	b.n	800392e <__libc_init_array+0x1e>
 8003948:	08004b94 	.word	0x08004b94
 800394c:	08004b94 	.word	0x08004b94
 8003950:	08004b94 	.word	0x08004b94
 8003954:	08004b98 	.word	0x08004b98

08003958 <memcpy>:
 8003958:	440a      	add	r2, r1
 800395a:	4291      	cmp	r1, r2
 800395c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003960:	d100      	bne.n	8003964 <memcpy+0xc>
 8003962:	4770      	bx	lr
 8003964:	b510      	push	{r4, lr}
 8003966:	f811 4b01 	ldrb.w	r4, [r1], #1
 800396a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800396e:	4291      	cmp	r1, r2
 8003970:	d1f9      	bne.n	8003966 <memcpy+0xe>
 8003972:	bd10      	pop	{r4, pc}

08003974 <memset>:
 8003974:	4402      	add	r2, r0
 8003976:	4603      	mov	r3, r0
 8003978:	4293      	cmp	r3, r2
 800397a:	d100      	bne.n	800397e <memset+0xa>
 800397c:	4770      	bx	lr
 800397e:	f803 1b01 	strb.w	r1, [r3], #1
 8003982:	e7f9      	b.n	8003978 <memset+0x4>

08003984 <iprintf>:
 8003984:	b40f      	push	{r0, r1, r2, r3}
 8003986:	4b0a      	ldr	r3, [pc, #40]	; (80039b0 <iprintf+0x2c>)
 8003988:	b513      	push	{r0, r1, r4, lr}
 800398a:	681c      	ldr	r4, [r3, #0]
 800398c:	b124      	cbz	r4, 8003998 <iprintf+0x14>
 800398e:	69a3      	ldr	r3, [r4, #24]
 8003990:	b913      	cbnz	r3, 8003998 <iprintf+0x14>
 8003992:	4620      	mov	r0, r4
 8003994:	f000 fa5e 	bl	8003e54 <__sinit>
 8003998:	ab05      	add	r3, sp, #20
 800399a:	9a04      	ldr	r2, [sp, #16]
 800399c:	68a1      	ldr	r1, [r4, #8]
 800399e:	9301      	str	r3, [sp, #4]
 80039a0:	4620      	mov	r0, r4
 80039a2:	f000 fc67 	bl	8004274 <_vfiprintf_r>
 80039a6:	b002      	add	sp, #8
 80039a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039ac:	b004      	add	sp, #16
 80039ae:	4770      	bx	lr
 80039b0:	2000000c 	.word	0x2000000c

080039b4 <_puts_r>:
 80039b4:	b570      	push	{r4, r5, r6, lr}
 80039b6:	460e      	mov	r6, r1
 80039b8:	4605      	mov	r5, r0
 80039ba:	b118      	cbz	r0, 80039c4 <_puts_r+0x10>
 80039bc:	6983      	ldr	r3, [r0, #24]
 80039be:	b90b      	cbnz	r3, 80039c4 <_puts_r+0x10>
 80039c0:	f000 fa48 	bl	8003e54 <__sinit>
 80039c4:	69ab      	ldr	r3, [r5, #24]
 80039c6:	68ac      	ldr	r4, [r5, #8]
 80039c8:	b913      	cbnz	r3, 80039d0 <_puts_r+0x1c>
 80039ca:	4628      	mov	r0, r5
 80039cc:	f000 fa42 	bl	8003e54 <__sinit>
 80039d0:	4b2c      	ldr	r3, [pc, #176]	; (8003a84 <_puts_r+0xd0>)
 80039d2:	429c      	cmp	r4, r3
 80039d4:	d120      	bne.n	8003a18 <_puts_r+0x64>
 80039d6:	686c      	ldr	r4, [r5, #4]
 80039d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80039da:	07db      	lsls	r3, r3, #31
 80039dc:	d405      	bmi.n	80039ea <_puts_r+0x36>
 80039de:	89a3      	ldrh	r3, [r4, #12]
 80039e0:	0598      	lsls	r0, r3, #22
 80039e2:	d402      	bmi.n	80039ea <_puts_r+0x36>
 80039e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80039e6:	f000 fad3 	bl	8003f90 <__retarget_lock_acquire_recursive>
 80039ea:	89a3      	ldrh	r3, [r4, #12]
 80039ec:	0719      	lsls	r1, r3, #28
 80039ee:	d51d      	bpl.n	8003a2c <_puts_r+0x78>
 80039f0:	6923      	ldr	r3, [r4, #16]
 80039f2:	b1db      	cbz	r3, 8003a2c <_puts_r+0x78>
 80039f4:	3e01      	subs	r6, #1
 80039f6:	68a3      	ldr	r3, [r4, #8]
 80039f8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80039fc:	3b01      	subs	r3, #1
 80039fe:	60a3      	str	r3, [r4, #8]
 8003a00:	bb39      	cbnz	r1, 8003a52 <_puts_r+0x9e>
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	da38      	bge.n	8003a78 <_puts_r+0xc4>
 8003a06:	4622      	mov	r2, r4
 8003a08:	210a      	movs	r1, #10
 8003a0a:	4628      	mov	r0, r5
 8003a0c:	f000 f848 	bl	8003aa0 <__swbuf_r>
 8003a10:	3001      	adds	r0, #1
 8003a12:	d011      	beq.n	8003a38 <_puts_r+0x84>
 8003a14:	250a      	movs	r5, #10
 8003a16:	e011      	b.n	8003a3c <_puts_r+0x88>
 8003a18:	4b1b      	ldr	r3, [pc, #108]	; (8003a88 <_puts_r+0xd4>)
 8003a1a:	429c      	cmp	r4, r3
 8003a1c:	d101      	bne.n	8003a22 <_puts_r+0x6e>
 8003a1e:	68ac      	ldr	r4, [r5, #8]
 8003a20:	e7da      	b.n	80039d8 <_puts_r+0x24>
 8003a22:	4b1a      	ldr	r3, [pc, #104]	; (8003a8c <_puts_r+0xd8>)
 8003a24:	429c      	cmp	r4, r3
 8003a26:	bf08      	it	eq
 8003a28:	68ec      	ldreq	r4, [r5, #12]
 8003a2a:	e7d5      	b.n	80039d8 <_puts_r+0x24>
 8003a2c:	4621      	mov	r1, r4
 8003a2e:	4628      	mov	r0, r5
 8003a30:	f000 f888 	bl	8003b44 <__swsetup_r>
 8003a34:	2800      	cmp	r0, #0
 8003a36:	d0dd      	beq.n	80039f4 <_puts_r+0x40>
 8003a38:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003a3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003a3e:	07da      	lsls	r2, r3, #31
 8003a40:	d405      	bmi.n	8003a4e <_puts_r+0x9a>
 8003a42:	89a3      	ldrh	r3, [r4, #12]
 8003a44:	059b      	lsls	r3, r3, #22
 8003a46:	d402      	bmi.n	8003a4e <_puts_r+0x9a>
 8003a48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003a4a:	f000 faa2 	bl	8003f92 <__retarget_lock_release_recursive>
 8003a4e:	4628      	mov	r0, r5
 8003a50:	bd70      	pop	{r4, r5, r6, pc}
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	da04      	bge.n	8003a60 <_puts_r+0xac>
 8003a56:	69a2      	ldr	r2, [r4, #24]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	dc06      	bgt.n	8003a6a <_puts_r+0xb6>
 8003a5c:	290a      	cmp	r1, #10
 8003a5e:	d004      	beq.n	8003a6a <_puts_r+0xb6>
 8003a60:	6823      	ldr	r3, [r4, #0]
 8003a62:	1c5a      	adds	r2, r3, #1
 8003a64:	6022      	str	r2, [r4, #0]
 8003a66:	7019      	strb	r1, [r3, #0]
 8003a68:	e7c5      	b.n	80039f6 <_puts_r+0x42>
 8003a6a:	4622      	mov	r2, r4
 8003a6c:	4628      	mov	r0, r5
 8003a6e:	f000 f817 	bl	8003aa0 <__swbuf_r>
 8003a72:	3001      	adds	r0, #1
 8003a74:	d1bf      	bne.n	80039f6 <_puts_r+0x42>
 8003a76:	e7df      	b.n	8003a38 <_puts_r+0x84>
 8003a78:	6823      	ldr	r3, [r4, #0]
 8003a7a:	250a      	movs	r5, #10
 8003a7c:	1c5a      	adds	r2, r3, #1
 8003a7e:	6022      	str	r2, [r4, #0]
 8003a80:	701d      	strb	r5, [r3, #0]
 8003a82:	e7db      	b.n	8003a3c <_puts_r+0x88>
 8003a84:	08004b18 	.word	0x08004b18
 8003a88:	08004b38 	.word	0x08004b38
 8003a8c:	08004af8 	.word	0x08004af8

08003a90 <puts>:
 8003a90:	4b02      	ldr	r3, [pc, #8]	; (8003a9c <puts+0xc>)
 8003a92:	4601      	mov	r1, r0
 8003a94:	6818      	ldr	r0, [r3, #0]
 8003a96:	f7ff bf8d 	b.w	80039b4 <_puts_r>
 8003a9a:	bf00      	nop
 8003a9c:	2000000c 	.word	0x2000000c

08003aa0 <__swbuf_r>:
 8003aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aa2:	460e      	mov	r6, r1
 8003aa4:	4614      	mov	r4, r2
 8003aa6:	4605      	mov	r5, r0
 8003aa8:	b118      	cbz	r0, 8003ab2 <__swbuf_r+0x12>
 8003aaa:	6983      	ldr	r3, [r0, #24]
 8003aac:	b90b      	cbnz	r3, 8003ab2 <__swbuf_r+0x12>
 8003aae:	f000 f9d1 	bl	8003e54 <__sinit>
 8003ab2:	4b21      	ldr	r3, [pc, #132]	; (8003b38 <__swbuf_r+0x98>)
 8003ab4:	429c      	cmp	r4, r3
 8003ab6:	d12b      	bne.n	8003b10 <__swbuf_r+0x70>
 8003ab8:	686c      	ldr	r4, [r5, #4]
 8003aba:	69a3      	ldr	r3, [r4, #24]
 8003abc:	60a3      	str	r3, [r4, #8]
 8003abe:	89a3      	ldrh	r3, [r4, #12]
 8003ac0:	071a      	lsls	r2, r3, #28
 8003ac2:	d52f      	bpl.n	8003b24 <__swbuf_r+0x84>
 8003ac4:	6923      	ldr	r3, [r4, #16]
 8003ac6:	b36b      	cbz	r3, 8003b24 <__swbuf_r+0x84>
 8003ac8:	6923      	ldr	r3, [r4, #16]
 8003aca:	6820      	ldr	r0, [r4, #0]
 8003acc:	1ac0      	subs	r0, r0, r3
 8003ace:	6963      	ldr	r3, [r4, #20]
 8003ad0:	b2f6      	uxtb	r6, r6
 8003ad2:	4283      	cmp	r3, r0
 8003ad4:	4637      	mov	r7, r6
 8003ad6:	dc04      	bgt.n	8003ae2 <__swbuf_r+0x42>
 8003ad8:	4621      	mov	r1, r4
 8003ada:	4628      	mov	r0, r5
 8003adc:	f000 f926 	bl	8003d2c <_fflush_r>
 8003ae0:	bb30      	cbnz	r0, 8003b30 <__swbuf_r+0x90>
 8003ae2:	68a3      	ldr	r3, [r4, #8]
 8003ae4:	3b01      	subs	r3, #1
 8003ae6:	60a3      	str	r3, [r4, #8]
 8003ae8:	6823      	ldr	r3, [r4, #0]
 8003aea:	1c5a      	adds	r2, r3, #1
 8003aec:	6022      	str	r2, [r4, #0]
 8003aee:	701e      	strb	r6, [r3, #0]
 8003af0:	6963      	ldr	r3, [r4, #20]
 8003af2:	3001      	adds	r0, #1
 8003af4:	4283      	cmp	r3, r0
 8003af6:	d004      	beq.n	8003b02 <__swbuf_r+0x62>
 8003af8:	89a3      	ldrh	r3, [r4, #12]
 8003afa:	07db      	lsls	r3, r3, #31
 8003afc:	d506      	bpl.n	8003b0c <__swbuf_r+0x6c>
 8003afe:	2e0a      	cmp	r6, #10
 8003b00:	d104      	bne.n	8003b0c <__swbuf_r+0x6c>
 8003b02:	4621      	mov	r1, r4
 8003b04:	4628      	mov	r0, r5
 8003b06:	f000 f911 	bl	8003d2c <_fflush_r>
 8003b0a:	b988      	cbnz	r0, 8003b30 <__swbuf_r+0x90>
 8003b0c:	4638      	mov	r0, r7
 8003b0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b10:	4b0a      	ldr	r3, [pc, #40]	; (8003b3c <__swbuf_r+0x9c>)
 8003b12:	429c      	cmp	r4, r3
 8003b14:	d101      	bne.n	8003b1a <__swbuf_r+0x7a>
 8003b16:	68ac      	ldr	r4, [r5, #8]
 8003b18:	e7cf      	b.n	8003aba <__swbuf_r+0x1a>
 8003b1a:	4b09      	ldr	r3, [pc, #36]	; (8003b40 <__swbuf_r+0xa0>)
 8003b1c:	429c      	cmp	r4, r3
 8003b1e:	bf08      	it	eq
 8003b20:	68ec      	ldreq	r4, [r5, #12]
 8003b22:	e7ca      	b.n	8003aba <__swbuf_r+0x1a>
 8003b24:	4621      	mov	r1, r4
 8003b26:	4628      	mov	r0, r5
 8003b28:	f000 f80c 	bl	8003b44 <__swsetup_r>
 8003b2c:	2800      	cmp	r0, #0
 8003b2e:	d0cb      	beq.n	8003ac8 <__swbuf_r+0x28>
 8003b30:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003b34:	e7ea      	b.n	8003b0c <__swbuf_r+0x6c>
 8003b36:	bf00      	nop
 8003b38:	08004b18 	.word	0x08004b18
 8003b3c:	08004b38 	.word	0x08004b38
 8003b40:	08004af8 	.word	0x08004af8

08003b44 <__swsetup_r>:
 8003b44:	4b32      	ldr	r3, [pc, #200]	; (8003c10 <__swsetup_r+0xcc>)
 8003b46:	b570      	push	{r4, r5, r6, lr}
 8003b48:	681d      	ldr	r5, [r3, #0]
 8003b4a:	4606      	mov	r6, r0
 8003b4c:	460c      	mov	r4, r1
 8003b4e:	b125      	cbz	r5, 8003b5a <__swsetup_r+0x16>
 8003b50:	69ab      	ldr	r3, [r5, #24]
 8003b52:	b913      	cbnz	r3, 8003b5a <__swsetup_r+0x16>
 8003b54:	4628      	mov	r0, r5
 8003b56:	f000 f97d 	bl	8003e54 <__sinit>
 8003b5a:	4b2e      	ldr	r3, [pc, #184]	; (8003c14 <__swsetup_r+0xd0>)
 8003b5c:	429c      	cmp	r4, r3
 8003b5e:	d10f      	bne.n	8003b80 <__swsetup_r+0x3c>
 8003b60:	686c      	ldr	r4, [r5, #4]
 8003b62:	89a3      	ldrh	r3, [r4, #12]
 8003b64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003b68:	0719      	lsls	r1, r3, #28
 8003b6a:	d42c      	bmi.n	8003bc6 <__swsetup_r+0x82>
 8003b6c:	06dd      	lsls	r5, r3, #27
 8003b6e:	d411      	bmi.n	8003b94 <__swsetup_r+0x50>
 8003b70:	2309      	movs	r3, #9
 8003b72:	6033      	str	r3, [r6, #0]
 8003b74:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003b78:	81a3      	strh	r3, [r4, #12]
 8003b7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b7e:	e03e      	b.n	8003bfe <__swsetup_r+0xba>
 8003b80:	4b25      	ldr	r3, [pc, #148]	; (8003c18 <__swsetup_r+0xd4>)
 8003b82:	429c      	cmp	r4, r3
 8003b84:	d101      	bne.n	8003b8a <__swsetup_r+0x46>
 8003b86:	68ac      	ldr	r4, [r5, #8]
 8003b88:	e7eb      	b.n	8003b62 <__swsetup_r+0x1e>
 8003b8a:	4b24      	ldr	r3, [pc, #144]	; (8003c1c <__swsetup_r+0xd8>)
 8003b8c:	429c      	cmp	r4, r3
 8003b8e:	bf08      	it	eq
 8003b90:	68ec      	ldreq	r4, [r5, #12]
 8003b92:	e7e6      	b.n	8003b62 <__swsetup_r+0x1e>
 8003b94:	0758      	lsls	r0, r3, #29
 8003b96:	d512      	bpl.n	8003bbe <__swsetup_r+0x7a>
 8003b98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003b9a:	b141      	cbz	r1, 8003bae <__swsetup_r+0x6a>
 8003b9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003ba0:	4299      	cmp	r1, r3
 8003ba2:	d002      	beq.n	8003baa <__swsetup_r+0x66>
 8003ba4:	4630      	mov	r0, r6
 8003ba6:	f000 fa5b 	bl	8004060 <_free_r>
 8003baa:	2300      	movs	r3, #0
 8003bac:	6363      	str	r3, [r4, #52]	; 0x34
 8003bae:	89a3      	ldrh	r3, [r4, #12]
 8003bb0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003bb4:	81a3      	strh	r3, [r4, #12]
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	6063      	str	r3, [r4, #4]
 8003bba:	6923      	ldr	r3, [r4, #16]
 8003bbc:	6023      	str	r3, [r4, #0]
 8003bbe:	89a3      	ldrh	r3, [r4, #12]
 8003bc0:	f043 0308 	orr.w	r3, r3, #8
 8003bc4:	81a3      	strh	r3, [r4, #12]
 8003bc6:	6923      	ldr	r3, [r4, #16]
 8003bc8:	b94b      	cbnz	r3, 8003bde <__swsetup_r+0x9a>
 8003bca:	89a3      	ldrh	r3, [r4, #12]
 8003bcc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003bd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bd4:	d003      	beq.n	8003bde <__swsetup_r+0x9a>
 8003bd6:	4621      	mov	r1, r4
 8003bd8:	4630      	mov	r0, r6
 8003bda:	f000 fa01 	bl	8003fe0 <__smakebuf_r>
 8003bde:	89a0      	ldrh	r0, [r4, #12]
 8003be0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003be4:	f010 0301 	ands.w	r3, r0, #1
 8003be8:	d00a      	beq.n	8003c00 <__swsetup_r+0xbc>
 8003bea:	2300      	movs	r3, #0
 8003bec:	60a3      	str	r3, [r4, #8]
 8003bee:	6963      	ldr	r3, [r4, #20]
 8003bf0:	425b      	negs	r3, r3
 8003bf2:	61a3      	str	r3, [r4, #24]
 8003bf4:	6923      	ldr	r3, [r4, #16]
 8003bf6:	b943      	cbnz	r3, 8003c0a <__swsetup_r+0xc6>
 8003bf8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003bfc:	d1ba      	bne.n	8003b74 <__swsetup_r+0x30>
 8003bfe:	bd70      	pop	{r4, r5, r6, pc}
 8003c00:	0781      	lsls	r1, r0, #30
 8003c02:	bf58      	it	pl
 8003c04:	6963      	ldrpl	r3, [r4, #20]
 8003c06:	60a3      	str	r3, [r4, #8]
 8003c08:	e7f4      	b.n	8003bf4 <__swsetup_r+0xb0>
 8003c0a:	2000      	movs	r0, #0
 8003c0c:	e7f7      	b.n	8003bfe <__swsetup_r+0xba>
 8003c0e:	bf00      	nop
 8003c10:	2000000c 	.word	0x2000000c
 8003c14:	08004b18 	.word	0x08004b18
 8003c18:	08004b38 	.word	0x08004b38
 8003c1c:	08004af8 	.word	0x08004af8

08003c20 <__sflush_r>:
 8003c20:	898a      	ldrh	r2, [r1, #12]
 8003c22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c26:	4605      	mov	r5, r0
 8003c28:	0710      	lsls	r0, r2, #28
 8003c2a:	460c      	mov	r4, r1
 8003c2c:	d458      	bmi.n	8003ce0 <__sflush_r+0xc0>
 8003c2e:	684b      	ldr	r3, [r1, #4]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	dc05      	bgt.n	8003c40 <__sflush_r+0x20>
 8003c34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	dc02      	bgt.n	8003c40 <__sflush_r+0x20>
 8003c3a:	2000      	movs	r0, #0
 8003c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003c42:	2e00      	cmp	r6, #0
 8003c44:	d0f9      	beq.n	8003c3a <__sflush_r+0x1a>
 8003c46:	2300      	movs	r3, #0
 8003c48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003c4c:	682f      	ldr	r7, [r5, #0]
 8003c4e:	602b      	str	r3, [r5, #0]
 8003c50:	d032      	beq.n	8003cb8 <__sflush_r+0x98>
 8003c52:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003c54:	89a3      	ldrh	r3, [r4, #12]
 8003c56:	075a      	lsls	r2, r3, #29
 8003c58:	d505      	bpl.n	8003c66 <__sflush_r+0x46>
 8003c5a:	6863      	ldr	r3, [r4, #4]
 8003c5c:	1ac0      	subs	r0, r0, r3
 8003c5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003c60:	b10b      	cbz	r3, 8003c66 <__sflush_r+0x46>
 8003c62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003c64:	1ac0      	subs	r0, r0, r3
 8003c66:	2300      	movs	r3, #0
 8003c68:	4602      	mov	r2, r0
 8003c6a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003c6c:	6a21      	ldr	r1, [r4, #32]
 8003c6e:	4628      	mov	r0, r5
 8003c70:	47b0      	blx	r6
 8003c72:	1c43      	adds	r3, r0, #1
 8003c74:	89a3      	ldrh	r3, [r4, #12]
 8003c76:	d106      	bne.n	8003c86 <__sflush_r+0x66>
 8003c78:	6829      	ldr	r1, [r5, #0]
 8003c7a:	291d      	cmp	r1, #29
 8003c7c:	d82c      	bhi.n	8003cd8 <__sflush_r+0xb8>
 8003c7e:	4a2a      	ldr	r2, [pc, #168]	; (8003d28 <__sflush_r+0x108>)
 8003c80:	40ca      	lsrs	r2, r1
 8003c82:	07d6      	lsls	r6, r2, #31
 8003c84:	d528      	bpl.n	8003cd8 <__sflush_r+0xb8>
 8003c86:	2200      	movs	r2, #0
 8003c88:	6062      	str	r2, [r4, #4]
 8003c8a:	04d9      	lsls	r1, r3, #19
 8003c8c:	6922      	ldr	r2, [r4, #16]
 8003c8e:	6022      	str	r2, [r4, #0]
 8003c90:	d504      	bpl.n	8003c9c <__sflush_r+0x7c>
 8003c92:	1c42      	adds	r2, r0, #1
 8003c94:	d101      	bne.n	8003c9a <__sflush_r+0x7a>
 8003c96:	682b      	ldr	r3, [r5, #0]
 8003c98:	b903      	cbnz	r3, 8003c9c <__sflush_r+0x7c>
 8003c9a:	6560      	str	r0, [r4, #84]	; 0x54
 8003c9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003c9e:	602f      	str	r7, [r5, #0]
 8003ca0:	2900      	cmp	r1, #0
 8003ca2:	d0ca      	beq.n	8003c3a <__sflush_r+0x1a>
 8003ca4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003ca8:	4299      	cmp	r1, r3
 8003caa:	d002      	beq.n	8003cb2 <__sflush_r+0x92>
 8003cac:	4628      	mov	r0, r5
 8003cae:	f000 f9d7 	bl	8004060 <_free_r>
 8003cb2:	2000      	movs	r0, #0
 8003cb4:	6360      	str	r0, [r4, #52]	; 0x34
 8003cb6:	e7c1      	b.n	8003c3c <__sflush_r+0x1c>
 8003cb8:	6a21      	ldr	r1, [r4, #32]
 8003cba:	2301      	movs	r3, #1
 8003cbc:	4628      	mov	r0, r5
 8003cbe:	47b0      	blx	r6
 8003cc0:	1c41      	adds	r1, r0, #1
 8003cc2:	d1c7      	bne.n	8003c54 <__sflush_r+0x34>
 8003cc4:	682b      	ldr	r3, [r5, #0]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d0c4      	beq.n	8003c54 <__sflush_r+0x34>
 8003cca:	2b1d      	cmp	r3, #29
 8003ccc:	d001      	beq.n	8003cd2 <__sflush_r+0xb2>
 8003cce:	2b16      	cmp	r3, #22
 8003cd0:	d101      	bne.n	8003cd6 <__sflush_r+0xb6>
 8003cd2:	602f      	str	r7, [r5, #0]
 8003cd4:	e7b1      	b.n	8003c3a <__sflush_r+0x1a>
 8003cd6:	89a3      	ldrh	r3, [r4, #12]
 8003cd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cdc:	81a3      	strh	r3, [r4, #12]
 8003cde:	e7ad      	b.n	8003c3c <__sflush_r+0x1c>
 8003ce0:	690f      	ldr	r7, [r1, #16]
 8003ce2:	2f00      	cmp	r7, #0
 8003ce4:	d0a9      	beq.n	8003c3a <__sflush_r+0x1a>
 8003ce6:	0793      	lsls	r3, r2, #30
 8003ce8:	680e      	ldr	r6, [r1, #0]
 8003cea:	bf08      	it	eq
 8003cec:	694b      	ldreq	r3, [r1, #20]
 8003cee:	600f      	str	r7, [r1, #0]
 8003cf0:	bf18      	it	ne
 8003cf2:	2300      	movne	r3, #0
 8003cf4:	eba6 0807 	sub.w	r8, r6, r7
 8003cf8:	608b      	str	r3, [r1, #8]
 8003cfa:	f1b8 0f00 	cmp.w	r8, #0
 8003cfe:	dd9c      	ble.n	8003c3a <__sflush_r+0x1a>
 8003d00:	6a21      	ldr	r1, [r4, #32]
 8003d02:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003d04:	4643      	mov	r3, r8
 8003d06:	463a      	mov	r2, r7
 8003d08:	4628      	mov	r0, r5
 8003d0a:	47b0      	blx	r6
 8003d0c:	2800      	cmp	r0, #0
 8003d0e:	dc06      	bgt.n	8003d1e <__sflush_r+0xfe>
 8003d10:	89a3      	ldrh	r3, [r4, #12]
 8003d12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d16:	81a3      	strh	r3, [r4, #12]
 8003d18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d1c:	e78e      	b.n	8003c3c <__sflush_r+0x1c>
 8003d1e:	4407      	add	r7, r0
 8003d20:	eba8 0800 	sub.w	r8, r8, r0
 8003d24:	e7e9      	b.n	8003cfa <__sflush_r+0xda>
 8003d26:	bf00      	nop
 8003d28:	20400001 	.word	0x20400001

08003d2c <_fflush_r>:
 8003d2c:	b538      	push	{r3, r4, r5, lr}
 8003d2e:	690b      	ldr	r3, [r1, #16]
 8003d30:	4605      	mov	r5, r0
 8003d32:	460c      	mov	r4, r1
 8003d34:	b913      	cbnz	r3, 8003d3c <_fflush_r+0x10>
 8003d36:	2500      	movs	r5, #0
 8003d38:	4628      	mov	r0, r5
 8003d3a:	bd38      	pop	{r3, r4, r5, pc}
 8003d3c:	b118      	cbz	r0, 8003d46 <_fflush_r+0x1a>
 8003d3e:	6983      	ldr	r3, [r0, #24]
 8003d40:	b90b      	cbnz	r3, 8003d46 <_fflush_r+0x1a>
 8003d42:	f000 f887 	bl	8003e54 <__sinit>
 8003d46:	4b14      	ldr	r3, [pc, #80]	; (8003d98 <_fflush_r+0x6c>)
 8003d48:	429c      	cmp	r4, r3
 8003d4a:	d11b      	bne.n	8003d84 <_fflush_r+0x58>
 8003d4c:	686c      	ldr	r4, [r5, #4]
 8003d4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d0ef      	beq.n	8003d36 <_fflush_r+0xa>
 8003d56:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003d58:	07d0      	lsls	r0, r2, #31
 8003d5a:	d404      	bmi.n	8003d66 <_fflush_r+0x3a>
 8003d5c:	0599      	lsls	r1, r3, #22
 8003d5e:	d402      	bmi.n	8003d66 <_fflush_r+0x3a>
 8003d60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d62:	f000 f915 	bl	8003f90 <__retarget_lock_acquire_recursive>
 8003d66:	4628      	mov	r0, r5
 8003d68:	4621      	mov	r1, r4
 8003d6a:	f7ff ff59 	bl	8003c20 <__sflush_r>
 8003d6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003d70:	07da      	lsls	r2, r3, #31
 8003d72:	4605      	mov	r5, r0
 8003d74:	d4e0      	bmi.n	8003d38 <_fflush_r+0xc>
 8003d76:	89a3      	ldrh	r3, [r4, #12]
 8003d78:	059b      	lsls	r3, r3, #22
 8003d7a:	d4dd      	bmi.n	8003d38 <_fflush_r+0xc>
 8003d7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d7e:	f000 f908 	bl	8003f92 <__retarget_lock_release_recursive>
 8003d82:	e7d9      	b.n	8003d38 <_fflush_r+0xc>
 8003d84:	4b05      	ldr	r3, [pc, #20]	; (8003d9c <_fflush_r+0x70>)
 8003d86:	429c      	cmp	r4, r3
 8003d88:	d101      	bne.n	8003d8e <_fflush_r+0x62>
 8003d8a:	68ac      	ldr	r4, [r5, #8]
 8003d8c:	e7df      	b.n	8003d4e <_fflush_r+0x22>
 8003d8e:	4b04      	ldr	r3, [pc, #16]	; (8003da0 <_fflush_r+0x74>)
 8003d90:	429c      	cmp	r4, r3
 8003d92:	bf08      	it	eq
 8003d94:	68ec      	ldreq	r4, [r5, #12]
 8003d96:	e7da      	b.n	8003d4e <_fflush_r+0x22>
 8003d98:	08004b18 	.word	0x08004b18
 8003d9c:	08004b38 	.word	0x08004b38
 8003da0:	08004af8 	.word	0x08004af8

08003da4 <std>:
 8003da4:	2300      	movs	r3, #0
 8003da6:	b510      	push	{r4, lr}
 8003da8:	4604      	mov	r4, r0
 8003daa:	e9c0 3300 	strd	r3, r3, [r0]
 8003dae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003db2:	6083      	str	r3, [r0, #8]
 8003db4:	8181      	strh	r1, [r0, #12]
 8003db6:	6643      	str	r3, [r0, #100]	; 0x64
 8003db8:	81c2      	strh	r2, [r0, #14]
 8003dba:	6183      	str	r3, [r0, #24]
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	2208      	movs	r2, #8
 8003dc0:	305c      	adds	r0, #92	; 0x5c
 8003dc2:	f7ff fdd7 	bl	8003974 <memset>
 8003dc6:	4b05      	ldr	r3, [pc, #20]	; (8003ddc <std+0x38>)
 8003dc8:	6263      	str	r3, [r4, #36]	; 0x24
 8003dca:	4b05      	ldr	r3, [pc, #20]	; (8003de0 <std+0x3c>)
 8003dcc:	62a3      	str	r3, [r4, #40]	; 0x28
 8003dce:	4b05      	ldr	r3, [pc, #20]	; (8003de4 <std+0x40>)
 8003dd0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003dd2:	4b05      	ldr	r3, [pc, #20]	; (8003de8 <std+0x44>)
 8003dd4:	6224      	str	r4, [r4, #32]
 8003dd6:	6323      	str	r3, [r4, #48]	; 0x30
 8003dd8:	bd10      	pop	{r4, pc}
 8003dda:	bf00      	nop
 8003ddc:	0800481d 	.word	0x0800481d
 8003de0:	0800483f 	.word	0x0800483f
 8003de4:	08004877 	.word	0x08004877
 8003de8:	0800489b 	.word	0x0800489b

08003dec <_cleanup_r>:
 8003dec:	4901      	ldr	r1, [pc, #4]	; (8003df4 <_cleanup_r+0x8>)
 8003dee:	f000 b8af 	b.w	8003f50 <_fwalk_reent>
 8003df2:	bf00      	nop
 8003df4:	08003d2d 	.word	0x08003d2d

08003df8 <__sfmoreglue>:
 8003df8:	b570      	push	{r4, r5, r6, lr}
 8003dfa:	2268      	movs	r2, #104	; 0x68
 8003dfc:	1e4d      	subs	r5, r1, #1
 8003dfe:	4355      	muls	r5, r2
 8003e00:	460e      	mov	r6, r1
 8003e02:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003e06:	f000 f997 	bl	8004138 <_malloc_r>
 8003e0a:	4604      	mov	r4, r0
 8003e0c:	b140      	cbz	r0, 8003e20 <__sfmoreglue+0x28>
 8003e0e:	2100      	movs	r1, #0
 8003e10:	e9c0 1600 	strd	r1, r6, [r0]
 8003e14:	300c      	adds	r0, #12
 8003e16:	60a0      	str	r0, [r4, #8]
 8003e18:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003e1c:	f7ff fdaa 	bl	8003974 <memset>
 8003e20:	4620      	mov	r0, r4
 8003e22:	bd70      	pop	{r4, r5, r6, pc}

08003e24 <__sfp_lock_acquire>:
 8003e24:	4801      	ldr	r0, [pc, #4]	; (8003e2c <__sfp_lock_acquire+0x8>)
 8003e26:	f000 b8b3 	b.w	8003f90 <__retarget_lock_acquire_recursive>
 8003e2a:	bf00      	nop
 8003e2c:	20000791 	.word	0x20000791

08003e30 <__sfp_lock_release>:
 8003e30:	4801      	ldr	r0, [pc, #4]	; (8003e38 <__sfp_lock_release+0x8>)
 8003e32:	f000 b8ae 	b.w	8003f92 <__retarget_lock_release_recursive>
 8003e36:	bf00      	nop
 8003e38:	20000791 	.word	0x20000791

08003e3c <__sinit_lock_acquire>:
 8003e3c:	4801      	ldr	r0, [pc, #4]	; (8003e44 <__sinit_lock_acquire+0x8>)
 8003e3e:	f000 b8a7 	b.w	8003f90 <__retarget_lock_acquire_recursive>
 8003e42:	bf00      	nop
 8003e44:	20000792 	.word	0x20000792

08003e48 <__sinit_lock_release>:
 8003e48:	4801      	ldr	r0, [pc, #4]	; (8003e50 <__sinit_lock_release+0x8>)
 8003e4a:	f000 b8a2 	b.w	8003f92 <__retarget_lock_release_recursive>
 8003e4e:	bf00      	nop
 8003e50:	20000792 	.word	0x20000792

08003e54 <__sinit>:
 8003e54:	b510      	push	{r4, lr}
 8003e56:	4604      	mov	r4, r0
 8003e58:	f7ff fff0 	bl	8003e3c <__sinit_lock_acquire>
 8003e5c:	69a3      	ldr	r3, [r4, #24]
 8003e5e:	b11b      	cbz	r3, 8003e68 <__sinit+0x14>
 8003e60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e64:	f7ff bff0 	b.w	8003e48 <__sinit_lock_release>
 8003e68:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003e6c:	6523      	str	r3, [r4, #80]	; 0x50
 8003e6e:	4b13      	ldr	r3, [pc, #76]	; (8003ebc <__sinit+0x68>)
 8003e70:	4a13      	ldr	r2, [pc, #76]	; (8003ec0 <__sinit+0x6c>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	62a2      	str	r2, [r4, #40]	; 0x28
 8003e76:	42a3      	cmp	r3, r4
 8003e78:	bf04      	itt	eq
 8003e7a:	2301      	moveq	r3, #1
 8003e7c:	61a3      	streq	r3, [r4, #24]
 8003e7e:	4620      	mov	r0, r4
 8003e80:	f000 f820 	bl	8003ec4 <__sfp>
 8003e84:	6060      	str	r0, [r4, #4]
 8003e86:	4620      	mov	r0, r4
 8003e88:	f000 f81c 	bl	8003ec4 <__sfp>
 8003e8c:	60a0      	str	r0, [r4, #8]
 8003e8e:	4620      	mov	r0, r4
 8003e90:	f000 f818 	bl	8003ec4 <__sfp>
 8003e94:	2200      	movs	r2, #0
 8003e96:	60e0      	str	r0, [r4, #12]
 8003e98:	2104      	movs	r1, #4
 8003e9a:	6860      	ldr	r0, [r4, #4]
 8003e9c:	f7ff ff82 	bl	8003da4 <std>
 8003ea0:	68a0      	ldr	r0, [r4, #8]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	2109      	movs	r1, #9
 8003ea6:	f7ff ff7d 	bl	8003da4 <std>
 8003eaa:	68e0      	ldr	r0, [r4, #12]
 8003eac:	2202      	movs	r2, #2
 8003eae:	2112      	movs	r1, #18
 8003eb0:	f7ff ff78 	bl	8003da4 <std>
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	61a3      	str	r3, [r4, #24]
 8003eb8:	e7d2      	b.n	8003e60 <__sinit+0xc>
 8003eba:	bf00      	nop
 8003ebc:	08004af4 	.word	0x08004af4
 8003ec0:	08003ded 	.word	0x08003ded

08003ec4 <__sfp>:
 8003ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ec6:	4607      	mov	r7, r0
 8003ec8:	f7ff ffac 	bl	8003e24 <__sfp_lock_acquire>
 8003ecc:	4b1e      	ldr	r3, [pc, #120]	; (8003f48 <__sfp+0x84>)
 8003ece:	681e      	ldr	r6, [r3, #0]
 8003ed0:	69b3      	ldr	r3, [r6, #24]
 8003ed2:	b913      	cbnz	r3, 8003eda <__sfp+0x16>
 8003ed4:	4630      	mov	r0, r6
 8003ed6:	f7ff ffbd 	bl	8003e54 <__sinit>
 8003eda:	3648      	adds	r6, #72	; 0x48
 8003edc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003ee0:	3b01      	subs	r3, #1
 8003ee2:	d503      	bpl.n	8003eec <__sfp+0x28>
 8003ee4:	6833      	ldr	r3, [r6, #0]
 8003ee6:	b30b      	cbz	r3, 8003f2c <__sfp+0x68>
 8003ee8:	6836      	ldr	r6, [r6, #0]
 8003eea:	e7f7      	b.n	8003edc <__sfp+0x18>
 8003eec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003ef0:	b9d5      	cbnz	r5, 8003f28 <__sfp+0x64>
 8003ef2:	4b16      	ldr	r3, [pc, #88]	; (8003f4c <__sfp+0x88>)
 8003ef4:	60e3      	str	r3, [r4, #12]
 8003ef6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003efa:	6665      	str	r5, [r4, #100]	; 0x64
 8003efc:	f000 f847 	bl	8003f8e <__retarget_lock_init_recursive>
 8003f00:	f7ff ff96 	bl	8003e30 <__sfp_lock_release>
 8003f04:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003f08:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003f0c:	6025      	str	r5, [r4, #0]
 8003f0e:	61a5      	str	r5, [r4, #24]
 8003f10:	2208      	movs	r2, #8
 8003f12:	4629      	mov	r1, r5
 8003f14:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003f18:	f7ff fd2c 	bl	8003974 <memset>
 8003f1c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003f20:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003f24:	4620      	mov	r0, r4
 8003f26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f28:	3468      	adds	r4, #104	; 0x68
 8003f2a:	e7d9      	b.n	8003ee0 <__sfp+0x1c>
 8003f2c:	2104      	movs	r1, #4
 8003f2e:	4638      	mov	r0, r7
 8003f30:	f7ff ff62 	bl	8003df8 <__sfmoreglue>
 8003f34:	4604      	mov	r4, r0
 8003f36:	6030      	str	r0, [r6, #0]
 8003f38:	2800      	cmp	r0, #0
 8003f3a:	d1d5      	bne.n	8003ee8 <__sfp+0x24>
 8003f3c:	f7ff ff78 	bl	8003e30 <__sfp_lock_release>
 8003f40:	230c      	movs	r3, #12
 8003f42:	603b      	str	r3, [r7, #0]
 8003f44:	e7ee      	b.n	8003f24 <__sfp+0x60>
 8003f46:	bf00      	nop
 8003f48:	08004af4 	.word	0x08004af4
 8003f4c:	ffff0001 	.word	0xffff0001

08003f50 <_fwalk_reent>:
 8003f50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f54:	4606      	mov	r6, r0
 8003f56:	4688      	mov	r8, r1
 8003f58:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003f5c:	2700      	movs	r7, #0
 8003f5e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003f62:	f1b9 0901 	subs.w	r9, r9, #1
 8003f66:	d505      	bpl.n	8003f74 <_fwalk_reent+0x24>
 8003f68:	6824      	ldr	r4, [r4, #0]
 8003f6a:	2c00      	cmp	r4, #0
 8003f6c:	d1f7      	bne.n	8003f5e <_fwalk_reent+0xe>
 8003f6e:	4638      	mov	r0, r7
 8003f70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f74:	89ab      	ldrh	r3, [r5, #12]
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d907      	bls.n	8003f8a <_fwalk_reent+0x3a>
 8003f7a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003f7e:	3301      	adds	r3, #1
 8003f80:	d003      	beq.n	8003f8a <_fwalk_reent+0x3a>
 8003f82:	4629      	mov	r1, r5
 8003f84:	4630      	mov	r0, r6
 8003f86:	47c0      	blx	r8
 8003f88:	4307      	orrs	r7, r0
 8003f8a:	3568      	adds	r5, #104	; 0x68
 8003f8c:	e7e9      	b.n	8003f62 <_fwalk_reent+0x12>

08003f8e <__retarget_lock_init_recursive>:
 8003f8e:	4770      	bx	lr

08003f90 <__retarget_lock_acquire_recursive>:
 8003f90:	4770      	bx	lr

08003f92 <__retarget_lock_release_recursive>:
 8003f92:	4770      	bx	lr

08003f94 <__swhatbuf_r>:
 8003f94:	b570      	push	{r4, r5, r6, lr}
 8003f96:	460e      	mov	r6, r1
 8003f98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f9c:	2900      	cmp	r1, #0
 8003f9e:	b096      	sub	sp, #88	; 0x58
 8003fa0:	4614      	mov	r4, r2
 8003fa2:	461d      	mov	r5, r3
 8003fa4:	da08      	bge.n	8003fb8 <__swhatbuf_r+0x24>
 8003fa6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003faa:	2200      	movs	r2, #0
 8003fac:	602a      	str	r2, [r5, #0]
 8003fae:	061a      	lsls	r2, r3, #24
 8003fb0:	d410      	bmi.n	8003fd4 <__swhatbuf_r+0x40>
 8003fb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fb6:	e00e      	b.n	8003fd6 <__swhatbuf_r+0x42>
 8003fb8:	466a      	mov	r2, sp
 8003fba:	f000 fc95 	bl	80048e8 <_fstat_r>
 8003fbe:	2800      	cmp	r0, #0
 8003fc0:	dbf1      	blt.n	8003fa6 <__swhatbuf_r+0x12>
 8003fc2:	9a01      	ldr	r2, [sp, #4]
 8003fc4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003fc8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003fcc:	425a      	negs	r2, r3
 8003fce:	415a      	adcs	r2, r3
 8003fd0:	602a      	str	r2, [r5, #0]
 8003fd2:	e7ee      	b.n	8003fb2 <__swhatbuf_r+0x1e>
 8003fd4:	2340      	movs	r3, #64	; 0x40
 8003fd6:	2000      	movs	r0, #0
 8003fd8:	6023      	str	r3, [r4, #0]
 8003fda:	b016      	add	sp, #88	; 0x58
 8003fdc:	bd70      	pop	{r4, r5, r6, pc}
	...

08003fe0 <__smakebuf_r>:
 8003fe0:	898b      	ldrh	r3, [r1, #12]
 8003fe2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003fe4:	079d      	lsls	r5, r3, #30
 8003fe6:	4606      	mov	r6, r0
 8003fe8:	460c      	mov	r4, r1
 8003fea:	d507      	bpl.n	8003ffc <__smakebuf_r+0x1c>
 8003fec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003ff0:	6023      	str	r3, [r4, #0]
 8003ff2:	6123      	str	r3, [r4, #16]
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	6163      	str	r3, [r4, #20]
 8003ff8:	b002      	add	sp, #8
 8003ffa:	bd70      	pop	{r4, r5, r6, pc}
 8003ffc:	ab01      	add	r3, sp, #4
 8003ffe:	466a      	mov	r2, sp
 8004000:	f7ff ffc8 	bl	8003f94 <__swhatbuf_r>
 8004004:	9900      	ldr	r1, [sp, #0]
 8004006:	4605      	mov	r5, r0
 8004008:	4630      	mov	r0, r6
 800400a:	f000 f895 	bl	8004138 <_malloc_r>
 800400e:	b948      	cbnz	r0, 8004024 <__smakebuf_r+0x44>
 8004010:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004014:	059a      	lsls	r2, r3, #22
 8004016:	d4ef      	bmi.n	8003ff8 <__smakebuf_r+0x18>
 8004018:	f023 0303 	bic.w	r3, r3, #3
 800401c:	f043 0302 	orr.w	r3, r3, #2
 8004020:	81a3      	strh	r3, [r4, #12]
 8004022:	e7e3      	b.n	8003fec <__smakebuf_r+0xc>
 8004024:	4b0d      	ldr	r3, [pc, #52]	; (800405c <__smakebuf_r+0x7c>)
 8004026:	62b3      	str	r3, [r6, #40]	; 0x28
 8004028:	89a3      	ldrh	r3, [r4, #12]
 800402a:	6020      	str	r0, [r4, #0]
 800402c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004030:	81a3      	strh	r3, [r4, #12]
 8004032:	9b00      	ldr	r3, [sp, #0]
 8004034:	6163      	str	r3, [r4, #20]
 8004036:	9b01      	ldr	r3, [sp, #4]
 8004038:	6120      	str	r0, [r4, #16]
 800403a:	b15b      	cbz	r3, 8004054 <__smakebuf_r+0x74>
 800403c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004040:	4630      	mov	r0, r6
 8004042:	f000 fc63 	bl	800490c <_isatty_r>
 8004046:	b128      	cbz	r0, 8004054 <__smakebuf_r+0x74>
 8004048:	89a3      	ldrh	r3, [r4, #12]
 800404a:	f023 0303 	bic.w	r3, r3, #3
 800404e:	f043 0301 	orr.w	r3, r3, #1
 8004052:	81a3      	strh	r3, [r4, #12]
 8004054:	89a0      	ldrh	r0, [r4, #12]
 8004056:	4305      	orrs	r5, r0
 8004058:	81a5      	strh	r5, [r4, #12]
 800405a:	e7cd      	b.n	8003ff8 <__smakebuf_r+0x18>
 800405c:	08003ded 	.word	0x08003ded

08004060 <_free_r>:
 8004060:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004062:	2900      	cmp	r1, #0
 8004064:	d044      	beq.n	80040f0 <_free_r+0x90>
 8004066:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800406a:	9001      	str	r0, [sp, #4]
 800406c:	2b00      	cmp	r3, #0
 800406e:	f1a1 0404 	sub.w	r4, r1, #4
 8004072:	bfb8      	it	lt
 8004074:	18e4      	addlt	r4, r4, r3
 8004076:	f000 fc6b 	bl	8004950 <__malloc_lock>
 800407a:	4a1e      	ldr	r2, [pc, #120]	; (80040f4 <_free_r+0x94>)
 800407c:	9801      	ldr	r0, [sp, #4]
 800407e:	6813      	ldr	r3, [r2, #0]
 8004080:	b933      	cbnz	r3, 8004090 <_free_r+0x30>
 8004082:	6063      	str	r3, [r4, #4]
 8004084:	6014      	str	r4, [r2, #0]
 8004086:	b003      	add	sp, #12
 8004088:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800408c:	f000 bc66 	b.w	800495c <__malloc_unlock>
 8004090:	42a3      	cmp	r3, r4
 8004092:	d908      	bls.n	80040a6 <_free_r+0x46>
 8004094:	6825      	ldr	r5, [r4, #0]
 8004096:	1961      	adds	r1, r4, r5
 8004098:	428b      	cmp	r3, r1
 800409a:	bf01      	itttt	eq
 800409c:	6819      	ldreq	r1, [r3, #0]
 800409e:	685b      	ldreq	r3, [r3, #4]
 80040a0:	1949      	addeq	r1, r1, r5
 80040a2:	6021      	streq	r1, [r4, #0]
 80040a4:	e7ed      	b.n	8004082 <_free_r+0x22>
 80040a6:	461a      	mov	r2, r3
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	b10b      	cbz	r3, 80040b0 <_free_r+0x50>
 80040ac:	42a3      	cmp	r3, r4
 80040ae:	d9fa      	bls.n	80040a6 <_free_r+0x46>
 80040b0:	6811      	ldr	r1, [r2, #0]
 80040b2:	1855      	adds	r5, r2, r1
 80040b4:	42a5      	cmp	r5, r4
 80040b6:	d10b      	bne.n	80040d0 <_free_r+0x70>
 80040b8:	6824      	ldr	r4, [r4, #0]
 80040ba:	4421      	add	r1, r4
 80040bc:	1854      	adds	r4, r2, r1
 80040be:	42a3      	cmp	r3, r4
 80040c0:	6011      	str	r1, [r2, #0]
 80040c2:	d1e0      	bne.n	8004086 <_free_r+0x26>
 80040c4:	681c      	ldr	r4, [r3, #0]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	6053      	str	r3, [r2, #4]
 80040ca:	4421      	add	r1, r4
 80040cc:	6011      	str	r1, [r2, #0]
 80040ce:	e7da      	b.n	8004086 <_free_r+0x26>
 80040d0:	d902      	bls.n	80040d8 <_free_r+0x78>
 80040d2:	230c      	movs	r3, #12
 80040d4:	6003      	str	r3, [r0, #0]
 80040d6:	e7d6      	b.n	8004086 <_free_r+0x26>
 80040d8:	6825      	ldr	r5, [r4, #0]
 80040da:	1961      	adds	r1, r4, r5
 80040dc:	428b      	cmp	r3, r1
 80040de:	bf04      	itt	eq
 80040e0:	6819      	ldreq	r1, [r3, #0]
 80040e2:	685b      	ldreq	r3, [r3, #4]
 80040e4:	6063      	str	r3, [r4, #4]
 80040e6:	bf04      	itt	eq
 80040e8:	1949      	addeq	r1, r1, r5
 80040ea:	6021      	streq	r1, [r4, #0]
 80040ec:	6054      	str	r4, [r2, #4]
 80040ee:	e7ca      	b.n	8004086 <_free_r+0x26>
 80040f0:	b003      	add	sp, #12
 80040f2:	bd30      	pop	{r4, r5, pc}
 80040f4:	20000794 	.word	0x20000794

080040f8 <sbrk_aligned>:
 80040f8:	b570      	push	{r4, r5, r6, lr}
 80040fa:	4e0e      	ldr	r6, [pc, #56]	; (8004134 <sbrk_aligned+0x3c>)
 80040fc:	460c      	mov	r4, r1
 80040fe:	6831      	ldr	r1, [r6, #0]
 8004100:	4605      	mov	r5, r0
 8004102:	b911      	cbnz	r1, 800410a <sbrk_aligned+0x12>
 8004104:	f000 fb7a 	bl	80047fc <_sbrk_r>
 8004108:	6030      	str	r0, [r6, #0]
 800410a:	4621      	mov	r1, r4
 800410c:	4628      	mov	r0, r5
 800410e:	f000 fb75 	bl	80047fc <_sbrk_r>
 8004112:	1c43      	adds	r3, r0, #1
 8004114:	d00a      	beq.n	800412c <sbrk_aligned+0x34>
 8004116:	1cc4      	adds	r4, r0, #3
 8004118:	f024 0403 	bic.w	r4, r4, #3
 800411c:	42a0      	cmp	r0, r4
 800411e:	d007      	beq.n	8004130 <sbrk_aligned+0x38>
 8004120:	1a21      	subs	r1, r4, r0
 8004122:	4628      	mov	r0, r5
 8004124:	f000 fb6a 	bl	80047fc <_sbrk_r>
 8004128:	3001      	adds	r0, #1
 800412a:	d101      	bne.n	8004130 <sbrk_aligned+0x38>
 800412c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004130:	4620      	mov	r0, r4
 8004132:	bd70      	pop	{r4, r5, r6, pc}
 8004134:	20000798 	.word	0x20000798

08004138 <_malloc_r>:
 8004138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800413c:	1ccd      	adds	r5, r1, #3
 800413e:	f025 0503 	bic.w	r5, r5, #3
 8004142:	3508      	adds	r5, #8
 8004144:	2d0c      	cmp	r5, #12
 8004146:	bf38      	it	cc
 8004148:	250c      	movcc	r5, #12
 800414a:	2d00      	cmp	r5, #0
 800414c:	4607      	mov	r7, r0
 800414e:	db01      	blt.n	8004154 <_malloc_r+0x1c>
 8004150:	42a9      	cmp	r1, r5
 8004152:	d905      	bls.n	8004160 <_malloc_r+0x28>
 8004154:	230c      	movs	r3, #12
 8004156:	603b      	str	r3, [r7, #0]
 8004158:	2600      	movs	r6, #0
 800415a:	4630      	mov	r0, r6
 800415c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004160:	4e2e      	ldr	r6, [pc, #184]	; (800421c <_malloc_r+0xe4>)
 8004162:	f000 fbf5 	bl	8004950 <__malloc_lock>
 8004166:	6833      	ldr	r3, [r6, #0]
 8004168:	461c      	mov	r4, r3
 800416a:	bb34      	cbnz	r4, 80041ba <_malloc_r+0x82>
 800416c:	4629      	mov	r1, r5
 800416e:	4638      	mov	r0, r7
 8004170:	f7ff ffc2 	bl	80040f8 <sbrk_aligned>
 8004174:	1c43      	adds	r3, r0, #1
 8004176:	4604      	mov	r4, r0
 8004178:	d14d      	bne.n	8004216 <_malloc_r+0xde>
 800417a:	6834      	ldr	r4, [r6, #0]
 800417c:	4626      	mov	r6, r4
 800417e:	2e00      	cmp	r6, #0
 8004180:	d140      	bne.n	8004204 <_malloc_r+0xcc>
 8004182:	6823      	ldr	r3, [r4, #0]
 8004184:	4631      	mov	r1, r6
 8004186:	4638      	mov	r0, r7
 8004188:	eb04 0803 	add.w	r8, r4, r3
 800418c:	f000 fb36 	bl	80047fc <_sbrk_r>
 8004190:	4580      	cmp	r8, r0
 8004192:	d13a      	bne.n	800420a <_malloc_r+0xd2>
 8004194:	6821      	ldr	r1, [r4, #0]
 8004196:	3503      	adds	r5, #3
 8004198:	1a6d      	subs	r5, r5, r1
 800419a:	f025 0503 	bic.w	r5, r5, #3
 800419e:	3508      	adds	r5, #8
 80041a0:	2d0c      	cmp	r5, #12
 80041a2:	bf38      	it	cc
 80041a4:	250c      	movcc	r5, #12
 80041a6:	4629      	mov	r1, r5
 80041a8:	4638      	mov	r0, r7
 80041aa:	f7ff ffa5 	bl	80040f8 <sbrk_aligned>
 80041ae:	3001      	adds	r0, #1
 80041b0:	d02b      	beq.n	800420a <_malloc_r+0xd2>
 80041b2:	6823      	ldr	r3, [r4, #0]
 80041b4:	442b      	add	r3, r5
 80041b6:	6023      	str	r3, [r4, #0]
 80041b8:	e00e      	b.n	80041d8 <_malloc_r+0xa0>
 80041ba:	6822      	ldr	r2, [r4, #0]
 80041bc:	1b52      	subs	r2, r2, r5
 80041be:	d41e      	bmi.n	80041fe <_malloc_r+0xc6>
 80041c0:	2a0b      	cmp	r2, #11
 80041c2:	d916      	bls.n	80041f2 <_malloc_r+0xba>
 80041c4:	1961      	adds	r1, r4, r5
 80041c6:	42a3      	cmp	r3, r4
 80041c8:	6025      	str	r5, [r4, #0]
 80041ca:	bf18      	it	ne
 80041cc:	6059      	strne	r1, [r3, #4]
 80041ce:	6863      	ldr	r3, [r4, #4]
 80041d0:	bf08      	it	eq
 80041d2:	6031      	streq	r1, [r6, #0]
 80041d4:	5162      	str	r2, [r4, r5]
 80041d6:	604b      	str	r3, [r1, #4]
 80041d8:	4638      	mov	r0, r7
 80041da:	f104 060b 	add.w	r6, r4, #11
 80041de:	f000 fbbd 	bl	800495c <__malloc_unlock>
 80041e2:	f026 0607 	bic.w	r6, r6, #7
 80041e6:	1d23      	adds	r3, r4, #4
 80041e8:	1af2      	subs	r2, r6, r3
 80041ea:	d0b6      	beq.n	800415a <_malloc_r+0x22>
 80041ec:	1b9b      	subs	r3, r3, r6
 80041ee:	50a3      	str	r3, [r4, r2]
 80041f0:	e7b3      	b.n	800415a <_malloc_r+0x22>
 80041f2:	6862      	ldr	r2, [r4, #4]
 80041f4:	42a3      	cmp	r3, r4
 80041f6:	bf0c      	ite	eq
 80041f8:	6032      	streq	r2, [r6, #0]
 80041fa:	605a      	strne	r2, [r3, #4]
 80041fc:	e7ec      	b.n	80041d8 <_malloc_r+0xa0>
 80041fe:	4623      	mov	r3, r4
 8004200:	6864      	ldr	r4, [r4, #4]
 8004202:	e7b2      	b.n	800416a <_malloc_r+0x32>
 8004204:	4634      	mov	r4, r6
 8004206:	6876      	ldr	r6, [r6, #4]
 8004208:	e7b9      	b.n	800417e <_malloc_r+0x46>
 800420a:	230c      	movs	r3, #12
 800420c:	603b      	str	r3, [r7, #0]
 800420e:	4638      	mov	r0, r7
 8004210:	f000 fba4 	bl	800495c <__malloc_unlock>
 8004214:	e7a1      	b.n	800415a <_malloc_r+0x22>
 8004216:	6025      	str	r5, [r4, #0]
 8004218:	e7de      	b.n	80041d8 <_malloc_r+0xa0>
 800421a:	bf00      	nop
 800421c:	20000794 	.word	0x20000794

08004220 <__sfputc_r>:
 8004220:	6893      	ldr	r3, [r2, #8]
 8004222:	3b01      	subs	r3, #1
 8004224:	2b00      	cmp	r3, #0
 8004226:	b410      	push	{r4}
 8004228:	6093      	str	r3, [r2, #8]
 800422a:	da08      	bge.n	800423e <__sfputc_r+0x1e>
 800422c:	6994      	ldr	r4, [r2, #24]
 800422e:	42a3      	cmp	r3, r4
 8004230:	db01      	blt.n	8004236 <__sfputc_r+0x16>
 8004232:	290a      	cmp	r1, #10
 8004234:	d103      	bne.n	800423e <__sfputc_r+0x1e>
 8004236:	f85d 4b04 	ldr.w	r4, [sp], #4
 800423a:	f7ff bc31 	b.w	8003aa0 <__swbuf_r>
 800423e:	6813      	ldr	r3, [r2, #0]
 8004240:	1c58      	adds	r0, r3, #1
 8004242:	6010      	str	r0, [r2, #0]
 8004244:	7019      	strb	r1, [r3, #0]
 8004246:	4608      	mov	r0, r1
 8004248:	f85d 4b04 	ldr.w	r4, [sp], #4
 800424c:	4770      	bx	lr

0800424e <__sfputs_r>:
 800424e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004250:	4606      	mov	r6, r0
 8004252:	460f      	mov	r7, r1
 8004254:	4614      	mov	r4, r2
 8004256:	18d5      	adds	r5, r2, r3
 8004258:	42ac      	cmp	r4, r5
 800425a:	d101      	bne.n	8004260 <__sfputs_r+0x12>
 800425c:	2000      	movs	r0, #0
 800425e:	e007      	b.n	8004270 <__sfputs_r+0x22>
 8004260:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004264:	463a      	mov	r2, r7
 8004266:	4630      	mov	r0, r6
 8004268:	f7ff ffda 	bl	8004220 <__sfputc_r>
 800426c:	1c43      	adds	r3, r0, #1
 800426e:	d1f3      	bne.n	8004258 <__sfputs_r+0xa>
 8004270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004274 <_vfiprintf_r>:
 8004274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004278:	460d      	mov	r5, r1
 800427a:	b09d      	sub	sp, #116	; 0x74
 800427c:	4614      	mov	r4, r2
 800427e:	4698      	mov	r8, r3
 8004280:	4606      	mov	r6, r0
 8004282:	b118      	cbz	r0, 800428c <_vfiprintf_r+0x18>
 8004284:	6983      	ldr	r3, [r0, #24]
 8004286:	b90b      	cbnz	r3, 800428c <_vfiprintf_r+0x18>
 8004288:	f7ff fde4 	bl	8003e54 <__sinit>
 800428c:	4b89      	ldr	r3, [pc, #548]	; (80044b4 <_vfiprintf_r+0x240>)
 800428e:	429d      	cmp	r5, r3
 8004290:	d11b      	bne.n	80042ca <_vfiprintf_r+0x56>
 8004292:	6875      	ldr	r5, [r6, #4]
 8004294:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004296:	07d9      	lsls	r1, r3, #31
 8004298:	d405      	bmi.n	80042a6 <_vfiprintf_r+0x32>
 800429a:	89ab      	ldrh	r3, [r5, #12]
 800429c:	059a      	lsls	r2, r3, #22
 800429e:	d402      	bmi.n	80042a6 <_vfiprintf_r+0x32>
 80042a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80042a2:	f7ff fe75 	bl	8003f90 <__retarget_lock_acquire_recursive>
 80042a6:	89ab      	ldrh	r3, [r5, #12]
 80042a8:	071b      	lsls	r3, r3, #28
 80042aa:	d501      	bpl.n	80042b0 <_vfiprintf_r+0x3c>
 80042ac:	692b      	ldr	r3, [r5, #16]
 80042ae:	b9eb      	cbnz	r3, 80042ec <_vfiprintf_r+0x78>
 80042b0:	4629      	mov	r1, r5
 80042b2:	4630      	mov	r0, r6
 80042b4:	f7ff fc46 	bl	8003b44 <__swsetup_r>
 80042b8:	b1c0      	cbz	r0, 80042ec <_vfiprintf_r+0x78>
 80042ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80042bc:	07dc      	lsls	r4, r3, #31
 80042be:	d50e      	bpl.n	80042de <_vfiprintf_r+0x6a>
 80042c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80042c4:	b01d      	add	sp, #116	; 0x74
 80042c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042ca:	4b7b      	ldr	r3, [pc, #492]	; (80044b8 <_vfiprintf_r+0x244>)
 80042cc:	429d      	cmp	r5, r3
 80042ce:	d101      	bne.n	80042d4 <_vfiprintf_r+0x60>
 80042d0:	68b5      	ldr	r5, [r6, #8]
 80042d2:	e7df      	b.n	8004294 <_vfiprintf_r+0x20>
 80042d4:	4b79      	ldr	r3, [pc, #484]	; (80044bc <_vfiprintf_r+0x248>)
 80042d6:	429d      	cmp	r5, r3
 80042d8:	bf08      	it	eq
 80042da:	68f5      	ldreq	r5, [r6, #12]
 80042dc:	e7da      	b.n	8004294 <_vfiprintf_r+0x20>
 80042de:	89ab      	ldrh	r3, [r5, #12]
 80042e0:	0598      	lsls	r0, r3, #22
 80042e2:	d4ed      	bmi.n	80042c0 <_vfiprintf_r+0x4c>
 80042e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80042e6:	f7ff fe54 	bl	8003f92 <__retarget_lock_release_recursive>
 80042ea:	e7e9      	b.n	80042c0 <_vfiprintf_r+0x4c>
 80042ec:	2300      	movs	r3, #0
 80042ee:	9309      	str	r3, [sp, #36]	; 0x24
 80042f0:	2320      	movs	r3, #32
 80042f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80042f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80042fa:	2330      	movs	r3, #48	; 0x30
 80042fc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80044c0 <_vfiprintf_r+0x24c>
 8004300:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004304:	f04f 0901 	mov.w	r9, #1
 8004308:	4623      	mov	r3, r4
 800430a:	469a      	mov	sl, r3
 800430c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004310:	b10a      	cbz	r2, 8004316 <_vfiprintf_r+0xa2>
 8004312:	2a25      	cmp	r2, #37	; 0x25
 8004314:	d1f9      	bne.n	800430a <_vfiprintf_r+0x96>
 8004316:	ebba 0b04 	subs.w	fp, sl, r4
 800431a:	d00b      	beq.n	8004334 <_vfiprintf_r+0xc0>
 800431c:	465b      	mov	r3, fp
 800431e:	4622      	mov	r2, r4
 8004320:	4629      	mov	r1, r5
 8004322:	4630      	mov	r0, r6
 8004324:	f7ff ff93 	bl	800424e <__sfputs_r>
 8004328:	3001      	adds	r0, #1
 800432a:	f000 80aa 	beq.w	8004482 <_vfiprintf_r+0x20e>
 800432e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004330:	445a      	add	r2, fp
 8004332:	9209      	str	r2, [sp, #36]	; 0x24
 8004334:	f89a 3000 	ldrb.w	r3, [sl]
 8004338:	2b00      	cmp	r3, #0
 800433a:	f000 80a2 	beq.w	8004482 <_vfiprintf_r+0x20e>
 800433e:	2300      	movs	r3, #0
 8004340:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004344:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004348:	f10a 0a01 	add.w	sl, sl, #1
 800434c:	9304      	str	r3, [sp, #16]
 800434e:	9307      	str	r3, [sp, #28]
 8004350:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004354:	931a      	str	r3, [sp, #104]	; 0x68
 8004356:	4654      	mov	r4, sl
 8004358:	2205      	movs	r2, #5
 800435a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800435e:	4858      	ldr	r0, [pc, #352]	; (80044c0 <_vfiprintf_r+0x24c>)
 8004360:	f7fb ff36 	bl	80001d0 <memchr>
 8004364:	9a04      	ldr	r2, [sp, #16]
 8004366:	b9d8      	cbnz	r0, 80043a0 <_vfiprintf_r+0x12c>
 8004368:	06d1      	lsls	r1, r2, #27
 800436a:	bf44      	itt	mi
 800436c:	2320      	movmi	r3, #32
 800436e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004372:	0713      	lsls	r3, r2, #28
 8004374:	bf44      	itt	mi
 8004376:	232b      	movmi	r3, #43	; 0x2b
 8004378:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800437c:	f89a 3000 	ldrb.w	r3, [sl]
 8004380:	2b2a      	cmp	r3, #42	; 0x2a
 8004382:	d015      	beq.n	80043b0 <_vfiprintf_r+0x13c>
 8004384:	9a07      	ldr	r2, [sp, #28]
 8004386:	4654      	mov	r4, sl
 8004388:	2000      	movs	r0, #0
 800438a:	f04f 0c0a 	mov.w	ip, #10
 800438e:	4621      	mov	r1, r4
 8004390:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004394:	3b30      	subs	r3, #48	; 0x30
 8004396:	2b09      	cmp	r3, #9
 8004398:	d94e      	bls.n	8004438 <_vfiprintf_r+0x1c4>
 800439a:	b1b0      	cbz	r0, 80043ca <_vfiprintf_r+0x156>
 800439c:	9207      	str	r2, [sp, #28]
 800439e:	e014      	b.n	80043ca <_vfiprintf_r+0x156>
 80043a0:	eba0 0308 	sub.w	r3, r0, r8
 80043a4:	fa09 f303 	lsl.w	r3, r9, r3
 80043a8:	4313      	orrs	r3, r2
 80043aa:	9304      	str	r3, [sp, #16]
 80043ac:	46a2      	mov	sl, r4
 80043ae:	e7d2      	b.n	8004356 <_vfiprintf_r+0xe2>
 80043b0:	9b03      	ldr	r3, [sp, #12]
 80043b2:	1d19      	adds	r1, r3, #4
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	9103      	str	r1, [sp, #12]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	bfbb      	ittet	lt
 80043bc:	425b      	neglt	r3, r3
 80043be:	f042 0202 	orrlt.w	r2, r2, #2
 80043c2:	9307      	strge	r3, [sp, #28]
 80043c4:	9307      	strlt	r3, [sp, #28]
 80043c6:	bfb8      	it	lt
 80043c8:	9204      	strlt	r2, [sp, #16]
 80043ca:	7823      	ldrb	r3, [r4, #0]
 80043cc:	2b2e      	cmp	r3, #46	; 0x2e
 80043ce:	d10c      	bne.n	80043ea <_vfiprintf_r+0x176>
 80043d0:	7863      	ldrb	r3, [r4, #1]
 80043d2:	2b2a      	cmp	r3, #42	; 0x2a
 80043d4:	d135      	bne.n	8004442 <_vfiprintf_r+0x1ce>
 80043d6:	9b03      	ldr	r3, [sp, #12]
 80043d8:	1d1a      	adds	r2, r3, #4
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	9203      	str	r2, [sp, #12]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	bfb8      	it	lt
 80043e2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80043e6:	3402      	adds	r4, #2
 80043e8:	9305      	str	r3, [sp, #20]
 80043ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80044d0 <_vfiprintf_r+0x25c>
 80043ee:	7821      	ldrb	r1, [r4, #0]
 80043f0:	2203      	movs	r2, #3
 80043f2:	4650      	mov	r0, sl
 80043f4:	f7fb feec 	bl	80001d0 <memchr>
 80043f8:	b140      	cbz	r0, 800440c <_vfiprintf_r+0x198>
 80043fa:	2340      	movs	r3, #64	; 0x40
 80043fc:	eba0 000a 	sub.w	r0, r0, sl
 8004400:	fa03 f000 	lsl.w	r0, r3, r0
 8004404:	9b04      	ldr	r3, [sp, #16]
 8004406:	4303      	orrs	r3, r0
 8004408:	3401      	adds	r4, #1
 800440a:	9304      	str	r3, [sp, #16]
 800440c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004410:	482c      	ldr	r0, [pc, #176]	; (80044c4 <_vfiprintf_r+0x250>)
 8004412:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004416:	2206      	movs	r2, #6
 8004418:	f7fb feda 	bl	80001d0 <memchr>
 800441c:	2800      	cmp	r0, #0
 800441e:	d03f      	beq.n	80044a0 <_vfiprintf_r+0x22c>
 8004420:	4b29      	ldr	r3, [pc, #164]	; (80044c8 <_vfiprintf_r+0x254>)
 8004422:	bb1b      	cbnz	r3, 800446c <_vfiprintf_r+0x1f8>
 8004424:	9b03      	ldr	r3, [sp, #12]
 8004426:	3307      	adds	r3, #7
 8004428:	f023 0307 	bic.w	r3, r3, #7
 800442c:	3308      	adds	r3, #8
 800442e:	9303      	str	r3, [sp, #12]
 8004430:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004432:	443b      	add	r3, r7
 8004434:	9309      	str	r3, [sp, #36]	; 0x24
 8004436:	e767      	b.n	8004308 <_vfiprintf_r+0x94>
 8004438:	fb0c 3202 	mla	r2, ip, r2, r3
 800443c:	460c      	mov	r4, r1
 800443e:	2001      	movs	r0, #1
 8004440:	e7a5      	b.n	800438e <_vfiprintf_r+0x11a>
 8004442:	2300      	movs	r3, #0
 8004444:	3401      	adds	r4, #1
 8004446:	9305      	str	r3, [sp, #20]
 8004448:	4619      	mov	r1, r3
 800444a:	f04f 0c0a 	mov.w	ip, #10
 800444e:	4620      	mov	r0, r4
 8004450:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004454:	3a30      	subs	r2, #48	; 0x30
 8004456:	2a09      	cmp	r2, #9
 8004458:	d903      	bls.n	8004462 <_vfiprintf_r+0x1ee>
 800445a:	2b00      	cmp	r3, #0
 800445c:	d0c5      	beq.n	80043ea <_vfiprintf_r+0x176>
 800445e:	9105      	str	r1, [sp, #20]
 8004460:	e7c3      	b.n	80043ea <_vfiprintf_r+0x176>
 8004462:	fb0c 2101 	mla	r1, ip, r1, r2
 8004466:	4604      	mov	r4, r0
 8004468:	2301      	movs	r3, #1
 800446a:	e7f0      	b.n	800444e <_vfiprintf_r+0x1da>
 800446c:	ab03      	add	r3, sp, #12
 800446e:	9300      	str	r3, [sp, #0]
 8004470:	462a      	mov	r2, r5
 8004472:	4b16      	ldr	r3, [pc, #88]	; (80044cc <_vfiprintf_r+0x258>)
 8004474:	a904      	add	r1, sp, #16
 8004476:	4630      	mov	r0, r6
 8004478:	f3af 8000 	nop.w
 800447c:	4607      	mov	r7, r0
 800447e:	1c78      	adds	r0, r7, #1
 8004480:	d1d6      	bne.n	8004430 <_vfiprintf_r+0x1bc>
 8004482:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004484:	07d9      	lsls	r1, r3, #31
 8004486:	d405      	bmi.n	8004494 <_vfiprintf_r+0x220>
 8004488:	89ab      	ldrh	r3, [r5, #12]
 800448a:	059a      	lsls	r2, r3, #22
 800448c:	d402      	bmi.n	8004494 <_vfiprintf_r+0x220>
 800448e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004490:	f7ff fd7f 	bl	8003f92 <__retarget_lock_release_recursive>
 8004494:	89ab      	ldrh	r3, [r5, #12]
 8004496:	065b      	lsls	r3, r3, #25
 8004498:	f53f af12 	bmi.w	80042c0 <_vfiprintf_r+0x4c>
 800449c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800449e:	e711      	b.n	80042c4 <_vfiprintf_r+0x50>
 80044a0:	ab03      	add	r3, sp, #12
 80044a2:	9300      	str	r3, [sp, #0]
 80044a4:	462a      	mov	r2, r5
 80044a6:	4b09      	ldr	r3, [pc, #36]	; (80044cc <_vfiprintf_r+0x258>)
 80044a8:	a904      	add	r1, sp, #16
 80044aa:	4630      	mov	r0, r6
 80044ac:	f000 f880 	bl	80045b0 <_printf_i>
 80044b0:	e7e4      	b.n	800447c <_vfiprintf_r+0x208>
 80044b2:	bf00      	nop
 80044b4:	08004b18 	.word	0x08004b18
 80044b8:	08004b38 	.word	0x08004b38
 80044bc:	08004af8 	.word	0x08004af8
 80044c0:	08004b58 	.word	0x08004b58
 80044c4:	08004b62 	.word	0x08004b62
 80044c8:	00000000 	.word	0x00000000
 80044cc:	0800424f 	.word	0x0800424f
 80044d0:	08004b5e 	.word	0x08004b5e

080044d4 <_printf_common>:
 80044d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044d8:	4616      	mov	r6, r2
 80044da:	4699      	mov	r9, r3
 80044dc:	688a      	ldr	r2, [r1, #8]
 80044de:	690b      	ldr	r3, [r1, #16]
 80044e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80044e4:	4293      	cmp	r3, r2
 80044e6:	bfb8      	it	lt
 80044e8:	4613      	movlt	r3, r2
 80044ea:	6033      	str	r3, [r6, #0]
 80044ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80044f0:	4607      	mov	r7, r0
 80044f2:	460c      	mov	r4, r1
 80044f4:	b10a      	cbz	r2, 80044fa <_printf_common+0x26>
 80044f6:	3301      	adds	r3, #1
 80044f8:	6033      	str	r3, [r6, #0]
 80044fa:	6823      	ldr	r3, [r4, #0]
 80044fc:	0699      	lsls	r1, r3, #26
 80044fe:	bf42      	ittt	mi
 8004500:	6833      	ldrmi	r3, [r6, #0]
 8004502:	3302      	addmi	r3, #2
 8004504:	6033      	strmi	r3, [r6, #0]
 8004506:	6825      	ldr	r5, [r4, #0]
 8004508:	f015 0506 	ands.w	r5, r5, #6
 800450c:	d106      	bne.n	800451c <_printf_common+0x48>
 800450e:	f104 0a19 	add.w	sl, r4, #25
 8004512:	68e3      	ldr	r3, [r4, #12]
 8004514:	6832      	ldr	r2, [r6, #0]
 8004516:	1a9b      	subs	r3, r3, r2
 8004518:	42ab      	cmp	r3, r5
 800451a:	dc26      	bgt.n	800456a <_printf_common+0x96>
 800451c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004520:	1e13      	subs	r3, r2, #0
 8004522:	6822      	ldr	r2, [r4, #0]
 8004524:	bf18      	it	ne
 8004526:	2301      	movne	r3, #1
 8004528:	0692      	lsls	r2, r2, #26
 800452a:	d42b      	bmi.n	8004584 <_printf_common+0xb0>
 800452c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004530:	4649      	mov	r1, r9
 8004532:	4638      	mov	r0, r7
 8004534:	47c0      	blx	r8
 8004536:	3001      	adds	r0, #1
 8004538:	d01e      	beq.n	8004578 <_printf_common+0xa4>
 800453a:	6823      	ldr	r3, [r4, #0]
 800453c:	68e5      	ldr	r5, [r4, #12]
 800453e:	6832      	ldr	r2, [r6, #0]
 8004540:	f003 0306 	and.w	r3, r3, #6
 8004544:	2b04      	cmp	r3, #4
 8004546:	bf08      	it	eq
 8004548:	1aad      	subeq	r5, r5, r2
 800454a:	68a3      	ldr	r3, [r4, #8]
 800454c:	6922      	ldr	r2, [r4, #16]
 800454e:	bf0c      	ite	eq
 8004550:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004554:	2500      	movne	r5, #0
 8004556:	4293      	cmp	r3, r2
 8004558:	bfc4      	itt	gt
 800455a:	1a9b      	subgt	r3, r3, r2
 800455c:	18ed      	addgt	r5, r5, r3
 800455e:	2600      	movs	r6, #0
 8004560:	341a      	adds	r4, #26
 8004562:	42b5      	cmp	r5, r6
 8004564:	d11a      	bne.n	800459c <_printf_common+0xc8>
 8004566:	2000      	movs	r0, #0
 8004568:	e008      	b.n	800457c <_printf_common+0xa8>
 800456a:	2301      	movs	r3, #1
 800456c:	4652      	mov	r2, sl
 800456e:	4649      	mov	r1, r9
 8004570:	4638      	mov	r0, r7
 8004572:	47c0      	blx	r8
 8004574:	3001      	adds	r0, #1
 8004576:	d103      	bne.n	8004580 <_printf_common+0xac>
 8004578:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800457c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004580:	3501      	adds	r5, #1
 8004582:	e7c6      	b.n	8004512 <_printf_common+0x3e>
 8004584:	18e1      	adds	r1, r4, r3
 8004586:	1c5a      	adds	r2, r3, #1
 8004588:	2030      	movs	r0, #48	; 0x30
 800458a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800458e:	4422      	add	r2, r4
 8004590:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004594:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004598:	3302      	adds	r3, #2
 800459a:	e7c7      	b.n	800452c <_printf_common+0x58>
 800459c:	2301      	movs	r3, #1
 800459e:	4622      	mov	r2, r4
 80045a0:	4649      	mov	r1, r9
 80045a2:	4638      	mov	r0, r7
 80045a4:	47c0      	blx	r8
 80045a6:	3001      	adds	r0, #1
 80045a8:	d0e6      	beq.n	8004578 <_printf_common+0xa4>
 80045aa:	3601      	adds	r6, #1
 80045ac:	e7d9      	b.n	8004562 <_printf_common+0x8e>
	...

080045b0 <_printf_i>:
 80045b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80045b4:	7e0f      	ldrb	r7, [r1, #24]
 80045b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80045b8:	2f78      	cmp	r7, #120	; 0x78
 80045ba:	4691      	mov	r9, r2
 80045bc:	4680      	mov	r8, r0
 80045be:	460c      	mov	r4, r1
 80045c0:	469a      	mov	sl, r3
 80045c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80045c6:	d807      	bhi.n	80045d8 <_printf_i+0x28>
 80045c8:	2f62      	cmp	r7, #98	; 0x62
 80045ca:	d80a      	bhi.n	80045e2 <_printf_i+0x32>
 80045cc:	2f00      	cmp	r7, #0
 80045ce:	f000 80d8 	beq.w	8004782 <_printf_i+0x1d2>
 80045d2:	2f58      	cmp	r7, #88	; 0x58
 80045d4:	f000 80a3 	beq.w	800471e <_printf_i+0x16e>
 80045d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80045dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80045e0:	e03a      	b.n	8004658 <_printf_i+0xa8>
 80045e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80045e6:	2b15      	cmp	r3, #21
 80045e8:	d8f6      	bhi.n	80045d8 <_printf_i+0x28>
 80045ea:	a101      	add	r1, pc, #4	; (adr r1, 80045f0 <_printf_i+0x40>)
 80045ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80045f0:	08004649 	.word	0x08004649
 80045f4:	0800465d 	.word	0x0800465d
 80045f8:	080045d9 	.word	0x080045d9
 80045fc:	080045d9 	.word	0x080045d9
 8004600:	080045d9 	.word	0x080045d9
 8004604:	080045d9 	.word	0x080045d9
 8004608:	0800465d 	.word	0x0800465d
 800460c:	080045d9 	.word	0x080045d9
 8004610:	080045d9 	.word	0x080045d9
 8004614:	080045d9 	.word	0x080045d9
 8004618:	080045d9 	.word	0x080045d9
 800461c:	08004769 	.word	0x08004769
 8004620:	0800468d 	.word	0x0800468d
 8004624:	0800474b 	.word	0x0800474b
 8004628:	080045d9 	.word	0x080045d9
 800462c:	080045d9 	.word	0x080045d9
 8004630:	0800478b 	.word	0x0800478b
 8004634:	080045d9 	.word	0x080045d9
 8004638:	0800468d 	.word	0x0800468d
 800463c:	080045d9 	.word	0x080045d9
 8004640:	080045d9 	.word	0x080045d9
 8004644:	08004753 	.word	0x08004753
 8004648:	682b      	ldr	r3, [r5, #0]
 800464a:	1d1a      	adds	r2, r3, #4
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	602a      	str	r2, [r5, #0]
 8004650:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004654:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004658:	2301      	movs	r3, #1
 800465a:	e0a3      	b.n	80047a4 <_printf_i+0x1f4>
 800465c:	6820      	ldr	r0, [r4, #0]
 800465e:	6829      	ldr	r1, [r5, #0]
 8004660:	0606      	lsls	r6, r0, #24
 8004662:	f101 0304 	add.w	r3, r1, #4
 8004666:	d50a      	bpl.n	800467e <_printf_i+0xce>
 8004668:	680e      	ldr	r6, [r1, #0]
 800466a:	602b      	str	r3, [r5, #0]
 800466c:	2e00      	cmp	r6, #0
 800466e:	da03      	bge.n	8004678 <_printf_i+0xc8>
 8004670:	232d      	movs	r3, #45	; 0x2d
 8004672:	4276      	negs	r6, r6
 8004674:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004678:	485e      	ldr	r0, [pc, #376]	; (80047f4 <_printf_i+0x244>)
 800467a:	230a      	movs	r3, #10
 800467c:	e019      	b.n	80046b2 <_printf_i+0x102>
 800467e:	680e      	ldr	r6, [r1, #0]
 8004680:	602b      	str	r3, [r5, #0]
 8004682:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004686:	bf18      	it	ne
 8004688:	b236      	sxthne	r6, r6
 800468a:	e7ef      	b.n	800466c <_printf_i+0xbc>
 800468c:	682b      	ldr	r3, [r5, #0]
 800468e:	6820      	ldr	r0, [r4, #0]
 8004690:	1d19      	adds	r1, r3, #4
 8004692:	6029      	str	r1, [r5, #0]
 8004694:	0601      	lsls	r1, r0, #24
 8004696:	d501      	bpl.n	800469c <_printf_i+0xec>
 8004698:	681e      	ldr	r6, [r3, #0]
 800469a:	e002      	b.n	80046a2 <_printf_i+0xf2>
 800469c:	0646      	lsls	r6, r0, #25
 800469e:	d5fb      	bpl.n	8004698 <_printf_i+0xe8>
 80046a0:	881e      	ldrh	r6, [r3, #0]
 80046a2:	4854      	ldr	r0, [pc, #336]	; (80047f4 <_printf_i+0x244>)
 80046a4:	2f6f      	cmp	r7, #111	; 0x6f
 80046a6:	bf0c      	ite	eq
 80046a8:	2308      	moveq	r3, #8
 80046aa:	230a      	movne	r3, #10
 80046ac:	2100      	movs	r1, #0
 80046ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80046b2:	6865      	ldr	r5, [r4, #4]
 80046b4:	60a5      	str	r5, [r4, #8]
 80046b6:	2d00      	cmp	r5, #0
 80046b8:	bfa2      	ittt	ge
 80046ba:	6821      	ldrge	r1, [r4, #0]
 80046bc:	f021 0104 	bicge.w	r1, r1, #4
 80046c0:	6021      	strge	r1, [r4, #0]
 80046c2:	b90e      	cbnz	r6, 80046c8 <_printf_i+0x118>
 80046c4:	2d00      	cmp	r5, #0
 80046c6:	d04d      	beq.n	8004764 <_printf_i+0x1b4>
 80046c8:	4615      	mov	r5, r2
 80046ca:	fbb6 f1f3 	udiv	r1, r6, r3
 80046ce:	fb03 6711 	mls	r7, r3, r1, r6
 80046d2:	5dc7      	ldrb	r7, [r0, r7]
 80046d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80046d8:	4637      	mov	r7, r6
 80046da:	42bb      	cmp	r3, r7
 80046dc:	460e      	mov	r6, r1
 80046de:	d9f4      	bls.n	80046ca <_printf_i+0x11a>
 80046e0:	2b08      	cmp	r3, #8
 80046e2:	d10b      	bne.n	80046fc <_printf_i+0x14c>
 80046e4:	6823      	ldr	r3, [r4, #0]
 80046e6:	07de      	lsls	r6, r3, #31
 80046e8:	d508      	bpl.n	80046fc <_printf_i+0x14c>
 80046ea:	6923      	ldr	r3, [r4, #16]
 80046ec:	6861      	ldr	r1, [r4, #4]
 80046ee:	4299      	cmp	r1, r3
 80046f0:	bfde      	ittt	le
 80046f2:	2330      	movle	r3, #48	; 0x30
 80046f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80046f8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80046fc:	1b52      	subs	r2, r2, r5
 80046fe:	6122      	str	r2, [r4, #16]
 8004700:	f8cd a000 	str.w	sl, [sp]
 8004704:	464b      	mov	r3, r9
 8004706:	aa03      	add	r2, sp, #12
 8004708:	4621      	mov	r1, r4
 800470a:	4640      	mov	r0, r8
 800470c:	f7ff fee2 	bl	80044d4 <_printf_common>
 8004710:	3001      	adds	r0, #1
 8004712:	d14c      	bne.n	80047ae <_printf_i+0x1fe>
 8004714:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004718:	b004      	add	sp, #16
 800471a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800471e:	4835      	ldr	r0, [pc, #212]	; (80047f4 <_printf_i+0x244>)
 8004720:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004724:	6829      	ldr	r1, [r5, #0]
 8004726:	6823      	ldr	r3, [r4, #0]
 8004728:	f851 6b04 	ldr.w	r6, [r1], #4
 800472c:	6029      	str	r1, [r5, #0]
 800472e:	061d      	lsls	r5, r3, #24
 8004730:	d514      	bpl.n	800475c <_printf_i+0x1ac>
 8004732:	07df      	lsls	r7, r3, #31
 8004734:	bf44      	itt	mi
 8004736:	f043 0320 	orrmi.w	r3, r3, #32
 800473a:	6023      	strmi	r3, [r4, #0]
 800473c:	b91e      	cbnz	r6, 8004746 <_printf_i+0x196>
 800473e:	6823      	ldr	r3, [r4, #0]
 8004740:	f023 0320 	bic.w	r3, r3, #32
 8004744:	6023      	str	r3, [r4, #0]
 8004746:	2310      	movs	r3, #16
 8004748:	e7b0      	b.n	80046ac <_printf_i+0xfc>
 800474a:	6823      	ldr	r3, [r4, #0]
 800474c:	f043 0320 	orr.w	r3, r3, #32
 8004750:	6023      	str	r3, [r4, #0]
 8004752:	2378      	movs	r3, #120	; 0x78
 8004754:	4828      	ldr	r0, [pc, #160]	; (80047f8 <_printf_i+0x248>)
 8004756:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800475a:	e7e3      	b.n	8004724 <_printf_i+0x174>
 800475c:	0659      	lsls	r1, r3, #25
 800475e:	bf48      	it	mi
 8004760:	b2b6      	uxthmi	r6, r6
 8004762:	e7e6      	b.n	8004732 <_printf_i+0x182>
 8004764:	4615      	mov	r5, r2
 8004766:	e7bb      	b.n	80046e0 <_printf_i+0x130>
 8004768:	682b      	ldr	r3, [r5, #0]
 800476a:	6826      	ldr	r6, [r4, #0]
 800476c:	6961      	ldr	r1, [r4, #20]
 800476e:	1d18      	adds	r0, r3, #4
 8004770:	6028      	str	r0, [r5, #0]
 8004772:	0635      	lsls	r5, r6, #24
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	d501      	bpl.n	800477c <_printf_i+0x1cc>
 8004778:	6019      	str	r1, [r3, #0]
 800477a:	e002      	b.n	8004782 <_printf_i+0x1d2>
 800477c:	0670      	lsls	r0, r6, #25
 800477e:	d5fb      	bpl.n	8004778 <_printf_i+0x1c8>
 8004780:	8019      	strh	r1, [r3, #0]
 8004782:	2300      	movs	r3, #0
 8004784:	6123      	str	r3, [r4, #16]
 8004786:	4615      	mov	r5, r2
 8004788:	e7ba      	b.n	8004700 <_printf_i+0x150>
 800478a:	682b      	ldr	r3, [r5, #0]
 800478c:	1d1a      	adds	r2, r3, #4
 800478e:	602a      	str	r2, [r5, #0]
 8004790:	681d      	ldr	r5, [r3, #0]
 8004792:	6862      	ldr	r2, [r4, #4]
 8004794:	2100      	movs	r1, #0
 8004796:	4628      	mov	r0, r5
 8004798:	f7fb fd1a 	bl	80001d0 <memchr>
 800479c:	b108      	cbz	r0, 80047a2 <_printf_i+0x1f2>
 800479e:	1b40      	subs	r0, r0, r5
 80047a0:	6060      	str	r0, [r4, #4]
 80047a2:	6863      	ldr	r3, [r4, #4]
 80047a4:	6123      	str	r3, [r4, #16]
 80047a6:	2300      	movs	r3, #0
 80047a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047ac:	e7a8      	b.n	8004700 <_printf_i+0x150>
 80047ae:	6923      	ldr	r3, [r4, #16]
 80047b0:	462a      	mov	r2, r5
 80047b2:	4649      	mov	r1, r9
 80047b4:	4640      	mov	r0, r8
 80047b6:	47d0      	blx	sl
 80047b8:	3001      	adds	r0, #1
 80047ba:	d0ab      	beq.n	8004714 <_printf_i+0x164>
 80047bc:	6823      	ldr	r3, [r4, #0]
 80047be:	079b      	lsls	r3, r3, #30
 80047c0:	d413      	bmi.n	80047ea <_printf_i+0x23a>
 80047c2:	68e0      	ldr	r0, [r4, #12]
 80047c4:	9b03      	ldr	r3, [sp, #12]
 80047c6:	4298      	cmp	r0, r3
 80047c8:	bfb8      	it	lt
 80047ca:	4618      	movlt	r0, r3
 80047cc:	e7a4      	b.n	8004718 <_printf_i+0x168>
 80047ce:	2301      	movs	r3, #1
 80047d0:	4632      	mov	r2, r6
 80047d2:	4649      	mov	r1, r9
 80047d4:	4640      	mov	r0, r8
 80047d6:	47d0      	blx	sl
 80047d8:	3001      	adds	r0, #1
 80047da:	d09b      	beq.n	8004714 <_printf_i+0x164>
 80047dc:	3501      	adds	r5, #1
 80047de:	68e3      	ldr	r3, [r4, #12]
 80047e0:	9903      	ldr	r1, [sp, #12]
 80047e2:	1a5b      	subs	r3, r3, r1
 80047e4:	42ab      	cmp	r3, r5
 80047e6:	dcf2      	bgt.n	80047ce <_printf_i+0x21e>
 80047e8:	e7eb      	b.n	80047c2 <_printf_i+0x212>
 80047ea:	2500      	movs	r5, #0
 80047ec:	f104 0619 	add.w	r6, r4, #25
 80047f0:	e7f5      	b.n	80047de <_printf_i+0x22e>
 80047f2:	bf00      	nop
 80047f4:	08004b69 	.word	0x08004b69
 80047f8:	08004b7a 	.word	0x08004b7a

080047fc <_sbrk_r>:
 80047fc:	b538      	push	{r3, r4, r5, lr}
 80047fe:	4d06      	ldr	r5, [pc, #24]	; (8004818 <_sbrk_r+0x1c>)
 8004800:	2300      	movs	r3, #0
 8004802:	4604      	mov	r4, r0
 8004804:	4608      	mov	r0, r1
 8004806:	602b      	str	r3, [r5, #0]
 8004808:	f7fc fc32 	bl	8001070 <_sbrk>
 800480c:	1c43      	adds	r3, r0, #1
 800480e:	d102      	bne.n	8004816 <_sbrk_r+0x1a>
 8004810:	682b      	ldr	r3, [r5, #0]
 8004812:	b103      	cbz	r3, 8004816 <_sbrk_r+0x1a>
 8004814:	6023      	str	r3, [r4, #0]
 8004816:	bd38      	pop	{r3, r4, r5, pc}
 8004818:	2000079c 	.word	0x2000079c

0800481c <__sread>:
 800481c:	b510      	push	{r4, lr}
 800481e:	460c      	mov	r4, r1
 8004820:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004824:	f000 f8a0 	bl	8004968 <_read_r>
 8004828:	2800      	cmp	r0, #0
 800482a:	bfab      	itete	ge
 800482c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800482e:	89a3      	ldrhlt	r3, [r4, #12]
 8004830:	181b      	addge	r3, r3, r0
 8004832:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004836:	bfac      	ite	ge
 8004838:	6563      	strge	r3, [r4, #84]	; 0x54
 800483a:	81a3      	strhlt	r3, [r4, #12]
 800483c:	bd10      	pop	{r4, pc}

0800483e <__swrite>:
 800483e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004842:	461f      	mov	r7, r3
 8004844:	898b      	ldrh	r3, [r1, #12]
 8004846:	05db      	lsls	r3, r3, #23
 8004848:	4605      	mov	r5, r0
 800484a:	460c      	mov	r4, r1
 800484c:	4616      	mov	r6, r2
 800484e:	d505      	bpl.n	800485c <__swrite+0x1e>
 8004850:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004854:	2302      	movs	r3, #2
 8004856:	2200      	movs	r2, #0
 8004858:	f000 f868 	bl	800492c <_lseek_r>
 800485c:	89a3      	ldrh	r3, [r4, #12]
 800485e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004862:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004866:	81a3      	strh	r3, [r4, #12]
 8004868:	4632      	mov	r2, r6
 800486a:	463b      	mov	r3, r7
 800486c:	4628      	mov	r0, r5
 800486e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004872:	f000 b817 	b.w	80048a4 <_write_r>

08004876 <__sseek>:
 8004876:	b510      	push	{r4, lr}
 8004878:	460c      	mov	r4, r1
 800487a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800487e:	f000 f855 	bl	800492c <_lseek_r>
 8004882:	1c43      	adds	r3, r0, #1
 8004884:	89a3      	ldrh	r3, [r4, #12]
 8004886:	bf15      	itete	ne
 8004888:	6560      	strne	r0, [r4, #84]	; 0x54
 800488a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800488e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004892:	81a3      	strheq	r3, [r4, #12]
 8004894:	bf18      	it	ne
 8004896:	81a3      	strhne	r3, [r4, #12]
 8004898:	bd10      	pop	{r4, pc}

0800489a <__sclose>:
 800489a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800489e:	f000 b813 	b.w	80048c8 <_close_r>
	...

080048a4 <_write_r>:
 80048a4:	b538      	push	{r3, r4, r5, lr}
 80048a6:	4d07      	ldr	r5, [pc, #28]	; (80048c4 <_write_r+0x20>)
 80048a8:	4604      	mov	r4, r0
 80048aa:	4608      	mov	r0, r1
 80048ac:	4611      	mov	r1, r2
 80048ae:	2200      	movs	r2, #0
 80048b0:	602a      	str	r2, [r5, #0]
 80048b2:	461a      	mov	r2, r3
 80048b4:	f7fc fb8b 	bl	8000fce <_write>
 80048b8:	1c43      	adds	r3, r0, #1
 80048ba:	d102      	bne.n	80048c2 <_write_r+0x1e>
 80048bc:	682b      	ldr	r3, [r5, #0]
 80048be:	b103      	cbz	r3, 80048c2 <_write_r+0x1e>
 80048c0:	6023      	str	r3, [r4, #0]
 80048c2:	bd38      	pop	{r3, r4, r5, pc}
 80048c4:	2000079c 	.word	0x2000079c

080048c8 <_close_r>:
 80048c8:	b538      	push	{r3, r4, r5, lr}
 80048ca:	4d06      	ldr	r5, [pc, #24]	; (80048e4 <_close_r+0x1c>)
 80048cc:	2300      	movs	r3, #0
 80048ce:	4604      	mov	r4, r0
 80048d0:	4608      	mov	r0, r1
 80048d2:	602b      	str	r3, [r5, #0]
 80048d4:	f7fc fb97 	bl	8001006 <_close>
 80048d8:	1c43      	adds	r3, r0, #1
 80048da:	d102      	bne.n	80048e2 <_close_r+0x1a>
 80048dc:	682b      	ldr	r3, [r5, #0]
 80048de:	b103      	cbz	r3, 80048e2 <_close_r+0x1a>
 80048e0:	6023      	str	r3, [r4, #0]
 80048e2:	bd38      	pop	{r3, r4, r5, pc}
 80048e4:	2000079c 	.word	0x2000079c

080048e8 <_fstat_r>:
 80048e8:	b538      	push	{r3, r4, r5, lr}
 80048ea:	4d07      	ldr	r5, [pc, #28]	; (8004908 <_fstat_r+0x20>)
 80048ec:	2300      	movs	r3, #0
 80048ee:	4604      	mov	r4, r0
 80048f0:	4608      	mov	r0, r1
 80048f2:	4611      	mov	r1, r2
 80048f4:	602b      	str	r3, [r5, #0]
 80048f6:	f7fc fb92 	bl	800101e <_fstat>
 80048fa:	1c43      	adds	r3, r0, #1
 80048fc:	d102      	bne.n	8004904 <_fstat_r+0x1c>
 80048fe:	682b      	ldr	r3, [r5, #0]
 8004900:	b103      	cbz	r3, 8004904 <_fstat_r+0x1c>
 8004902:	6023      	str	r3, [r4, #0]
 8004904:	bd38      	pop	{r3, r4, r5, pc}
 8004906:	bf00      	nop
 8004908:	2000079c 	.word	0x2000079c

0800490c <_isatty_r>:
 800490c:	b538      	push	{r3, r4, r5, lr}
 800490e:	4d06      	ldr	r5, [pc, #24]	; (8004928 <_isatty_r+0x1c>)
 8004910:	2300      	movs	r3, #0
 8004912:	4604      	mov	r4, r0
 8004914:	4608      	mov	r0, r1
 8004916:	602b      	str	r3, [r5, #0]
 8004918:	f7fc fb91 	bl	800103e <_isatty>
 800491c:	1c43      	adds	r3, r0, #1
 800491e:	d102      	bne.n	8004926 <_isatty_r+0x1a>
 8004920:	682b      	ldr	r3, [r5, #0]
 8004922:	b103      	cbz	r3, 8004926 <_isatty_r+0x1a>
 8004924:	6023      	str	r3, [r4, #0]
 8004926:	bd38      	pop	{r3, r4, r5, pc}
 8004928:	2000079c 	.word	0x2000079c

0800492c <_lseek_r>:
 800492c:	b538      	push	{r3, r4, r5, lr}
 800492e:	4d07      	ldr	r5, [pc, #28]	; (800494c <_lseek_r+0x20>)
 8004930:	4604      	mov	r4, r0
 8004932:	4608      	mov	r0, r1
 8004934:	4611      	mov	r1, r2
 8004936:	2200      	movs	r2, #0
 8004938:	602a      	str	r2, [r5, #0]
 800493a:	461a      	mov	r2, r3
 800493c:	f7fc fb8a 	bl	8001054 <_lseek>
 8004940:	1c43      	adds	r3, r0, #1
 8004942:	d102      	bne.n	800494a <_lseek_r+0x1e>
 8004944:	682b      	ldr	r3, [r5, #0]
 8004946:	b103      	cbz	r3, 800494a <_lseek_r+0x1e>
 8004948:	6023      	str	r3, [r4, #0]
 800494a:	bd38      	pop	{r3, r4, r5, pc}
 800494c:	2000079c 	.word	0x2000079c

08004950 <__malloc_lock>:
 8004950:	4801      	ldr	r0, [pc, #4]	; (8004958 <__malloc_lock+0x8>)
 8004952:	f7ff bb1d 	b.w	8003f90 <__retarget_lock_acquire_recursive>
 8004956:	bf00      	nop
 8004958:	20000790 	.word	0x20000790

0800495c <__malloc_unlock>:
 800495c:	4801      	ldr	r0, [pc, #4]	; (8004964 <__malloc_unlock+0x8>)
 800495e:	f7ff bb18 	b.w	8003f92 <__retarget_lock_release_recursive>
 8004962:	bf00      	nop
 8004964:	20000790 	.word	0x20000790

08004968 <_read_r>:
 8004968:	b538      	push	{r3, r4, r5, lr}
 800496a:	4d07      	ldr	r5, [pc, #28]	; (8004988 <_read_r+0x20>)
 800496c:	4604      	mov	r4, r0
 800496e:	4608      	mov	r0, r1
 8004970:	4611      	mov	r1, r2
 8004972:	2200      	movs	r2, #0
 8004974:	602a      	str	r2, [r5, #0]
 8004976:	461a      	mov	r2, r3
 8004978:	f7fc fb0c 	bl	8000f94 <_read>
 800497c:	1c43      	adds	r3, r0, #1
 800497e:	d102      	bne.n	8004986 <_read_r+0x1e>
 8004980:	682b      	ldr	r3, [r5, #0]
 8004982:	b103      	cbz	r3, 8004986 <_read_r+0x1e>
 8004984:	6023      	str	r3, [r4, #0]
 8004986:	bd38      	pop	{r3, r4, r5, pc}
 8004988:	2000079c 	.word	0x2000079c

0800498c <_init>:
 800498c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800498e:	bf00      	nop
 8004990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004992:	bc08      	pop	{r3}
 8004994:	469e      	mov	lr, r3
 8004996:	4770      	bx	lr

08004998 <_fini>:
 8004998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800499a:	bf00      	nop
 800499c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800499e:	bc08      	pop	{r3}
 80049a0:	469e      	mov	lr, r3
 80049a2:	4770      	bx	lr
